-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: Mar 05, 2019 at 03:16 AM
-- Server version: 5.6.39-cll-lve
-- PHP Version: 5.6.30


CREATE DATABASE IF NOT EXISTS iss; 
USE iss;

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `iss`
--

-- --------------------------------------------------------

--
-- Table structure for table `content`
--

CREATE TABLE `content` (
  `qid` int(16) NOT NULL,
  `unit_type` enum('homework','lab','exam','resource','quiz') COLLATE utf8_unicode_ci NOT NULL,
  `unit_number` int(5) NOT NULL,
  `question_number` int(5) NOT NULL,
  `question_text` text COLLATE utf8_unicode_ci NOT NULL,
  `unit_title` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  `unit_name` varchar(49) COLLATE utf8_unicode_ci NOT NULL,
  `question_type` varchar(49) COLLATE utf8_unicode_ci NOT NULL,
  `question_title` varchar(49) COLLATE utf8_unicode_ci NOT NULL,
  `invisible` tinyint(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `content`
--

INSERT INTO `content` (`qid`, `unit_type`, `unit_number`, `question_number`, `question_text`, `unit_title`, `unit_name`, `question_type`, `question_title`, `invisible`) VALUES
(0, 'homework', 1, 1, '   <ul><li> Creating Files and Directories in Linux (command: <code>mkdir</code>, <code>touch</code>, <code>ls</code>, <code>cd</code>)\r\n</ul> \r\nWithin your  ~/class/h01/q01 directory, create the following directory structure and files (see below):\r\n<ul >\r\n<li> Create the following subdirectories: \r\n<ol class = \"question_items\">\r\n<li>cars\r\n<li>cars/honda\r\n<li>cars/gm\r\n<li>cars/toyota\r\n<li> cars/ford\r\n</ol>\r\n\r\n\r\n<li> Create the following files:\r\n<table id=\"tbl_regular\">\r\n<tbody>\r\n<tr><td>  cars/honda/accord </td>  <td>   cars/honda/odyssey  </td> </tr>\r\n<tr><td>   cars/toyota/prius </td>  <td>  cars/toyota/camry   </td> </tr>\r\n<tr><td>   cars/ford/f150</td>  <td>   cars/ford/focus  </td> </tr>\r\n<tr><td>  cars/gm/equinox </td>  <td>   cars/gm/corvette  </td> </tr>\r\n<tbody>			\r\n</table>\r\n</li>\r\n<ul>\r\n<p> A good way to check the directories and files altogether is using <c>ls *</c>as follows.  As you can see, I am missing the cars under the toyota directory.  </p>\r\n<pre class=\"\">\r\nchen_user@vma45:~/class/h01/q01/cars$ ls *\r\nford:\r\nf150  focus\r\n\r\ngm:\r\ncorvette  equinox\r\n\r\nhonda:\r\naccord  odyssey\r\n\r\ntoyota:\r\nchen_user@vma45:~/class/h01/q01/cars$ </pre>\r\n\r\n<li> You can create files using <code>touch <i>filename</i></code> in the appropriate directory to create a file. You can also touch to create more than one file at the same time by giving multiple filenames after touch: <code> touch <i> fname1 fname2 fname3... </i></code>. \r\n<li> You can also create files using text editors such as <b>vim</b> (the industry <u>de facto</u> standard editor) or nano (which is easy and what we use in this class) but <a href=\"https://github.com/swcarpentry/shell-novice/issues/585\">nano does not save empty files </a>. \r\n</ul>\r\n</ul>\r\n\r\n\r\n<div>\r\n<p><img src = \"http://bashnet.us/iss/images/h01_1.png\" width =\"100%\" height=\"auto\" style=\"float:left\"> </p><br></div>\r\n\r\n<div>\r\n<ul>\r\n<p><li>When you have completed this activity, run the program check01.sh to check your work.  \r\nRun it using  	<code> ./check01.sh </code>.\r\n<p><li>Once you are satisfied that everything is correct, enter the word â€œDONEâ€ (less the quotation marks) on the line starting with â€œA.â€ in h01/q01/a01.txt.  Don\'t forget to leave a space between A. and \"DONE.\"\r\n</ul></div>  ', '', '', '', '', 0),
(1, 'homework', 1, 3, '   <ul>\r\n<li> Linux file system (directory structure) (command: <code>cd</code>, <c>ls</c>)\r\n</ul>\r\nAssuming that:\r\n<ul class = \"question_items\">\r\n<li> your current working directory is ~/class/h01/q03, \r\n<li> you completed question 1 correctly, and \r\n<li> you have installed the files from h01.tar.gz. \r\n</ul>\r\n<p>which of the following pathnames refers to an existing file?  \r\n\r\n<ol class = \"answer_items\">\r\n<li> <code> ~/class/done.sh  </code>\r\n<li>	<code>      ../q01/cars  </code>\r\n<li>	<code>      /class/h01  </code>\r\n<li>	<code>      ../a03.txt  </code>\r\n<li>	<code>      /home  </code> \r\n</ol>        \r\n\r\n<ul><li> Record your answers in h01/q03/a03.txt.  Enter T for those that are existing files, and F for those that arenâ€™t existing files.  </ul>\r\n  ', '', '', '', '', 0),
(3, 'lab', 1, 0, ' <h3> Introduction </h3>\r\n<p>This lab introduces you to the use of Linux files and processes: <p>\r\n<ol>\r\n<li> Accessing and managing your virtual machine\r\n<li> User account management\r\n<li> Unix file systems and file manipulation commands\r\n<li> Basic Unix shell commands\r\n<li> Configuring and testing an Apache web server\r\n<li> Moving files between computers with scp (secure copy)\r\n<li> Text processing and redirection </ol>\r\n\r\n<p> You and your lab partner are jointly responsible for managing the virtual machine (VM) that will be used to complete your labs.  That includes user accounts, applications, and systems tools such as the web server and database systems.  </p>\r\n\r\n<p> One of the challenges we have in this course is that you are scripting and managing data remotely through a Windows RDP (yes, our Linux VMs are on a Windows server) and then the encrypted network protocol Secure Shell (SSH) to handle the VM server operations.  This added security measure means you can not run SSH from your PC anymore, and it adds an additional level of complexity to our management and use of the systems that you have the opportunity to understand and master.  So, following instructions carefully, documenting the changes you make, Google a lot, and learn from our mistakes is very important. </p>\r\n\r\n<p> This lab will cover some basics of Linux account, file, and content management.  The tasks you need to accomplish in this lab are described below: </p>\r\n\r\n<ol>\r\n<li> Create the user accounts you will use later on and record their passwords in a secure location (assignment a00 on Canvas).  \r\n<li> Create the directories and directory structure needed for this class.\r\n<li> Configure your group\'s web server so it works in the cci.local domain.\r\n<li> Create and test a per-user directory web page.\r\n<li> Expand the website using content from another computer.\r\n<li> Create, document and save an archive of the expanded website.\r\n<li> Manipulate text streams using output redirection operators </ol>\r\n\r\n<p>To do any of this, you will need to access the virtual machine (VM) assigned to you using Secure Shell (SSH).  The secure shell application can be accessed using your FSUID and password from any Mac, Linux or Windows machine via the Remote Labs (https://labs.cci.fsu.edu) webpage. </p> ', '', '', '', '', 0),
(57, 'homework', 1, 2, '         <ul>\r\n    <li><p>Navigating around directories in the Linux <b>file system</b> (Linux <b>directory structure</b>) (command: <code>cd</code>)</li>\r\n</ul>\r\nWithin the h01/q02 directory, which of the following pathnames will move you to your <q>home directory</q> when using the cd command before it? (Note that by <q>your home\r\n    directory</q> we are referring to the user home directory of the current logged in user, not the\r\nsystem home directory (/home) that contains all the user directories.\r\n<ul>\r\n    <li>Assuming your class directory is located in your home directory and you are starting in your class/h01/q02 directory.\r\n    </li>\r\n    <li> (Itâ€™s convenient to open and tile two SSH terminals so you can test out the  command and path and record your answers at the same time in the other. Also, <code>cd - </code> will bring you back to the previous directory that you were in and <code>cd ~</code> or simply <code>cd</code> will bring you back to your user home.)\r\n    </li>\r\n</ul>\r\n<ol class=\"answer_items\">\r\n    <li><code>~/class </code></li>\r\n    <li><code>../../../ </code></li>\r\n    <li><code> ../../ </code></li>\r\n    <li><code> /home </code></li>\r\n    <li><code> ~/class/.. </code></li>\r\n</ol>    \r\n\r\n<ul>\r\n<li>Record your answers in h01/q02/a02.txt. Enter T for those that do, and F for those that donâ€™t. \r\n</ul>               ', '', '', '', '', 0),
(75, 'homework', 1, 4, ' <ul><li>Resource vs. Process</ul>\r\nIdentify each of the following as either an information system resource or\r\nprocess for the\r\nFSU website by \"\"entering\" either <q>Resource</q> or <q>Process</q> after the corresponding\r\nletter.\r\n<ol class=\"answer_items\">\r\n    <li> The computer used for the www.fsu.edu web server</li>\r\n    <li>Updating the student directory information</li>\r\n    <li>The FSU webmaster</li>\r\n    <li>The FSU internet used to access www.fsu.edu</li>\r\n    <li>Creating the FSU News and Events stories</li>\r\n</ol>\r\n<ul>\r\n    <li>Record your answers in h01/q04/a04.txt.</li>\r\n</ul>    ', '', '', '', '', 0),
(76, 'homework', 1, 5, '     <ul><li>Linux file system: Absolute (Full) vs. Relative Path (command: <code>cd</code>)</ul>\r\nFor each of the pathnames given below, answer <q>T</q> if the pathname is an\r\nabsolute(full) path; answer <q>F</q> if the entry that is a relative pathname .\r\n\r\n<ol type=\"A\">\r\n    <li><code> / </code> </li>\r\n    <li><code> /var/log </code> </li>\r\n    <li><code> h01/q03/a03.txt </code> </li>\r\n    <li><code> /home/st01/class/h01 </code> </li>\r\n    <li> <code> ../q02 </code> </li>\r\n</ol>\r\n\r\n<ul>\r\n<li>(### hint: An absolute (full) path has an absolute reference point: <code>/</code>)\r\n    <li> Record your answers in h01/q05/a05.txt.     </li>\r\n</ul>              ', '', '', '', '', 0),
(77, 'homework', 2, 1, '      <ul>\r\n    <li> Linux File System: Absolute path and relative path    </li>\r\n<li> # Technically, a <b><a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_267\">pathname</a></b> is a string to identify a file and it includes the path diretories and the <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_170\">filename</a>.  \r\n<li> # Note that directories and links are generally called files, too.\r\n<li> # Note that, in this question, if you are entering a pathname that refers to a directory, do not include the trailing slash (directory separator, or path delimiter, <c>/</c>) at the end of the pathname.  In practice, this is <a href=\"https://unix.stackexchange.com/questions/1910/how-does-linux-handle-multiple-consecutive-path-separators-home-username\">preferred</a> because it specifies that this pathname is a directory and you can imagine that it would be helpful when you are assigning a variable.  It\'s just we choose the general way of expressing pathnames in this question for the answer.  \r\n</ul>\r\nAssuming that:\r\n<ul>\r\n    <li> you have created a user account with the username â€œgsâ€ (short for \"great student\");\r\n    <li> your current working directory is /home/gs; and \r\n    <li> user gs has the following directory structure for the account\r\n</ul>\r\n<img src=\"http://bashnet.us/iss/images/h02_1.png\" width=\"95%\" alt=\"Figure 1. Directory tree of h01/q01\">\r\n\r\n<br>Provide the requested pathnames specified for the files (color coded above for\r\nconvenience).\r\n<ol class=\"question_items\">\r\n    <li>\r\n        What is the full (absolute) pathname for the file bin (<span\r\n                style=\"color: purple\">the\r\npurple file</span>)?\r\n    </li>\r\n    <li> What is the full (absolute) pathname for the file index.html (<span\r\n                style=\"color: red\">the red file</span>)?\r\n    </li>\r\n    <li> What is the relative pathname to the file tiger.png (<span style=\"color: green\">the green file</span>)?\r\n    </li>\r\n    <li> What is the relative pathname for the file h01.txt (<span style=\"color: blue\">the blue file</span>)?\r\n    </li>\r\n    <li> If you change your current working directory to /home/gs/class/a01 (using â€œcd\r\n        class/a01â€), what is the relative pathname for a02.sh (<span style=\"color: brown\">the brown file</span>)?\r\n    </li>\r\n</ol>\r\n<ul>\r\n    <li>Enter your responses in the file q01/a01.txt. (#hint: using the nano editor)\r\n    </li>\r\n</ul>        ', '', '', '', '', 0),
(143, 'homework', 2, 2, '<ul><li>PM & ITIL Concepts</ul>\r\nWhich of the following statements are true of ITIL, Project Management, Both, or Neither.\r\nFor those statements true of ITIL, enter I; for those statements, true of Project\r\nManagement, enter P; for those statements true of Both ITIL and Project Management, enter\r\nB; and for those statements true of neither enter N.\r\n<ol class=\"answer_items\">\r\n    <li>This set of standards is a recognized set of best practices.</li>\r\n    <li>This set of standards provides guidance for operating information systems.</li>\r\n    <li>This set of standards provides guidance for creating new information systems.</li>\r\n    <li>This set of standards always creates the best possible technical solution to a\r\n        problem.\r\n    </li>\r\n    <li>Companies are required to use these standards according to international law.</li>\r\n    <li>You canâ€™t practice this set of standards unless you are certified to do so.</li>\r\n    <li>This set of standards provides guidance on five information service management\r\n        core areas.\r\n    </li>\r\n    <li>One of the places this set of standards is documented is in the PMBOK.</li>\r\n</ol>\r\n<ul>\r\n    <li>Enter your responses in the file q02/a02.txt.</li>\r\n</ul>\r\n ', '', '', '', '', 0),
(157, 'homework', 2, 3, ' <ul><li>ITIL Standards</ul>\r\nAccording to the ITIL standards for information services, enter â€œYesâ€ for the entries\r\nbelow that are ITIL life cycle stages and â€œNoâ€ for those that are not.\r\n<ol class=\"answer_items\">\r\n    <li>Service marketing and sales</li>\r\n    <li>Service strategy</li>\r\n    <li>Service development</li>\r\n    <li>Continual service improvement</li>\r\n    <li>Service operation</li>\r\n    <li>Service acquisition</li>\r\n    <li>Service excellence</li>\r\n</ol>\r\n<ul>\r\n    <li>Enter your responses in the file q03/a03.txt.</li>\r\n</ul> ', '', '', '', '', 0),
(158, 'homework', 2, 4, ' <ul><li>Project Management Concepts</ul>\r\nProject management is concerned with balancing several factors in a project. Of\r\nthe five factors below, enter T for those which describe one of the three main\r\ngoals of project management and F for those which are not.\r\n\r\n<ol class=\"answer_items\">\r\n    <li>Completing the project within the time allocated for the project</li>\r\n    <li>Providing an organization with the most inexpensive technology</li>\r\n    <li>Making sure the right people get credit for completing the project</li>\r\n    <li>Making sure the project is done with minimal effort</li>\r\n    <li>Completing the project within the budget allocated for the project</li>\r\n    <li>Achieving the quality goals set for the project</li>\r\n</ol>\r\n<ul>\r\n    <li>Enter your responses in the file q04/a04.txt.</li>\r\n</ul> ', '', '', '', '', 0),
(162, 'homework', 2, 5, '                <ul><li> Linux File System</ul>\r\nAssuming you start in an empty home directory (<code>/home/<i>username</i></code>), there is one set of commands that can be used to create the directory structure shown on the right of the figure below. Identify the required commands and determine the order they need to be executed in order to:\r\n<ol>\r\n    <li>create the directory structure,</li>\r\n<li>change your working directory, and\r\n    <li>copy the file a01.tar.gz from the datacenter account on vma01\r\n        to /home/username/class/a01.\r\n    </li>\r\n</ol>\r\n\r\n<img alt=\"Figure. Path/file creation of h2/q05\"\r\n     src=\"http://bashnet.us/iss/images/h02_5.png\"\r\n     width=\"65%\">\r\n\r\n<p> Pick the steps from the Steps column in the order of how you would complete this task and write down the numbers one by one into the Answer column. </p>\r\n\r\n<table id=\"tbl_regular\" style=\"width:100%\">\r\n    <tr>\r\n    <th style=\"width:20%\">Command</th>\r\n    <th style=\"width:10%\">Answer</th>\r\n    <th style=\"width:70%\">Steps</th>\r\n    </tr>\r\n    <tbody>\r\n    <tr>\r\n        <td>A. 1st command</td>\r\n        <td></td>\r\n        <td rowspan=\"11\">\r\n<ol class=\"question_items\">\r\n<li> Already done with the required task\r\n<li> Requires a command that is not shown below\r\n<li> <code> cd a01 </code>\r\n<li> <code> cd class </code>\r\n<li> <code> scp datacenter@vma01:~/class/a01.tar.gz . </code>\r\n<li> <code> cp a01.tar.gz datacenter@vma01:/home/username/class/a01 </code> \r\n<li> <code> ls class </code>\r\n<li> <code> mkdir class </code>\r\n<li> <code> mkdir /home </code>\r\n<li> <code> mkdir a01 </code>\r\n<li> <code> mkdir /home/username </code>\r\n</ol>\r\n\r\n</td>\r\n    </tr>\r\n    <tr>\r\n        <td>B. 2nd command</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>C. 3rd command</td>\r\n        <td></td>\r\n\r\n    </tr>\r\n    <tr>\r\n        <td>D. 4th command</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>E. 5th command</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>F. 6th command</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td>G. 7th command</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ul>\r\n    <li>Please note that you should enter the answer 1 for additional steps if you can complete the task in less than 7 commands.  For example, if you only need 5 commands to complete the task, enter 1 for tasks F and G.\r\n    <li>Enter your responses in the file q05/a05.txt.\r\n</ul>                               ', '', '', '', '', 0),
(168, 'homework', 3, 1, '<ul>\r\n<li> # In this question, we are writing a script to perform two actions: <c>tar</c> and <c>grep</c> (global regular expression print, or search).  There is a layer of complexity added to each command, however.  You are asked to extract files of certain extension filename (*.html) (although all files in the tar file are .html files) and to search for a certain string (\"href\", case insensitive) recursively because some .html files are in a sub-directory.  \r\n<li> # Some of us might find this question challenging and say \"there\'s no way that I can be ready for this now.\"  If you are one of them just like I was before, just see this as an exercise and don\'t get frustrated too much if the way you solve the problem is not up to the perfection level you demand yourself to be at.  Truth is, like everything else, learning can be messy sometimes and you just need to take it as it is and move on with your learning.  Good news with learning in CS/IT is, you will soon look back and pat yourself on the shoulder and say: \"Good job!\"\r\n</ul>\r\n<ul class=check><li>\r\nCreate a script named q01.sh that will do the following (in the order specified below) from the directory h03/q01.  </ul>\r\n<ol>\r\n<li>	Uses <c>tar</c> to extract all files ending in html from the web.tar.gz into your q01 directory. \r\n<li>	Uses <c>grep</c> to display all of the href definitions in each of the html files extracted from web.tar.gz\r\n</ol>\r\n\r\n\r\nSome helpful tips are as below:\r\n<ol  class=\"upper_case\"> \r\n<li> The <c>tar</c> command:\r\n<table id=tbl_regular>     \r\n<tr>  <td> Command </td> <td> Function     </td> </tr>\r\n<tr> <td>  <c>tar -tf <i>tarfile</i> </td>  <td> preview tar file content </td>  </tr>                                                                                 \r\n<tr> <td>  <c>tar -xf <i>tarfile filename</i> </td>  <td> extract <i>filename</i> from <i>tarfile</i> </td>  </tr>                                                                                 \r\n<tr> <td> <c>tar -xf <i>tarfile --wildcards *.extension</i></c> </td>  <td>  extract all files with <i>*.extension</i> from <i>tarfile</i></td>  </tr>\r\n<tr> <td colspan=2> *** Note that <c>tar</c> by default will recurse into directories unless you use the <c>--no-recursion</c> option.</td>   </tr>\r\n</table>\r\n\r\n<li> <p> The <c>grep</c> command has a syntax of <c>grep [PATTERN] [FILE...]</c>.  Note it can search multiple files at the same time.  You may use wildcards to specify the file extension to search. \r\n<li> <p> In this question, two options <c>-i</c> (case insensitive) and <c>-r</c> (recursive) can be useful since we want the search both \"href\" and \"HREF\" and we want to search the *.html files under a directory at the same time as well.  You can do <c>man grep</c> to find out more about grep.   \r\n<p> Some commonly used grep options include:\r\n\r\n<table id=tbl_regular>     \r\n<tr>  <td> Command </td> <td> Function     </td> </tr>\r\n<tr> <td>  <c>grep  <i>\"string\" file.txt</i> </td>  <td> basice syntax; print lines matching the pattern </td>  </tr>                                                                                 \r\n<tr> <td>  <c>grep  <i>\"string\" file1 file2 file3... </i> </td>  <td> search for multiple files </td>  </tr>                                                                                 \r\n<tr> <td>  <c>grep -r <i>\"string\" directory/</i> </td>  <td> search multiple files recursively through directory tree   </td>  </tr>                                                                                 \r\n<tr> <td>  <c>grep -r <i>\"string\" *.txt directory/*.txt</i> </td>  <td> search for string in .txt files in this directory and the .txt files in <i>directory</i>  </td>  </tr>                                                                                 \r\n<tr> <td> <c>grep -n <i> \"string\" file </i></c> </td>  <td>  show line numbers </td>  </tr>\r\n<tr> <td> <c>grep -i <i> \"string\" file </i></c> </td>  <td> case insensitive </td>  </tr>\r\n<tr> <td> <c>grep -v <i> \"string\" file </i></c> </td>  <td> invert match </td>  </tr>\r\n<tr> <td> <c>grep -h <i> \"string\" file </i></c> </td>  <td> no file name for multiple file; default for single file </td>  </tr>\r\n<tr> <td> <c> grep -E \'foo|bar\' file.txt </i></c> </td>  <td> search for both foo and bar in file.txt; -E: extended regular expression </td>  </tr>\r\n</table>\r\n\r\n</ol>\r\n\r\n\r\n<ul>\r\n<li>When you have completed this script, enter DONE in response to part A in the file q01/a01.txt.\r\n<li>You can use the file check01.sh to check your work.\r\n   </ul>                             ', '', '', '', '', 0),
(170, 'homework', 3, 2, '      <ul>\r\n<li> # This question may look like a heavy dose for beginners in programming.  Although the concepts are pretty straightforward, putting alias, function, and environment variables (EVs or ENVs) together in one question can certainly be daunting.  But, you can do it, with or without the help from people around you, and Google. \r\n<li> # To create aliases, we use the alias command with a syntax of <c>alias  aliasName=\"your custom command here\"</c>.  Note that aliases give us a way of <b>customizing commands</b> as we want. \r\n<li> You will practice aliases and environment variables more later in other assignments and it will make better sense over time why these features are useful.  \r\n</ul>\r\n\r\n<ul id=check>\r\n<li><p> Create a file called q02.sh that defines the alias, function and environment variables with the names given below:\r\n</ul>\r\n\r\n<ol class = \"upper_case\">\r\n<li>	\r\n<ul id=check>\r\n<li>Create an <b>alias</b> with the name called <b>accounts</b>:  \r\n</ul>\r\nThis alias should display all the user accounts on your computer system by showing the files (directories) in the root home (/home) directory.\r\n<li id=none> ### note that it\'s a common practice to put your alias definitions in ~/.bashrc (or ~/.bash_aliases as suggested in Ubuntu) so they are made available next time your start a shell session because ~/.bashrc will be <c>source</c>d when the shell starts.  \r\n\r\n<li>	\r\n<ul id=check>\r\n<li>Create a <b>function</b> with the name called <b>extract</b>: \r\n</ul>\r\nThis function should extract the files from a compressed tar file named a0<i>X</i>.tar.gz (where <i>X</i> is an integer number provided to the function as position parameter).  Running this function should extract the files and send (redirect) a list of the names of the extracted files to a file called t<i>X</i>.txt.  \r\n\r\nFor example:\r\n<ul>\r\n<li><pre><c>extract 1</c></pre> (run either in a form of function call in script or command line command after sourcing) <br>\r\nwill extract the content from a01.tar.gz and redirect the names of the files extracted into t1.txt (### note that here we are not interested in the files extracted from the tar file (<c>tar -xf <i>tar_file_name</i></c>, as we usually do).  Instead, we are interested in the names of the files.  In this sense, we need the tar option <c>-v</c> (erbose) because it gives us the names of the files (including directories) being extracted from the tar.  You have seen <c>-v</c> been demonstrated a couple of times before, now it\'s time to put it into action!)  \r\n<li><pre><c>extract 3</c> </pre>\r\nwill extract the content from a03.tar.gz and put the names of the files extracted into t3.txt through redirection.\r\n</ul>\r\n\r\n<li>\r\n<ul id=check>\r\n<li>	Create a second <b>function</b> called <b>cleanup</b> that:\r\n</ul>\r\n<ol>\r\n<li>	removes the t<i>X</i>.txt files and \r\n<li>	removes the a0<i>X</i> directory and its content created by the extract function above.\r\n<li id=none> ### note that a Bash function can take two formats:\r\n<pre>\r\nfunction function_name {\r\n[commands... ]\r\n}\r\n</pre> \r\nor \r\n<pre>\r\nfunction_name {\r\n[commands... ]\r\n}\r\n</pre>\r\n<li id=none> ### also note that a function can return or not return a value to the caller.\r\n<li id=none> <c>rm</c> (remove files and directories) should work better than <c>rmdir</c> here because rmdir only removes empty directories.  When <c>rm</c> directories, the options <c>-r</c> (recursive) and <c>-f</c> (force remove, no prompt, like a silent mode) are good to consider. \r\n</ol>\r\n\r\n<li>	\r\n<ul id=check>\r\n<li>Create an <b>environment variable</b> named <b>Q2</b> that is equal to the full pathname for your class/h03/q02 directory. </ul>\r\n<li id=none> ### note that we use <c>export</c> command to set the attributes for shell environment variables in the format of <c>export varName=\'value\'</c>.  Simply put, to define a global ENV so that we can use it in the subsequent shell sessions, we export the variable.  \r\n<li>	\r\n<ul id=check><li>\r\nCreate an <b>environment variable</b> named <b>WEB</b> that is equal to the pathname for your public_html directory. </ul>\r\n</ol>\r\n<ul>\r\n<li> There are two ways to fun the functions in our case here:\r\n<ul>\r\n<li> <c>source q02.sh</c>: You don\'t even need to <c>chmod +x</c> your script.  <c>source</c> will run all the script to define the aliases, functions, and environment variables as described and, in the meantime, make these commands and variables available in this and following shell sessions. \r\n<li> Alternatively, you can <c>chmod</c> the script and run it like a regular script.  You can make function calls in script and it will work.  The environment variables and aliases, however, will not be available to you because when a script runs, it works as a shell session and all variables local in the session will not be passed to other sessions when the script finishes running.  This behavior is not preferred in our case here. \r\n</ul>\r\n<li id=check> Use the file check02.sh to check your work.\r\n</ul>       \r\n\r\n<hr>\r\nIf you ask (apparently you are not) whether to use single quotes or double quotes in an alias assignment, the short answer is: single quotes, unless you need parameter/variable expansion in the assignment.                                     ', '', '', '', '', 0),
(173, 'homework', 3, 4, 'Use q04/a04.txt to enter PROJECT after those terms which correspond to formal stages of a\r\nproject, LIFECYCLE to identify those terms which correspond to formal stages of the ITIL\r\nservice lifecycle, NEITHER for those terms which are formal stages of neither and BOTH for\r\nthose terms which are formal stages of both.\r\n<table  id = \"tbl_regular\" style = \"margin: 0px auto; width: \"50%\"\">\r\n    <thead style=\"display:block\">\r\n  <td>Terms</td>\r\n    </thead>\r\n    <tr>\r\n        <td> A. Closing</td>\r\n    </tr>\r\n    <tr>\r\n        <td> B. Executing</td>\r\n    </tr>\r\n    <tr>\r\n        <td> C. Service Operation</td>\r\n    </tr>\r\n    <tr>\r\n        <td> D. Transition</td>\r\n    </tr>\r\n    <tr>\r\n        <td> E. Service Strategy</td>\r\n    </tr>\r\n    <tr>\r\n        <td> F. Purchasing</td>\r\n    </tr>\r\n    <tr>\r\n        <td> G. Monitoring and Controlling</td>\r\n    </tr>\r\n</table>        ', '', '', '', '', 0),
(174, 'homework', 3, 3, ' For the following statements determine which of the statements are true (T) and which are false (F):\r\n\r\n<ol>\r\n<li>	Best practices are created by lawyers to protect IT companies in lawsuits.\r\n<li>	A best practice is a method or technique that has consistently been shown to achieve superior results to those results achieved by other means.\r\n<li>	The main goal of requirements gathering for an information system is to determine which computers, disks, and network switches to purchase.\r\n<li>	According to ITIL, IT exists to provide a service.\r\n<li>	The IT Service Lifecycle includes five stages: service strategy, service design, service transition, service operation, and continual service improvement, that occur while providing IT services.\r\n<li>	According to ITIL, the Service Level Package describes the requirements that the system must or will deliver.\r\n</ol>\r\n<ul>\r\n<li> Enter T or F for the corresponding letters in the file q03/a03.txt.\r\n   </ul>  ', '', '', '', '', 0),
(175, 'homework', 3, 5, 'Identify the following statements as either true (â€œTâ€) or false (â€œFâ€).  \r\n<ol>\r\n<li>	Best practices in project management deal primarily with establishing the role of the project manager as the person who runs the project and outlining their overall responsibilities and authority.\r\n<li>	Project management is designed to ensure that the company makes as much profit as possible from the project.\r\n<li>	Project management focuses on achieving the time, cost and quality goals of a project.\r\n<li>	A project is successful whenever it costs less than was initially expected for the project.\r\n<li>	In the US it is illegal to manage large projects if you are not a Project Management Institute Certified Project Management Professional.\r\n<li>	Project management and ITIL best practices are designed with different goals.  Project management focuses on implementing one-time tasks while ITIL focuses on ongoing operations.\r\n\r\n</ol>\r\n<ul>\r\n<li>Enter your responses in the file q05/a05.txt.\r\n</ul> ', '', '', '', '', 0),
(178, 'homework', 4, 2, ' <ul><ul id=check>\r\n<li> Identify the following statements as either true (â€œTâ€) or false (â€œFâ€). \r\n<li> Enter your responses in the file q02/a02.txt. </ul></ul>\r\n\r\n<ul>\r\n<li> A painless introduction to if statements and the three types of test operators (file test, string comparison, and integer comparison) is <a href=\"https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php\">here</a> but you would probably need resources like <a href=\"https://www.tldp.org/LDP/abs/html/fto.html\">File Test Operators</a> and <a href=\"https://www.tldp.org/LDP/abs/html/comparison-ops.html\">Integer and String Comparison</a> to feel comfortable when completing this question.  Another good source for this question is <a href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\">Bash Conditional Expressions</a>. \r\n<li> A good strategy for this question would be:\r\n<ol> \r\n<li> Create a file and call it, say, test.txt. \r\n<li> Create a test code like this: \r\n<pre> \r\n#!/bin/bash\r\nfilename=\"test.txt\"\r\nname=\"Chen\"\r\ndigits=850\r\nnumber=850\r\n...\r\n\r\nif [ CONDITIONAL_STATEMENT ] ; then\r\n    echo \"True\"\r\nelse\r\n    echo \"False\"\r\nfi\r\n</pre> \r\n</ol>\r\n\r\n\r\n<p> Note that you have to reverse the logic when using <c>!</c>(<b>negation</b>).  \r\n<ol class=upper_case>\r\n<li>	<code>if [ -e  \"$filename\" ]</code>		is checking to see if a file exists.\r\n<li>	<code>if [ ! -e  \"$filename\" ]</code>	is checking to see if a file exists.\r\n<li>	<code>if [ -z  \"$name ]</code> 		is checking to see if the length of the string stored in the variable $name is zero.\r\n<li>	<code>if [  $digits  ==  \"$number\"  ]</code>	is checking to see if the numerical value of $digits is equal to the numerical value of $number.\r\n<li>	<code>if [  \"$digits\"  -ne  \"$number\"  ]</code>	is checking to see if the numerical value of $digits is not equal to the numerical value of $number.\r\n</ol>\r\n\r\n               ', '', '', '', 'Operators in Conditional Expressions', 0),
(179, 'homework', 4, 3, ' <ul id=check><ul>\r\n<li> Create a script called q03.sh:</ul> </ul>\r\n<p> This script would: \r\n<ul>\r\n<li> accept a filename as a <b>positional parameter</b> (<b>command line parameter</b>), \r\n<li> check the existence of the file, \r\n<li> repetitively requests the user to input words (from STDIN, the keyboard) to search from the file, and\r\n<li> exit  it when encountering the input string \"<b>NOWDONE</b>\" (without the quotes). \r\n<p> The program should return the number of occurrences of the given word (as input by the user) within a specific file (given by the command line parameter).  Make sure that the script can be run in the format as follows:\r\n <c>./q03.sh all.txt</c> \r\nto search the file all.txt for each of the words as specified by user input later and then produces the number of occurrences of the words given by the user (one number per line).\r\n</ul>\r\n\r\n<ul>\r\n<li>Hints:   \r\n    <ul> \r\n    <li> The command <code> grep â€“iw <i>[STRING_PATTERN]</i> <i>[FILE_NAME]</i></code> will search and find all of the occurrences of the string pattern from wihtin the given file and print the result on STDOUT.  The soption <code>-w</code> would modify grep\'s search behavior to look for whole <b>word</b> instead of substrings; and option <code>-i</code> makes grep search case insensitive).\r\n    <li> To count the number of lines greped, we can either use the <c>-c</c> option after grep or pipe (<c>|</c>the greped data to <b>word count -line</b> (<c>wc -l</c>).\r\n    <li> One way to develop this script would be: An <c>if</c> statement to test if the user has provided the text file (story.txt in our case) using the <c>-e</c> operator, followed by a <c>while</c> loop (if the file existence passes) since we do not know how many times this loop should run (that is, unlike a <c>for</c> loop).  \r\n</ul>\r\n\r\n<li>Enter your answers in q03/a03.txt.\r\n \r\n </ul>        \r\n\r\nWhen you have completed the script, perform and answer the following questions: \r\n<ul><ul id=check>\r\n<li>	Enter the word â€œDONEâ€ in part A when you have finished your script.\r\n<li>	How many times does the word â€œhappyâ€ appear in the file story.txt?\r\n<li>	How many times does the word â€œunhappyâ€ appear in the file story.txt?\r\n<li>	Can you accurately predict, based on the number of times the word \"murder\" appears in the file story.txt and the number of times the word \"love\" appears in story.txt, whether story.txt contains a murder mystery or a love story? (Enter â€œYesâ€ or â€œNoâ€ for your answer)\r\n</ul> </ul> ', '', '', '', 'While loop and Conditional Expressions', 0),
(180, 'homework', 4, 4, '     <p>In the q04 directory, you will find a sample script, search.sh.  The script accepts \r\n  <ul> \r\n<li> one positional parameter (command line parameter) for a word to search for, and then \r\n<li> prompts the user for the name of a file to search from.  \r\n</ul>\r\nThe script then searches the file for the string given on the command line and output the lines containing the requested word.  Unfortunately, the script does not handle poor input well. </p>\r\n\r\n<p>To complete this question, copy the file search.sh to q04.sh.  You will need to edit the file q04.sh to complete this question.  \r\n<ul id=check>\r\n<li>Modify the permissions on q04.sh using <code> chmod +w q04.sh </code> in order to edit q04.sh </ul></p>\r\n\r\n<p>There are two problems with the q04.sh script that show up when run.  It does not handle the following two things: </p>\r\n<ol class=\"question_items\">\r\n<li>  no parameter is given on the command line \r\n<li>  the specified file does not exist\r\n</ol>\r\n\r\n<p>Your task is to modify the script so that:</p>\r\n<ol >\r\n<li>	If either problem 1 or 2 occurs (<c>||</c>), the script runs with the word â€œ<b>NOTHING</b>â€ and the file <b>test.txt</b>, and tells (<c>echo</c>) the user what it is doing at the end;\r\n<li>	If neither problem 1 or 2 occurs, the script uses the word provided by the user and searches the specified file for the word provided and tells (<c>echo</c>)the user what it is doing.\r\n</ol>\r\n<ul>\r\n<li>A file <b>test.txt</b> has been provided in your q04 directory, so we know that the file exists.  \r\n<li>You can use the script check04.sh to determine if your script is working as required.\r\n<li>Enter the answer DONE in the file a04.txt when you have completed the script.\r\n</ul>               ', '', '', '', 'Conditional Expressions & grep', 0),
(181, 'homework', 4, 5, '<p>There is a script in your q05 directory called insert.sh.  The script reads a file containing several lines, each line contains a number of data values.   The data values are then displayed as simple sql statements. </p>\r\n<p>Your task is to </p>\r\n<ol class=\"question_items\">\r\n    <li>copy insert.sh into q05.sh and then </li>\r\n    <li>modify q05.sh so that it takes two filenames as command line parameters (NOTE: You will need to modify the permissions on q05.sh using the <c>chmod</c> command with <c>+w</c> otpion to obtain write permission on q05.sh).  </li>\r\n    <li>The first filename (i.e., the first command line parameter) specifies the data file to read, the second filename (i.e., the second command line parameter) specifies the sql file to write.  \r\n        <ol class=\"lower_case\">\r\n        <li> The first filename must have the extension .dat, while the second filename must have the extension .sql.  </li>\r\n        <li> Exit the script without creating an output file if \r\n                 <ol class=\"question_items\" >	\r\n                 <li> either of the above two extensions are incorrect or </li>\r\n                 <li>	if the input file does not exist. </li>\r\n                 </ol>\r\n         </li>\r\n         </ol>\r\n    <li>	test: Two .dat files (quizzes.dat and update.dat) are provided for testing your script.  </li>\r\n</ol>\r\n<ul>\r\n<li>You can use the script check05.sh to determine if your script is working as required.\r\n<li>Enter the answer DONE in the file a05.txt when you have completed the script.\r\n</ul>           ', '', '', '', 'file test & string comparison', 0),
(1000, 'homework', 4, 1, '   <ul><ul id=check>\r\n<li> From the table below, match the Linux commands on the left with their actions on the right.  \r\n<li> Tile two shell terminals, experiment with the commands in the table in one and enter the answers to a01.txt in another.  You can create your own my.txt file containing the example strings.  Note that you can drag the SSH client windows to the corners and edges of the screen to tile them. \r\n</ul></ul>\r\n<ul>\r\n <li> Use this link for more information about the grep flags:  <a href=\"https://www.computerhope.com/unix/ugrep.htm\">Linux grep command</a> or search for more examples.  \r\n<li> For most commands, we donâ€™t actually have to memorize most of the options (flags, switches), but knowing which commands to use for certain tasks (such as searching in this question) and being able to use a couple of basic options is considered a proficiency.  Because... you won\'t be able to use a command you don\'t know much about. \r\n<li> The more knowledge you have about the subject, the better you will be able to issue accurate keywords and, most importantly, judge the quality of the information, and identify the pieces you need from the vast sources.  \r\n<li> Enter your answers in q01/a01.txt.  \r\n</ul>\r\n\r\n<table id=\"tbl_regular\">\r\n<thead>\r\n<tr><td style=\"width:52%\">Unix Commands</td>	<td>Possible Actions </td></tr>\r\n</thead>\r\n<tbody>\r\n<tr><td>  A.  <code> grep -w auto my.txt | wc -l   </code>  </td><td>   1.  Displays the lines in the file â€œmy.txtâ€ that contain the string â€œautoâ€  </td></tr>\r\n<tr><td>  B.  <code> grep   auto   my.txt </code> 	   </td><td>  2.  Displays the lines in the file â€œmy.txtâ€ that contain the word â€œautoâ€   </td></tr>\r\n<tr><td>   C.  <code>  grep  -w   auto   my.txt  | grep  -i  story </code>   </td><td>  3.  Counts the number of lines in the file â€œmy.txtâ€ that contain the word â€œautoâ€  </code>   </td></tr>\r\n<tr><td>   D.  <code>  grep -v   auto   my.txt | grep  -i   story  </code>  </td><td>  4.  Displays the lines in the file â€œmy.txtâ€ that contain the word â€œautoâ€ and contain the string â€œstoryâ€   </td></tr>\r\n<tr><td>  E.  <code>  grep  -v   auto   my.txt |  grep -iv story  </code>    </td><td>  5.  Displays the lines in the file â€œmy.txtâ€ that do not contain the string â€œautoâ€ but do contain the string â€œstoryâ€   </td></tr>\r\n<tr><td>   F.  <code>  grep  -w   auto   my.txt </code>  </td><td>   6.  Displays the lines in the file â€œmy.txtâ€ that contain neither the string â€œautoâ€ nor the string â€œstoryâ€  </td></tr>\r\n</tbody>\r\n</table>     \r\n\r\n         ', '', '', '', 'grep Options', 0),
(1002, 'lab', 2, 0, '<p>This lab activity continues with Linux and introduces you to Linux scripts including:\r\n<ul> \r\n<li>	Basic Linux commands\r\n<li>  Linux OS file permissions \r\n<li>  Running user-developed scripts \r\n<li>	Configure your own Linux shell environment\r\n<li>	Writing your first Linux shell script</ul>\r\n \r\n<p>Unix was developed to be a very portable and flexible operating system that enabled users to <b>customize</b> operating systems for any computer and then customize it for the tasks at hand.  As a result, many people did just that.  One of the outcomes of that effort is that many people developed different operating system features that customize a userâ€™s environment known as <b>shells</b>.  We will examine one of those shells, the <b>bash shell</b> (borne again shell), which is a rework of the original borne shell by Stephen Bourne at Bell Labs in 1977.  \r\n\r\n<p> This lab covers the basics of the bash shell, the Linux environment, and shell scripting.  \r\n\r\n<p> This lab can be done cooperatively, but you and your partners will need to complete all of the steps on your own <b>non-administrator</b> accounts.  A good way to do this is to work through the steps one at a time and helping your partner(s) make sure they have been completed properly.  \r\n    ', '', '', '', 'Introduction', 0);
INSERT INTO `content` (`qid`, `unit_type`, `unit_number`, `question_number`, `question_text`, `unit_title`, `unit_name`, `question_type`, `question_title`, `invisible`) VALUES
(1004, 'lab', 1, 1, '<p> We will learn how to change passwords, create regular user accounts, and add users to groups in Linux command line interface (Linux <b>CLI</b> or <b>shell</b>). </p>\r\n<p> Using the non-administrator user account we created, we will create several directories, remotely copy a compressed file and decompress it for use.  In the Linux shell. In Unix, everything is a file; a directory is a file, too.</p>\r\n<p> In addition, we will learn how copy files from a remote host computer in the network to a designated location and then decompressed the archived file to acquire directories and files needed to complete this assignment.  The same process will be used in every other assignment. </P>\r\n\r\n\r\n<h4>1.1 Access VM and Change Password </h4>\r\n<p><b>As a group</b>, <b>operating one computer</b>, we want to log in your assigned virtual machine (VM) using the already-created \"administrator\" account and change its password so that others can not use it to mess with our VM.</p>\r\n<ol class=\"upper_case\">\r\n\r\n<li>	Log into your VM as \"administrator\":</li>\r\n<p> Following the instructions provided in class (Remote Labs --> SSH --> vmaXX) to log in as \"administrator\" with password \"pwcci#\" (without the quotation marks). You will be promoted to save this account as an SSH profile when logging in; do it now (or later). </p>\r\n\r\n<li>	Change the password:   </li> \r\n<p>An example of changing password for a regular user in Linux may look like the follows. (When you enter a command and receive a silent treatment, remember that, <strong>in Linux, no news is good news</strong>.) </p>\r\n<pre>\r\nadministrator@vma50:~$ passwd\r\nChanging password for administrator.\r\n(current) UNIX password: \r\nEnter new UNIX password: \r\nRetype new UNIX password: \r\nBad: new password is too simple\r\nEnter new UNIX password: \r\nRetype new UNIX password: \r\npasswd: password updated successfully\r\nadministrator@vma50:~$  </pre>\r\n<ul class=\"check\">\r\n        <li><p><b>As a group</b>, change the password for the \"administrator\" account by issuing the <c>passwd</c> command.  </ul>\r\n\r\n<p> # if you need to change the password of <b>another</b> user, you need to log in as a sudoer (admin) and do something like this: \r\n<pre>chen_adm@vma50:~$ sudo <code>passwd</code> chen_user\r\n[sudo] password for chen_adm: \r\nEnter new UNIX password: \r\nRetype new UNIX password: \r\npasswd: password updated successfully </pre>\r\n</p>\r\n<p># If you need to change a username (<u>not adivsed</u>), you may log in as a sudor (but not the user itself) to use the <c>usermod</c> command to change the username and home directory like <a href=\"https://askubuntu.com/questions/34074/how-do-i-change-my-username\">this</a>:\r\n<pre>\r\nchen_user@vma50:~$ su administrator     (# the su command means \"switch user\")\r\nPassword: \r\nadministrator@vma50:/home/chen_user$ usermod --login chen_admin chen_adm\r\nusermod: Permission denied.\r\nusermod: cannot lock /etc/passwd; try again later.\r\nadministrator@vma50:/home/chen_user$ sudo usermod --login chen_admin chen_adm\r\nadministrator@vma50:/home/chen_user$ sudo usermod -d /home/chen_admin -m chen_admin\r\nadministrator@vma50:/home/chen_user$ </pre> </p>\r\n\r\n<li> Check and record the new password: </li>\r\n<ul class=\"check\">\r\n        <li> <p><b>Still as a group</b>, log out of the \"administrator\" account (<code>exit</code> or <code>logout</code> will log you out) \r\n        <li> <p><b> Individually</b>, <b>operating different computers,</b> each group member logs back into the VM as \"<b>administrator</b>\" with the <b>new password</b>.  Now both team members are logged into the VM as \"administrator\" and this is usual because a server can serve multiple users. \r\n        <li><p> After you make sure it works, <b>record</b> this \"administrator\" account and password in your own Canvas Assignment <b>a00</b>. </p>\r\n<li>Log out of the \"administrator\" account.\r\n</ol>\r\n\r\n\r\n\r\n<h4> 1.2 Create Accounts </h4> \r\n<p><b> Individually</b>, each team member will use the \"administrator\" account to  create two accounts, one regular user and one administrator, for her/his own.  </p>\r\n<p> An superuser/administrator/admin/<b>sudoer</b> account is one with membership in the <b>sudo</b> (<b>s</b>uper <b>u</b>ser <b>do</b>) user group, which has administrative privileges such as creating user accounts. </p>  \r\n<p>The command <b>sudo</b> needs to precede the command the sudoer wants to execute, e.g., <c>sudo adduser <i>new_user_name</i></c>. In other words, to perform critical system operations (such as creating a user account), you will need to 1) log in as a sudoer to use the special administrator privileges, and 2) issue the commands with the command <c>sudo</c> in front of the desired Linux command to tell the system you would like to run the command with system administrator privileges (yes, this is a security measure).</p>\r\n<p> The first time you run <code>sudo</code>, you will be asked to provide the password for the sudoer account.  The sudo session will last for 15 minutes by default, in which period you don\'t have to type in \"sudo\" before commands again.</p>\r\n\r\n<ol class=\"upper_case\">\r\n\r\n<li> Create your regular user account: </li>\r\n<p> You will create one regular user account (non-sudoer) for yourself.  The command <c>adduser</c> has a syntax like <c>sudo adduser <i>username</i></c>) with many options as below:</p>\r\n<pre> <c>adduser</c> [--system] [--home DIR] [--shell SHELL] [--no-create-home] [--uid ID]\r\n        [--firstuid ID] [--lastuid ID] [--ingroup GROUP | --gid ID]\r\n        [--disabled-password] [--disabled-login] [--gecos GECOS]\r\n        [--add_extra_groups] [--encrypt-home] [--quiet] [--debug]\r\n        [--force-badname] [--help|-h] [--version] [--conf FILE] <code> user </code> </pre>\r\n\r\n<p> Here we don\'t any options since we are just creating a regular user account and not assigning it to any special groups, so we will simply issue the command as: <code> sudo adduser <i>username</i> </code>. You then will follow the prompts to give the account a password and identifiable information. They do <b>not</b> have to be your real name or FSU information. As an example, I am using the chen_admin sudoer account to create a regular user account called \"test_user\":</p>\r\n\r\n<pre>chen_adm@vma50:~$ sudo adduser test_user\r\n[sudo] password for chen_adm: \r\nAdding user `test_user\' ...\r\nAdding new group `test_user\' (1006) ...\r\nAdding new user `test_user\' (1006) with group `test_user\' ...\r\nCreating home directory `/home/test_user\' ...\r\nCopying files from `/etc/skel\' ...\r\nEnter new UNIX password: \r\nRetype new UNIX password: \r\npasswd: password updated successfully\r\nChanging the user information for test_user\r\nEnter the new value, or press ENTER for the default\r\n        Full Name []: John Thrasher\r\n        Room Number []: LSB 008\r\n        Work Phone []: 202-456-1111\r\n        Home Phone []: 850-644-1085\r\n        Other []: What?????\r\nIs the information correct? [Y/n] y\r\nchen_adm@vma50:~$ </pre>\r\n</li>\r\n\r\n<ul class = \"check\">\r\n<li> Following the example above, each member of the team should log in as \"administrator\" to create a <b>regular</b> user account for your daily use.  This user will not be a sudoer. \r\n<li> <b>Record</b> the account information in your a00.\r\n</ul>\r\n\r\n<li> Create your administrator account: </li>\r\n<p> Following a similar procedure, each of the team members will create an administrator account by first create a regular user account and then add the account into the system\'s <b>sudo</b> group for administrative privileges.  Adding the administrator account to the sudo group makes the user a <b>sudoer</b>. We use the command adduser with the syntax of <c>sudo adduser <i>username groupname</i></c>.  As a demonstration, the created regular user \"test_admin\" is added to the sudo group to make it an administrator/sudoer as follows: </p>\r\n\r\n<pre>administrator@vma50:~$ sudo adduser test_admin sudo\r\n[sudo] password for administrator: \r\nAdding user `test_admin\' to group `sudo\' ...\r\nAdding user test_admin to group sudo\r\nDone.\r\nadministrator@vma50:~$ </pre>\r\n\r\n<ul class = \"check\">\r\nFollowing the example, now let us create your admin (sudoer) account:\r\n<li> Create a regular user account ready for admin (it is suggested to have the string \"admin\" as part of the account name) \r\n<li> Add this account into the sudo group.\r\n<li> Record the account information in a00.\r\n</ul>\r\n\r\n<li> Check your work </li> \r\n<p>By the time you are done, for each of the team members, you should have the following accounts as a minimum: </p>\r\n<ul class=\"check\">\r\n        <li>The original \"administrator\" account with a unique password\r\n	<li>One regular user account\r\n	<li>One additional administrator (sudoer) account\r\n</ul>\r\n\r\n<p> This information and the title of your VM should be stored on the Canvas course website under the assignment a00. Each partner should record and update your own and shared accounts and passwords. That will give you a secure backup to keep track of all of your virtual machine account information.</p>\r\n</ol>\r\n\r\n\r\n\r\n<h4>1.3 Create Directories  </h4>\r\n<p> <b>Individually</b>, you will create two sets of directories. </p>\r\n<p>When you log into a Linux system, you are in the <b>user home</b> directory (<c>~</c>), which is where we want to create our directories. </p>\r\n\r\n<p> We will use the <c>mkdir</c> (make directory) command to create directories/folders. The syntax is: \r\n<p> <c>mkdir <i>directory_name</i></c> (# this will create a single directory)  </p>\r\nor \r\n<p> <c>mkdir <i>directory1</i> <i>directory2</i> <i>directory3</i> </c> \r\n(# this will create 3 directories. Note the space between the directory names.)  </p>\r\n\r\n<ol class=\"upper_case\"> \r\n<p>As an example, let\'s create three directories: \r\n<pre>\r\nchen_user@vma50:~/bashnet$ ls\r\nchen_user@vma50:~/bashnet$ mkdir dir1 dir2 dir3\r\nchen_user@vma50:~/bashnet$ ls\r\ndir1  dir2  dir3\r\nchen_user@vma50:~/bashnet$ </pre>\r\n\r\n<p>Please follow the steps below to complet this task: \r\n<ul class=\"check\">\r\n<li> <p> Log in to your VM with your <b>non-admin</b> user account.\r\n<li> <p> In your user home directory (issue <c>cd ~</c> if you are somewhere else), create three directories: <b>class</b>, <b>tests</b>, and <b>public_html</b>. \r\n<li ><p> Move into the <b>~/class</b> directory (<c>cd ~/class</c>), create the following directories: <b>a01</b>, <b>a02</b>, <b>a03</b>, <b>a04</b>, <b>a05</b>, <b>a06</b>, and <b>a07</b>. </li> </ul> </ol>\r\n\r\n\r\n\r\n<h4> Remotely Copy and Decompress File  </h4>\r\n<p> We will remotely copy the tar.gz assignment file and decompress the directories and files inside. </p><ol class=\"upper_case\">\r\n\r\n<li> Remotely copy the assignment archive file </li>\r\n<p> We will the <c>scp</c> (secure copy) command for this task to copy files among hosts in a network (whereas <c>cp</c> copy is used to copy files locally.  The scp syntax is <b>command - option - source - destination</b>: <pre>scp [OPTIONS] <i>user</i>@<i>SOURCE_HOST</i>:<i>path</i>/<i>filename</i> <i>user</i>@<i>DESTINATION_HOST</i>:<i>path</i>/<i>filename</i> </pre>\r\n\r\n<p>Here in this assignment, we use the <c>.</c> to indicate that the destination is the current path and we don\'t want to change the filename.  The password for the datacenter account at vma01 is: InCharge56! </p>\r\n\r\n<p> With the directories created, navigate (<c>cd</c>, change directory) into your <b>~/class</b> directory, then copy the file a01.tar.gz from the computer vma01 into your class directory.  The process is as follows (and as in the Instroduction part above): </p>\r\n<ul class=\"check\">\r\n<li> <c>cd ~/class</c>\r\n<li ><c>scp datacenter@vma01:/home/datacenter/class/labs/a01.tar.gz . </c></ul> \r\n\r\n<li> Extract compressed files:</li>\r\n<p> We use the command <c>tar</c> to archive (package), compress, and decompress files depends on the options/flags we use.  The general syntax is <c>tar [OPTION] <i>TAR_FILE</i></c>.  To extract/decompress an archive and/or compressed/zipped file, we use the -x option (extraction) and the -f option (file). </p>\r\n \r\n<p>Now, let us extract the files from within a01.tar.gz assignment file into your class directory following the steps:  \r\n<ul  class = \"check\">\r\n        <li> Make sure you are in the ~/class directory\r\n        <li> Issue the command: <c>tar -xf a01.tar.gz </c> </li>  \r\n        <li> To verify the extraction, issue the <c>ls</c> command in your a01 directory to make sure you can find the a01config, q01, q02, and q03 files (some of them are directories but in Unix everything is a file). </ul>\r\n</ol>\r\n\r\n\r\n<h4> Check your work:</h4>\r\nYou will use the bash script <c>check01.sh</c> in a01/q01 to check your work of this part.  Please perform the following steps: \r\n<ol>\r\n<ul class = \"check\">\r\n<li> Change to your class/a01/q01 directory. \r\n<li> Open the file a01.txt using the nano editor: <c>nano a01.txt</c>\r\n<li> Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li> Enter the word â€œDONEâ€ on the line starting with â€œA.â€ (leave a space after the dot)\r\n<li> Save the file (using <c>Ctrl-X</c> in nano to exit, answer Yes to save, and enter to close the edior; note the nano bottom menu offers useful key-combbinations)\r\n<li> Run the script check01.sh (issue <c>./check01.sh</c>) to check your answer.  (# You should see all 5 OKâ€™s.) (# the <c>./</c> part (specifically, the <c>.</c> part) of the <c>./check01.sh</c> instruction tells Unix-like systems to execute the script (check01.sh) in the current environment/shell) </ul> </ol>\r\n\r\n<hr>\r\n\r\n<ul><li>  <a href=\"https://superuser.com/questions/547966/whats-the-difference-between-adduser-and-useradd\">###</a> Instead of <c>adduser</c>, you may use the command <c>useradd</c> for user and group operations. useradd is a native compiled binary executive file comes with Linux and adduser is a script using useradd to create user-friendly syntax. </p>                                                                   ', '', '', '', 'Managing User Accounts & Directories', 0),
(1005, 'lab', 1, 2, '           <p> <b>As a group</b>, we will learn how to configure the Apache HTTP server to serve web contents within individual user accounts (this was important in the old time but now just meant for you to get a better sense about what \"information systems\" can look like).  \r\n\r\n<p>Then, <b>individually</b>, we will learn how to copy, compress and decompress, and move files.  In the end, you will see how the data in the car dealership database (which we will use intensively later) looks like.  As you probably have found out, this assignment is quite integrative. \r\n\r\n<h4>2.1 Configure Apache HTTP server </h4>\r\n<ul id=\"none\"><li><p>Note: <b>Only one</b> of the members of your group should do this configuration as a <b>system administrator</b> (sudoer). The changes you make will affect all accounts on your groupâ€™s VM.</li></ul>\r\n<p>To give you a better sense of what an \"information system\" is like, you will \r\n<ul>\r\n<li>configure your Apache web (HTTP) server to support <a href=\"https://httpd.apache.org/docs/2.4/howto/public_html.html\"><b>per-user web directory</b></a>, and then\r\n<li>restart the Apache service. \r\n</ul>\r\n</p>\r\n\r\n<ol class=\"upper_case\">\r\n<li> Change Apache configuration </li>\r\n<p> We want to configure Apache HTTP server to enable a WWW root content folder for every user account.  To achieve that we need to create two soft links in the mods-enabled/ directory pointing to two modules in mods-available/.  In other words, to enable two Apache moduels.  </p>\r\n<ul >\r\n<li class=\"check\"> The commands are as follows (<c>ln</c>, create link; <c>-s</c> soft link; the syntax of <c>ln</c> is <c>ln</c> [options] <i>file linkname</i> ): </li>\r\n<pre>\r\ncd /etc/apache2/mods-enabled \r\nsudo ln -s ../mods-available/userdir.conf userdir.conf \r\nsudo ln -s ../mods-available/userdir.load userdir.load </pre> \r\n<p>(# the <c>a2enmod</c> (apache2 enable modules) command simplifies this process; see <a href=\"https://unix.stackexchange.com/questions/30673/how-do-i-create-web-pages-in-my-home-directory-and-have-the-web-server-serve-the\">here</a>) </p>\r\n<li> Most problems in this part can be taken care of by getting into the mods-enabled directory and deleting the two soft-links because they are probably not linked to the files in mods-available/ correctly.  \r\n</ul>\r\n\r\n<li>  Restart Apache service</li>\r\n<p> We need to restart the Apache server so that it will read in the configuration we just modified and behave accordingly. \r\n<ul class=\"check\"><li> Issue the following commands to restart the Apache web server service </li>\r\n<c>sudo service apache2 restart </c> \r\n<p> (# if you see an error message saying \"Restarting Apache may give you a warning \"apache2: Could not reliably determine the server\'s fully qualified domain name, using 127.0.1.1 for ServerName\" because you don\'t have a fully qualified domain name.  That problem will not have an impact in this course.) </p>\r\n</ul>\r\n</ol>     \r\n\r\n\r\n<h4>2.2 Verifying Web Server Status </h4>\r\n<ol class=\"upper_case\">\r\n\r\n<li> Check the web server </li>\r\n<p>Use the Firefox application provided via the CCI Remote Labs to determine if your web server is running.  You can do this by looking at the file http://vma<i>XX</i>.cci.local (where vma<i>XX</i> is the name of your VM).  </p>\r\n<ul class=\"check\">\r\n        <li> You should see a standard â€œApache2 Ubuntu Default Pageâ€ page indicating that the web server is working.  </ul>\r\n\r\n<li> Check the per-user web directory: </li>\r\n<ul class=\"check\">\r\n        <li> As a <b>regular user, </b><c>cd</c> to the public_html directory you created under <c>~</c>/\r\n        <li> Create a file called index.html with some text in it; such as \"Keanu Reeves is my cousin.\" (<c>nano index.html</c> to edit and <c>^+X</c> and <c>Yes</c>to save file; <c>cat index.html</c> to check file content.)\r\n        <li> View the index.html file in your personal public_html directory using Firefox from Remote Labs by typing the URL like <c>http://vma<i>XX</i>.cci.local/~<i>username</i></c>) and make sure the text you entered above is visible. \r\n</ul>\r\n</ol>\r\n\r\n\r\n<h4>2.3 Expanding your website  </h4>\r\n<p>Next, we are going to expand the website to show a little information about our automobile dealerships, which is a dataset that we are going to use later. We will:</p>\r\n<ol class=\"upper_case\">\r\n<li> Copy and decompress HTML files   </li>\r\n<p> <c>cd</c> to ~/class/a01/, use <c>cp</c> (syntax: <c>cp <i>file</i> <i>path</i></c>) to copy the archive file web.tar from the a01 directory to your public_html directory; then <c>cd</c> to public_html, and extract the content of the archive:  </p>\r\n<pre>\r\ncp web.tar ~/public_html  \r\ncd ~/public_html\r\ntar -xvf web.tar \r\n(# -x is an option for extract; -v means verbose mode; -f means file)\r\n</pre>\r\n<ul class=\"check\"><li> Follow the process above to complete this task </ul>\r\n\r\n<li> View to check the content </li>\r\n<ul class=\"check\"><li> Use Firefox to view shs.html within your public_html directory (http://vmaxx.cci.local/~username/shs.html) </li></ul>\r\n\r\n<li> Delete file  </li>\r\n<p> Once you are convinced that your personal web directory is working, </p>\r\n<ul class=\"check\"><li> delete (remove) the web.tar file from your public_html directory: <c>rm web.tar</c> (rm: remove)</ul>\r\n\r\n<li> Create an archive and compress</li>\r\n<p> We want to use the <c>tar</c> to create an archive (.tar) of the web content files and then compress (\"zip\") the archive  to a smaller file in size using the <c>gzip</c> command.  The basic synatx for using <c>tar</c> (tape archive) command to create archives is <pre class=\"inline\">tar [option(s)] archive_name file_name(s)</pre> and we use option <c>-c</c> (create a new archive; as opposed to the <c>-x</c> option for extraction) and option <c>-f</c> (archive file) here.  The process is as follows: \r\n<pre>\r\n<c>tar -cvf web.tar * </c> (# <c>*</c> is a wildcard means all files here in the directory; \r\n<c>-v</c> means verbose, so we can see what files are included in the archive.) \r\n<c>gzip web.tar</c> (compresses the file) \r\n<c>cp web.tar.gz ~/class/a01/q02</c> (# copy the file to the working directory)  </div>\r\n(Many thanks to John Welch for working on this correction thoroughly.)\r\n</pre>\r\n\r\n\r\n<ul class=\"check\"><li> Follow the process above to complete this task </ul>\r\n</ol>   \r\n\r\n\r\n<h4> Check Your Work </h4>\r\n<ul><ul class=\"check\">\r\n<li> Change to your class/a01/q02 directory.  \r\n<li> Edit the file a02.txt using the command <c>nano a02.txt</c>\r\n<li> Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li> Enter the word â€œDONEâ€ on the line starting with â€œA.â€ (leave a space before DONE).\r\n<li> Save the file (using Ctrl-X)\r\n<li> Run the script check02.sh (<c>./check02.sh</c>) to check your answers and receive feedback. \r\n</ul> </ul>\r\n                                                             ', '', '', '', 'Managing Web Content ', 0),
(1006, 'lab', 1, 0, 'q0', '', '', '', '', 0),
(1007, 'lab', 1, 3, '<ul id=\"none\"><li>Manipulating files and text stream is an important feature of Unix-like systems.  To familiarize you with the Linux operation system (Ubuntu in our case), we will practice some basic output redirection tasks (part of the input/output <a href=\"https://www.guru99.com/linux-redirection.html#1\">redirections</a>). We will use some Linux commands to output text streams (which by default are sent to the terminal (or standard output, STDOUT), and then use the redirection operators to create (overwrite), append, and merge the text streams into text files).   \r\n</ul>  \r\n\r\n<ol class=\"upper_case\">\r\n<li> Ouput redirection: Overwrite </li>\r\n<p>The <b>stream redirection operator</b> <c>></c> redirects your command output stream to a destination you specify, usually a text file.  The syntax is <c><i>command</i> [option] <c>></c> <i>destination</i> </pre>.</p>\r\n<p> Navigate to the <b>tests</b> directory in your home directory (<c>cd ~/tests/</c>), which you created earlier and </p>\r\n<ul><li class=\"check\">Use the redirection operator > to create two files as follows: \r\n<pre>\r\nchen_user@vma50:~$ cd tests/\r\nchen_user@vma50:~/tests$ ps -aef > jobs.txt  ( # ps: process status)\r\nchen_user@vma50:~/tests$ pwd > files.txt  (# pwd: present working directory)\r\nchen_user@vma50:~/tests$ ls  \r\nfiles.txt  jobs.txt\r\nchen_user@vma50:~/tests$ </pre>\r\n</ul>\r\n\r\n<li> Output redirection: Append </li>\r\n<p> The stream redirection operator <c>>></c> will append the text stream output to the end of the destination file. The syntax is  <c><i>command</i> [option] >> <i>destination</i></c></p> \r\n<p> Before appending text, let\'s take a look at the content of the original file first: \r\n<pre>\r\nchen_user3@vma50:~/tests$ ls\r\nfiles.txt  jobs.txt\r\nchen_user3@vma50:~/tests$ cat files.txt \r\n/home/chen_user3/tests\r\nchen_user3@vma50:~/tests$ \r\n</pre>\r\n<ul><li class=\"check\"> Now let us try append some command output text to the file.txt we created: </li>\r\n<li id=\"none\"> <c>ls â€“la . >> files.txt</c> <br> </li>\r\n<li id=\"none\"> (# <c>.</c>: present path, can be obmitted here; ls: lâ€Œist storage; -l option: long format; -a: all files) </li>\r\n<li class=\"check\">  Now take a look at the updated files.txt by using the <c>cat</c> command:\r\n<pre>\r\nchen_user3@vma50:~/tests$ cat files.txt \r\n/home/chen_user3/tests\r\ntotal 20\r\ndrwxrwxr-x 2 chen_user3 chen_user3 4096 Jan 12 02:40 .\r\ndrwxr-xr-x 8 chen_user3 chen_user3 4096 Jan 12 02:39 ..\r\n-rw-rw-r-- 1 chen_user3 chen_user3   23 Jan 12 02:40 files.txt\r\n-rw-rw-r-- 1 chen_user3 chen_user3 8190 Jan 12 02:39 jobs.txt\r\nchen_user3@vma50:~/tests$ \r\n</pre>\r\n</ul>\r\n\r\n<li> Merge text files   </li>\r\n<p>We will use the <c>cat</c> (concatenate) command to create text streams to merge files.  <c>cat</c>, by default, concatenates file texts to the terminal (STDOUT).  Instead of outputting to the terminal, we can use stream redirector <c>></c> to redirect the streams into the same destination, i.e., to merge the files.  An example of merge a.txt and b.txt is like: \r\n<pre>\r\nchen_user@vma50:~/tests$ cat a.txt \r\naaaaa\r\nchen_user@vma50:~/tests$ cat b.txt \r\nbbbbb\r\nchen_user@vma50:~/tests$ cat a.txt b.txt > ab.txt\r\nchen_user@vma50:~/tests$ cat ab.txt \r\naaaaa\r\nbbbbb\r\nchen_user@vma50:~/tests$ \r\n</pre>\r\n\r\n<ul class=\"check\">\r\n<li><p> Observe the example above, we understand that the syntax of using <c>cat</c> for merging file is to append the content of the second file to the end of the content of the first file.  Now try merge <b>jobs.txt</b> to the end of <b>files.txt</b> into a new file called <b>all.txt</b> using cat and redirection operator <c>></c>.  Don\'t worry about making mistakes.  They are easy to fix when happen.\r\n<li> Copy the *.txt files (files.txt, jobs.txt, and all.txt) you created to your ~/class/a01/q03/ directory.  </ul>\r\n</ol>\r\n\r\n\r\n\r\n<h4> Check your work  </h4>\r\n<p> Finally, copy all three of those files (jobs.txt, files.txt and all.txt) from your tests directory to your ~/class/a01/q03 directory.  To check this part of the assignment: </p>\r\n<ol><ul class = \"check\">\r\n<li> Change to your class/a01/q03 directory.  \r\n<li> Edit the file a03.txt using the command nano a03.txt\r\n<li> Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li> Enter the word â€œDONEâ€ on the line starting with â€œA.â€.\r\n<li> Save the file (using Ctrl-X)\r\n<li> Run the script check03.sh (./check03.sh) to check your answer </ul>\r\n</ol>\r\n\r\n<hr>\r\n<ul>\r\n<li><p> Other redirection such as <b>input redirection</b> operator <c><</c> can be used in the <b>while loop</b> to input a file for iterative processing.\r\n<li> A great introduction to Linux I/O redirection can be found at <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection\">DigitalOcean<a>, which is very simple and readable. </a> \r\n<li><p> The <b>pipe operator</b> <c>|</c>, as one of the <b>control operators</b>, will come handy later when we use the <c>grep</c> command to search through text file/stream and pass the text stream over to chain next commands.\r\n<li> A short lâ€ist of control and redirection operators can be found at <a href=\"https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators\">stackexchange</a>. </ul>                                   ', '', '', '', 'Redirecting Text Stream', 0),
(1010, 'lab', 2, 1, '<p> We will learn about <b>Linux file permissions</b> and how to change the permissions by modifying the file mode string of a file. \r\n\r\n<h4> 1.1 Know Unix File Permissions </h4>\r\nWe always issue command <c>ls</c> to learn about the files (files, directories, and links) inside a directory.  When we need more information about the files, we can use options to modify the behavior of the <c>ls</c> command.  We often use ls with the long format option <c>ls -l</c> or simply <c><a href=\"https://unix.stackexchange.com/questions/137703/difference-between-ls-l-and-ll\">ll</a></c> (== ls -alF) for this purpose.  Let us try this out: \r\n<pre>\r\nchen_user@vma50:~/class/a02/q01$ ll\r\ntotal 56     (### directory size in kilobytes)\r\ndrwxrwxr-x 2 chen_user  chen_user 4096 Jan 13 22:28 ./\r\ndrwxrwxr-x 6 chen_user  chen_user 4096 Sep 23 18:19 ../\r\n-r--r--r-- 1 chen_user  chen_user  304 Aug 21  2017 a01.bak\r\n-rw-rw-r-- 1 chen_user  chen_user  312 Sep  9 15:21 a01.txt\r\n-rwxrwxr-x 1 chen_user  chen_user 2536 Aug 21  2017 check01.sh*\r\n-rwxrwxr-x 1 chen_user  chen_user  121 Aug 21  2017 clean01.sh*\r\n-rw-rw-r-- 1 chen_user  chen_user 1120 Aug 21  2017 decode.sh\r\n-rw-r--r-- 1 chen_user  chen_user 2420 Aug 21  2017 fsu.txt\r\n-rw-r--r-- 1 chen_user  chen_user   66 Aug 21  2017 hello.txt\r\n-rw-r--r-- 1 chen_user  chen_user  283 Aug 21  2017 quick.txt\r\n-rw-rw-r-- 1 chen_user  chen_user 1490 Aug 21  2017 solution.pl\r\n<span style=\"background-color: #782F40; color:#CEB888\">1222333444?5 6666666666 777777777 8888 999999 99999 00000000000 </span>\r\n<span style=\"background-color: #782F40; color:#CEB888\">fppppppppp?l uuuuuuuuuu ggggggggg ssss dddddd tyyyy nnnnnnnnnnn </span>\r\n</pre> \r\n<p> Seeing the results above, you could probably decipher most of the 11 fields but the first couple of them are of most importance and deserves out attention because they are related to the file permissions. \r\n\r\n<p> ### A <a href=\"https://www.garron.me/en/go2linux/ls-file-permissions.html\">simple</a> explanation of the fields is as <a href=\"https://stackoverflow.com/questions/6331075/why-do-you-need-dot-slash-before-executable-or-script-name-to-run-it-in-bas\">follows</a>:\r\n<pre>\r\n-rwxrw-r--    10    root   root 2048    Jan 13 07:11 afile.exe\r\n?UUUGGGOOOS   00  UUUUUU GGGGGG ####    ^-- date stamp and file name are obvious ;-)\r\n^ ^  ^  ^ ^    ^      ^      ^    ^\r\n| |  |  | |    |      |      |    \\--- file size\r\n| |  |  | |    |      |      \\-------- group name (e.g., Users, Administrators, etc)\r\n| |  |  | |    |      \\--------------- owner account\r\n| |  |  | |    \\---------------------- link count (what constitutes a \"link\" here varies)\r\n| |  |  | \\--------------------------- <a href=\"https://www.cloudinsidr.com/content/understanding-and-settingchanging-access-privileges-on-unixlinux-files-and-directories-mode-bits-and-alternative-access-methods-explained/\">alternative access</a> (blank means none defined)\r\n| \\--\\--\\----------------------------- Read, Write and Execute/Search access modes\r\n\\------------------------------------- file type flag (-, file; d, directory; l, link)\r\n</pre>\r\n\r\n<p> Let us start learning a little about Unix file permission/access modes by running the script called <c>solution.pl</c> in a02/q01.  Please do the following to observe the results: \r\n<ul><ul>\r\n<li class=\"check\">	Now, try running the Perl script solution.pl by typing â€œ<c>./solution.pl hello</c>â€ in the command line.\r\n<li id=\"none\"> You will get an error as: \r\n<pre>chen_user@vma45:~/class/a02/q01$ ./solution.pl hello\r\n-bash: ./solution.pl: Permission denied\r\nchen_user@vma45:~/class/a02/q01$</pre> </li>\r\n</ul> </ul>\r\n<p> Now that we are denied of executing the file, let us take a futhre look of the file.  To see the content of the file we can <c>cat</c>, <c>view</c>, <c>head</c>, <c>tail</c>, or even <c>nano</c> the file to peek into it to verify that it involves some actions more than a static text file.  The reason we are denied of running it, however, is because we don\'t have proper permissions as the error message says.  \r\n\r\n<p> Now let us take a closer look at the problem.  We will use <c>ls -l</c> because the <c>-l</c> long listing format option will modify the behavior of <c>ls</c> to include the permisison information we need: \r\n<pre>\r\nchen_user@vma50:~/class/a02/q01$ ls -l solution.pl \r\n-rw-rw-r-- 1 chen_user chen_user 1490 Aug 21  2017 solution.pl\r\nchen_user@vma50:~/class/a02/q01$  </pre>\r\n\r\n<p> We are interested in the field before the first space in the entry (it\'s called \"file mode string\" or \"mode bits\" as defined by <a href=\"https://en.wikipedia.org/wiki/POSIX\">POSIX</a>) in the list: <span class=\"inline\">?UUUGGGOOOS</span>.  \r\nThe first character in the file mode string denotes denotes the <a href=\"https://en.wikipedia.org/wiki/Unix_file_types\">file type</a>: <b>d</b> (directory), <b>l</b> (link), or <b>-</b> (file).  The UUUGGGOOOO (<u>U</u>ser, <u>G</u>roup, <u>O</u>ther) bits follows the file type defines the permission of the three types of users, each with Read, Write, and eXecute (or search for directories) permission.  In our example of <c>ls -l solution.pl</c>, the file mode string is read like this:  </p>\r\n\r\n<table id=\"tbl_regular\">\r\n<thead> <tr> <td> </td> <td> file owner </td>    <td> group owner </td>    <td> others </td> </tr></thead>\r\n<tbody> \r\n<tr>  <td>symbolic notaiton </td><td>  rw- </td>    <td> rw- </td>    <td> r-- </td>      </tr>\r\n<tr> <td> meaning </td> <td> read, write </td>  <td> read, write </td>  <td> read </td> </tr>  \r\n<tr> <td><a href=\"http://linuxcommand.org/lc3_lts0090.php\">numeric notation</a></td> <td> 6 (4+2+0) </td> <td> 6 (4+2+0) </d> <td> 4 (4+0+0) </d> </tr>\r\n</tbody>\r\n</table>\r\n<p> No wonder we are not able to execute the script.  We are permitted to read and write only.\r\n\r\n\r\n<h4> 1.2 Modify file permissions </h4>\r\n<ul><li> If you mess up the permissions, you can run the script <c>clean01.sh</c> by typing <c>./clean01.sh</c> to remove the execute permssion of solution.pl and decode.sh. </ul>\r\n<p> We don\'t like getting denied, so now we want to gain execute permission to the file.  We do so by changing the file mode string and the command is, as you have guessed: <c>chmod</c> (change mode).  The syntax of chmod command is: <span class=\"inline\">chmod [options] permissions file_name</span> and can be issued using both symbolic or numeric notations.  For example, in your company, you are working on a file and you want to set the permission as <a href=\"https://www.computerhope.com/unix/uchmod.htm\">such</a>: \r\n<ul>\r\n<li> the user can read, write, and execute it;\r\n<li> members of your group can read and execute it; and\r\n<li> others may only read it. </ul>\r\n\r\n<p> Using the symbolic notation, you would issue the command as:\r\n<p><c>chmod u=rwx,g=rx,o=r myfile</c> (no space after commas);  or, in numeric form:\r\n<p><c>chmod 754 myfile </c>\r\n<p> Now you know why people say numbers such 777, 660, 640 when they talk about access policy.  \r\n<p> Note that managing permissions is a serious issue and you want to be very careful by having a clearly stated access policy and always documenting each step as you modify them (especially, e.g., with something like the <c>-R</c> recursive option).  For example, you may issue <c>chmod go-rw foo.txt</c> and just strip the read and write permission for both the file owner group and all others (because we used the <c>-</c> option rather than <c>+</c>). \r\n \r\n<p> For a simpler scenario like this assignment, we could simply issue a command like <c>chmod +x <i>script.sh</i></c> to grant execute permission to all user groups.  \r\n\r\n<p> With what we have learned about file permissions, you may now perform the following actions to the script file <c>solution.pl</c>: \r\n<ul><ul class=\"check\">\r\n<li>	Use <c>ls â€“l</c> to view the permissions for the file.\r\n<li> Use <c>chmod</c> command to grant execute permission to all user groups. \r\n<li>	Use <c>ls â€“l</c> to view the permissions for the file again to make sure the <c>x</c> bits are present.\r\n<p> After you are confident that the file permission has been modified the way you want, \r\n<li>	try the command <c>./solution.pl  hello</c> \r\nIt should work and give you the result like this:\r\n<pre>\r\nchen_user@vma50:~/class/a02/q01$ ./solution.pl hello\r\n\r\nHELLO THERE\r\nchen_user@vma50:~/class/a02/q01$ </pre>\r\n    <li> Run <c>solution.pl</c> with <b>quick</b> as argument and observe the result.\r\n    <li> Run <c>solution.pl</c> with <b>fsu</b> as argument and observe the result.\r\n\r\n<p> Now, let\'s grant execute permission to the file <c>decode</c>: \r\n<li>	Use <c>chmod +x</c> to make decode.sh executable and\r\n<li>  Run the command ./decode.sh.  You will see the result as:\r\n<pre>\r\nchen_user@vma50:~/class/a02/q01$ ./decode.sh \r\nFile 1: encoded file: hello.txt\r\nFile 2: encoded file: quick.txt\r\nFile 3: encoded file: fsu.txt\r\nSee the file results.txt for results\r\nchen_user@vma50:~/class/a02/q01$ </pre>\r\n<p>  The file results.txt will be automatically created as an output file of running decode.sh\r\n<p> Finally, \r\n<li> Run <c>check01.sh</c> and ensure you receive the OK\'s. \r\n<p> Now that you have practiced modifying file permissions in Linux, answer the following questions to access your understanding of this important topic.  \r\n<li> <c>nano a01.txt</c> to answer the following questions for Part 1. \r\n</ul>           \r\n\r\n<ul>\r\n<table id=tbl_regular>\r\n<tr> <td> A.	Enter DONE on this line when you are done with this part of the lab.  </td> <td width=40%>    </td> </tr>\r\n\r\n<tr> <td> B.	Which of the commands on the right (1-5) will list the permissions of the file decode.sh? </td> \r\n<td rowspan=4>\r\n1.	<c>./decode.sh</c> <br>\r\n2.	<c>chmod +x decode.sh</c> <br>\r\n3.	<c>ls â€“l decode.sh</c> <br>\r\n4.	<c>chmod o-w decode.sh</c> <br>\r\n5.	<c>chmod o+w decode.sh</c>   \r\n</td> \r\n\r\n<tr><td>  C.	Which of the commands on the right (1-5) will add executable permission to decode.sh?</td> \r\n<tr><td> D.	Which of the commands on the right (1-5) will run the program decode.sh?  </td> \r\n<tr><td>  E.	Which command on the right (1-5) will add write privileges for others for decode.sh? </td>  </tr>\r\n</table>\r\n\r\n</ul></ul>\r\n\r\n                                                                                                ', '', '', '', 'Managing Linux File Permissions', 0),
(1011, 'lab', 2, 2, '                    <p><a href=\"https://en.wikipedia.org/wiki/Unix\">Unix</a> was created to allow users to modify and customize the operating system.  We will learn how to customize our system by: \r\n<ol> \r\n<li> Creating bin directory: Create your own bin (binary) directory to make running executable files a lot easier. \r\n<li> Updating the $PATH environment variables to enable the new bin directory. \r\n</ol>\r\n\r\n<ul><li>Use the directory ~/class/a02/q02 complete this part of the lab and to record your answers for this part of the assignment.) </ul>\r\n\r\n\r\n\r\n<h4> 2.1 $PATH and bin directories </h4>\r\n<p> For security reasons, after we modify the permission mode of a text file to become executable (<c>chomd</c>), we need run the executable script like: <c>./<i>script.sh</i></c>.  This is okay for now, but we can imagine that we may write some executables that we want to run the same sequence of commands when we are in different paths in the system (or even run by different users).  We can either\r\n<ul>\r\n<li> soft-link (<c>ln -s</c>) to the file wherever we want to run it, or \r\n<li> place the file in a <b>bin</b> directory that contains compiled binary files and executable scripts to be run from different directory locations in the system. </ul>\r\n\r\nThe dot (<c>.</c>) in <c>./<i>script.sh</i></c> we place in front of the script is needed because the executable is not a built-in command (either shell built-in or system utility).  For security reasons, Unix only runs the executables if the directory the files are in is specified in the <b>PATH environment variable</b>.  If you run <c>echo $PATH</c>, you will see the directories in the PATH variable like this:\r\n<pre>\r\nchen_user@vma50:~$ echo $PATH\r\n/home/chen_user/bin:/home/chen_user/.local/bin:/usr/local/sbin:/usr/local/bin:\r\n/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\r\nchen_user@vma50:~$ \r\n</pre>\r\n\r\n<p> As you can see, there are several (<b>bin</b>) directories (bin stands for binary; meaning compiled executable file) with <c>:</c> as separator.  When we run an executable command or script, the Unix system walks through these folders and if the command is in one of these directories, the system executes the command.  The <c>./</c> in front of the script (or using a full pathname), therefore, is used instead to instruct the operating system that we do want to run this executable in the present working directory, which is not in $PATH.  \r\n\r\n<p> If we created some executable scripts that we want to run across the system, we can either:\r\n    <ul>\r\n    <li> place them into one of the directories in the $PATH environment variable, or \r\n    <li> add the containing directory into the $PATH variable. \r\n    </ul>\r\n\r\n<p>Let us create a user bin and place the executable decode.sh into it, then update $PATH include the user bin directory:\r\n<ul><ul id=\"check\">\r\n    <li> Navigate to your user home directory;\r\n    <li> Create the <span class=\"inline\">/home/username/bin</span>, or <span class=\"inline\">~/bin</span>, directory.  \r\n    <li> <c>cp</c> decode.sh from q01/ to your ~/bin directory.  \r\n</ul></ul>\r\n\r\n<h4> 2.2 Update the PATH Environment Variable </h4> \r\n<p> Environment variables are \r\n  <p> We use the <a href=\"https://stackoverflow.com/questions/13795237/what-does-the-export-command-do\"><c>export</c></a> command to mark environment variables to be <b>exported</b> to all processes started from the current shell session so they can be accessed by the subshells.  Update your PATH environment variable to include ~/bin as follows. \r\n<ul><ul id=check>\r\n   <li> <c>export PATH=$PATH:~/bin</c>    (# note this step is for your practice only because your Ubuntu Linux by default have /home/<i>username</i>/bin in the PATH variable already; although ~/bin is by default not created.)\r\n     <li> Change back to your a02/q02 directory and make sure you can run\r\ndecode.sh without the â€œ<c>./</c>â€\r\n</ul></ul>\r\n\r\n\r\n<h4> Check Your Work </h4>\r\n<ul><ul id=check>\r\n<li> Navigate to your class/a02/q02 directory.  \r\n<li> Edit the file a02.txt using the command nano a02.txt\r\n<li> Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li> Enter the word â€œDONEâ€ on the line starting with â€œA.â€.\r\n<li> Save the file (using ^-X)\r\n<li> Run the script check02.sh (run as <c>./check02.sh</c>) to check your answer </ul>  </ul>                 ', '', '', '', 'Customizing Linux Shell', 0);
INSERT INTO `content` (`qid`, `unit_type`, `unit_number`, `question_number`, `question_text`, `unit_title`, `unit_name`, `question_type`, `question_title`, `invisible`) VALUES
(1012, 'lab', 2, 3, '<p> We have learned about command output redirection in Lab 1 to do redirect text streams to create/overwrite, append, and merge text files.  Instead of issuing the command directly in the shell/CLI, let us write a <b>shell script</b> to do the job.  \r\n<ul>\r\n<li> You will find that shell scripting uses commands just like issuing commands in the command line (CLI). \r\n</ul>\r\n\r\n\r\n<h4> 3.0 hello, world </h4>\r\n<p> As a convention, the first program to write would output the string \"Hello, World!\"  We will learn how to print \"hello, world\" to the terminal by creating a script, change its permission mode, and execute the file to echo \"hello, world.\" \r\n<p> Some say the level of difficulty of a computer language can be measured by how many lines of code needed to print the sentence \"<a href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\">Hello, World!</a>\" to the screen.  \r\n\r\n<ol class=\"upper_case\">\r\n<li> Recall Java </li>\r\n<p> Let us start with something we already know something about.  Many of you have learned Java or a similar language.  In Java, we would write the following code in a text editor or IDE (integrated development environment) as HelloWorld.java:\r\n<pre class=\"prettyprint\" style=\"background-color: white;\">\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World\");\r\n    }\r\n}  \r\n</pre>\r\n<p> After we have the raw source code, we use the compiler <c>javac</c> (part of JDK, Java Development Kit) to compile the source code (<c>javac HelloWorld.java</c>) into bytecode file \"HelloWorld.class\" and run it using <c>java HelloWorld</c>.  If you use an IDE, the compiling and running are usually done as part of the IDE interface.\r\n\r\n<li> \"hello world\" in bash </li>\r\n<p> In Bash and other shell languages, programmers take advantage of the existing tools (commands and utilities) in the OS.  Actually, the term \"shell\" began as a name for a \"<a href=\"https://unix.stackexchange.com/questions/14934/why-was-the-word-shell-used-to-descibe-a-command-line-interface\">command processor</a>\" and a shell is both an interface to the OS (a CLI as opposed to GUI) and a <a href=\"http://pubs.opengroup.org/onlinepubs/9699919799/\">command language interpreter</a> that helps us run scripts.  To print \"hello, world\", we can simply do: \r\n<pre>\r\nchen_user@vma50:~$ echo \"hello, world\"\r\nhello, world\r\nchen_user@vma50:~$ \r\n</pre>\r\n<p> Sometimes we feel more comfortable to code such functionality into a file.  We can use a text editor for this purpose by running\r\n<pre>\r\nchen_user@vma50:~$ nano hello_world\r\n</pre>\r\nto open nano and insert the <b>same command</b> inside the text document:\r\n<pre>\r\necho \"hello, world\"\r\n</pre>\r\n<p> Save the file, make it executable (<c>chmod</c>) as this is still a text file, and run it like this:\r\n<pre>\r\nchen_user@vma50:~$ chmod +x hello_world \r\nchen_user@vma50:~$ ./hello_world \r\nhello, world\r\nchen_user@vma50:~$</pre>\r\n</ol>\r\n\r\n\r\n\r\n<h4> 3.1 Running Scripts (Redirecting Text Stream) </h4>\r\n<p> We want to: \r\n<ul><li> Observe a script to learn how a script can look like, and \r\n<li> Run some user-created scripts to generate text streams and redirect the data to files, which we practiced a little in Lab 01 (a01) already.  As opposed to running Unix utilities or Bash commands one by one in the command line, scripts can contain multiple commands in a sequence. </ul>\r\n\r\n<p> Use the directory ~/class/a02/q03 to complete this part of the lab and to record your answers for this part of the assignment.\r\n\r\n<ol class=\"upper_case\">\r\n\r\n<li> Observe and run simple.sh </>\r\n<p> Here we want to run the script simple.sh and redirect the output to simple.txt, but let us take a peek inside the script: \r\n<pre>\r\nchen_user@vma50:~/class/a02/q03$ cat simple.sh \r\n<span style=\"color: #FF5733;\">#!/bin/bash</span>\r\n<span style=\"color: blue; \">#</span>\r\n<span style=\"color: blue; \">#</span>  Script used to print information about this computer\r\n<span style=\"color: blue; \">#</span>\r\necho \"STARTING $0\"\r\necho \"Script    : $0\"\r\necho \"User      : $USER\"\r\necho \"Home      : $HOME\"\r\necho \"Directory : `pwd`\"\r\necho \"Date      : `date`\"\r\necho \"===========================================\"\r\necho\r\necho \"Users currently logged are : \" \r\nw | cut -d \" \" -f 1 - | grep -v USER | sort -u\r\necho\r\necho \"This is `uname -s` running on a `uname -m` processor.\"\r\necho\r\necho \"The system has been up for this long :`uptime`\"\r\necho\r\necho \"There are `ps -a | wc -l` processes running\"\r\necho\r\necho \"===========================================\"\r\necho\r\necho \"ENDING $0\"\r\n\r\nchen_user@vma50:~/class/a02/q03$\r\n</pre>\r\n<p> We see that there are a lot of <c>echo</c>\'s in this script and it looks quite \"flat\" comparing to, e.g., Java source code.  Some of the obvious elements:\r\n<ul>\r\n<li> <span style=\"color: #FF5733;\">#!/bin/bash</span>: The first line include: </li>\r\n    <ul id=\"circle\">\r\n    <li>the <b>shebang</b> (<c>#!</c>) to instruct the OS that this <b>text</b> file is actually a script, and \r\n    <li>the interpreter directive (/bin/bash) to point to the interpreter to be used for this script.  In this case, we use bash as our interpreter, which is located in /bin directory for binary files: \r\n<pre>\r\nchen_user@vma50:/bin$ ls -l bash\r\n-rwxr-xr-x 1 root root 1037528 May 16  2017 bash\r\nchen_user@vma50:/bin$  \r\n</pre>  </ul>\r\n\r\n<li> <span style=\"color: blue; \">#</span>: The number sign # is a single line comment simbol. There is no multi-line comment in bash.  The comment symbol and all the following characters in the same line are ignored by the interpreter.  \r\n<li> <c>echo</c>: the <c>echo</c> command display text by printing the text to terminal (standard ouput, STDOUT).  Note that double quotes <c>\"</c> are used around text string. \r\n<li> <c>w</c>: the <c>w</c> command that shows what users are logged in. \r\n<li> <c>$</c>: A dollar sign (<c>$</c>) before a character string is a prefix for accessing the variable.  A variable can be assigned a value.  In other words, a variable is a pointer to a value.  In shell scrypting we use environment variables and shell variables. \r\n</ul>\r\n\r\n<li> Run simple.sh\r\n<p> We want to run simple.sh and redirect the results to a text file simple.txt.\r\n<ul class=\"check\">\r\n<li> Run <c>./simple.sh</c> to observe the output of the file in shell. \r\n<li> Run <c>./simple.sh > simple.txt</c> to redirect the output to simple.txt instead of STDOUT.\r\n<li> Use <c>ls -l</c> to make sure simple.txt is created and the timestamp is current. \r\n<pre>-rw-rw-r-- 1 chen_user chen_user  514 Jan 16 19:11 simple.txt</pre> \r\n</ul>\r\n\r\n<li> Run pinger.sh </li>\r\n<p>Using the script pinger.sh, we want to find active computers on your network using the <c>ping</c> command.  We will look for computers in the domain name range from vma11.cci.local to vma15.cci.local.  You should note that these hosts are in a <a href=\"https://en.wikipedia.org/wiki/Private_network\">private network</a> and have IP address of 192.168.xxx.xxx.\r\n <p> Let us do the following:\r\n<ul class=\"check\">\r\n     <li> Run the script <c>pinger.sh</c> without data redirection to observe how this script scans the range of hosts and output to the terminal.  You should see something like this:\r\n<pre>\r\n...\r\nUse ping to check connection with vma15.cci.local\r\nPING vma15.cci.local (192.168.60.25) 56(84) bytes of data.\r\n64 bytes from vma15.cci.local (192.168.60.25): icmp_seq=1 ttl=64 time=5.52 ms\r\n64 bytes from vma15.cci.local (192.168.60.25): icmp_seq=2 ttl=64 time=2.65 ms\r\n...\r\n</pre>\r\n    <li> In addition to the STDOUT, <c>pinger.sh</c> also generates a file called <b>whoami.txt</b>.  Let\'s make sure This should give you whoami.txt.  Use <c>ls -l</c> to make sure the file is current and use <c>cat</c> to view the content of the file.  \r\n    <li> Examine the script <c>pinger.sh</c> will show you how the file whoami.txt is created.  You will see: \r\n        <ul id=circle>\r\n        <li  id=circle> a lot of <c>echo</c>\'s  </li>\r\n        <li> some variable assignments such as <c>output=\"whoami.txt\"</c>  </li>\r\n        <li> a for loop  </li>\r\n        <li> several <a  href=\"http://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_07\">appended output redirection</a> <c>>> $output</c> (# this is how we create whoiam.txt)   </li>\r\n         </ul> \r\n\r\n<li> Remove whoami.txt to make sure that pinger.sh does create two text files at the same time. (Note that because we use the overwrite redirection operator <c>></c> before the appended redirection operators <c>>></c>, no matter how many times we run pinger.sh, we will have a fresh copy of whoami.txt because each time we run pinger.sh, whoami.txt is overwritten.)\r\n\r\n<li>  Finally, run <c>pinger.sh > pinger.txt</c>.  This time, you should not see the output to terminal. \r\n<li> If itâ€™s not tested, it doesnâ€™t work.  Make sure you have actually created two output files: pinger.txt and whoami.txt.  Use <c>ls -l</c> to find out. \r\n<li> Use <c>cat</c> to merge these two files (pinger.txt and whoami.txt) into a single file, which we will call complete.txt.  (# <a href=\"https://linuxize.com/post/linux-cat-command/\">Linux cat command</a> <== this is a cute technical site) \r\n</ul>\r\n</ol>\r\n\r\n\r\n<h4> 3.3 Shell Scripting </h4>\r\n<p> Shell languages, include Bash, are referred to both the command line interface (CLI, the interface) and the command line language (including the instruction set and an interpreter to run your scripts).  Shell languages are command line languages because they take advantage of the commands shipped with the OS.  In addition, Bash has <a href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\">built-in commands</a> to extend the functionality of the OS.  \r\n\r\n<p> Here we are creating our first script after the \"hello, world.\"  In directory q03, using the text editor nano, create a script called <c>q03.sh</c> that would: \r\n<ul><ul>\r\n<li  id=\"check\"> create the above three output files (simple.txt, whoami.txt, and pinger.txt), and then \r\n<li id=\"check\"> merge the three files into a single file called q03.txt. \r\n <li id=\"circle\"> ### Hint: generate the files first, then using cat command to merge the files.  You can do this step by step by concatenating two files twice or cat all three files at once.</li>\r\n</ul></ul>     \r\n\r\n\r\n\r\n<h4> check your work </h4>\r\n<ul><ul id=\"check\">\r\n<li>	Change to your class/a01/q03 directory.  \r\n<li>	Edit the file a03.txt using the command nano a03.txt\r\n<li>	Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li>	Enter the word â€œDONEâ€ on the line starting with â€œA.â€.\r\n<li>	Save the file (using Ctrl-X)\r\n<li>	Run the script check03.sh (using  ./check03.sh ) to check your answer\r\n</ul></ul>     \r\n\r\n\r\n<hr>\r\n<ul>\r\n<li> <p><a href=\"https://en.wikipedia.org/wiki/Turing_completeness\">Turing completeness</a>:</p> In case you are wondering what really is a \"programming language,\" is a good criterion for making the judgment.  After all, a programming language is an instruction set (vocabulary) with syntax and semantics (rules), along with a type system and a runtime (plus standard library) in order to \"compute.\"  This criterion uses the \"function\" (Turing completeness means being able to solve all computable problems) of a language to decide whether an artificial computer language is a \"programming language.\"  Markup languages such as HTML and XML and style sheet languages such as CSS are therefore generally not considered as \"programming languages\" because they are designed to describe presentation rather than function (although some would <a href=\"https://softwareengineering.stackexchange.com/questions/129141/is-css-a-programming-language\">disagree</a>.  In this sense, SQL (Structured Query Language) is also <a href=\"http://progopedia.com/language/sql/\">not</a> a programming language because it does data management but does not meet the criterion of Turing completeness.  </li>\r\n<li> <p>built-in vs utility: </p>\r\nAn interesting and subtle <a href=\"http://www.prenhall.com/glass_ables/content/chapter04.html\">distinction</a> between the shell built-in commands and the commands shipped with the Unix-like OS: \"A built-in command is part of the shell itself. A utility is an executable program that is installed (usually in a system directory such as /bin ) which the shell executes.\"  </li>\r\n</ul>                                               ', '', '', '', 'Creating Shell Script', 0),
(1015, 'lab', 3, 0, '   <p> This assignment continues with Linux and expands on what you have learned about Linux scripts.  The learning objectives include::\r\n<ul>\r\n<li>	Learning how to take user input for scanning and logging files\r\n<li>	Modifying your working environment using .bash_aliases\r\n<li>	Putting user input, file scanning/logging, and .bash_aliases into one script  </ul>\r\n\r\n<p> It is often necessary to create a set of Linux commands as an environment (including paths, aliases, and scripts) that provide administrative users with simple ways to complete those otherwise tedious and repetitive tasks.  In this assignment, we will learn some common practices of how Linux system administrators customize their Linux environment to make their life easier.  The skills and concepts you learn from this activity will help you see from the perspective of information systems administration.  Such an experience can be proof that you have the foundational knowledge of Linux systems and shell, which assures your employer that you are comfortable with the technical aspects of the job you are seeking.\r\n \r\n<p> Your personal environment is loaded when you log into a computer (when the default configurations are read from various configuration files and executed).  You have some control over what goes into your environment via modifying the configurations in the files such as <b>~/.bashrc</b>, <b>~/.profile</b>, and <b>~/.bash_aliases</b>.  In this activity, we will modify that configuration by creating an additional file specifically to expand the Linux environment for this assignment.  To do this we must:\r\n<ol>\r\n<li>	Create the directories and scripts needed to implement our new tools,\r\n<li>	Create a script to catch user input and perform file scanning,\r\n<li>	Create a script to redirect command results into specified logs, \r\n<li>	Create a file ~/myenv to hold the commands that create our assignment-specific environment variables and aliases, and \r\n<li>	Create the ./.bash_aliases file and modify it to include the file, ~/myenv; and finally, we will\r\n<li>	Verify that everything works as designed. </ol>\r\n\r\n<p> To prepare for this activity, you will need to create two directories called <b>tmp</b> and <b>backup</b> in your home directory.  Also, you should have created a user <b>bin</b> directory as part of Lab Activity 2.\r\n<ul><ul id=check>\r\n<li> Create the <b>tmp</b> and <b>backup</b> directories in your user home directory (NOT the root home <b>/home</b> for all users).  Using the <c>mkdir <i>directory1 directory2 ...</i></c> syntax can create multiple directories at once. \r\n</ul></ul>\r\n\r\n\r\n            ', 'Conditional Redirection', '', '', 'Introduction', 0),
(1016, 'lab', 3, 1, '          <li> The <c>finder_v00.sh</c> script:\r\n    <p> There is a file called finder_v00.sh within your a03/q01 directory.  This script can be modified to check for a specific file or directory in every userâ€™s home directory, which is a common administrative task to perform.  For example, finder_v00.sh can be used to see if all of the users have set up a backup, class, public_html, tmp, or bin directory.  Using a script like finder_v00.sh, an administrator can automatically check the status of the user accounts in batch.  \r\n\r\n<li> Backup first:    \r\n    <p> To accomplish this, the finder_v00.sh script needs to be modified.  But we don\'t usually modify files directly; instead, we make sure we have two copies of the file: a backup copy and a working copy.  We make modifications on the working copy only, so we always have the original file to fall back to in case the task does not go as planned.  In other words, we will at least not make things worse. \r\n\r\n<li>	Tile two terminals: \r\n    <p> It is often useful to open two terminal windows, one for editing and one for testing your code.  Tile the terminal windows in large enough size so you can see the chunks and structure of the scripts, which gives you a better idea about the logic of your code blocks (paragraphs).  After all, programming languages are languages, and we will learn better by seeing they have pages, paragraphs, sentences, and vocabulary just like natural languages.  \r\n<li> <c>^-O</c>: \r\n    <p>You can use <c>^-O</c> to save your modifications in the editing terminal without exiting nano.  <c>^-O</c> will save the file and you still remain in editing mode to continue with testing in the other terminal.\r\n \r\n<li> Use the directory ~/class/a03/q01 to record your answers for this part of the assignment. \r\n</ul>\r\n\r\n\r\n<h4> 1.1 Backup copy and working copy </h4>\r\n<ol class=\"upper_case\">\r\n<p> We want to create a backup copy and a working copy of the file we are modifying the script.  \r\n\r\n<li> Backup copy: \r\n<p> Let us start by <c>cp</c> the file finder_v00.sh into your backup directory (it is always a good idea to backup your work.  By default, Microsoft Word automatically keeps a copy of your file every <a href=\"https://www.computerhope.com/issues/ch001288.htm\">10 minutes</a>, which is probably a good indicator of how much time your clients and you can tolerate a loss of work in case of a technical issue).  Also, let us double-check to make sure itâ€™s there by issuing the <c>ls</c> command.\r\n<ul id=\"check\">\r\n    <li> <cp> <c>cp</c> the file to the backup directory\r\n    <li> issuing <c> ls -l ~/backup/finder_v00.sh</c> to make sure the backup file is present in the intended directory.  </ul>\r\n\r\n<li> Working copy: \r\n<p> We are going to rename the script to a working copy because we want to be clear we are working on the right file.  This may seem trivial, but it could save a day when things get hectic and you don\'t even know if you could rely on the timestamps (use <c>ls -l</c> to see) to tell which file(s) are the working file.  So, let us <c>cp</c> (or <c>mv</c>, as some would prefer not to keep the original file with the same name since it has been backed up) <b>finder_v00.sh</b> to <b>q01.sh</b> as your working copy for accomplishing the required modifications. \r\n\r\n<ul id=\"check\">\r\n<li> <c>cp</c> or <c>mv</c> finder_v00.sh to q01.sh.\r\n</ul>\r\n\r\n</ol>\r\n\r\n<h4> 1.2 Conditional Redirection </h4>\r\n<p> We want to run and read the scripts to learn about catching user input and redirection.  Run and read <b>user_input.sh</b> carefully to learn how to use <c>read</c> command to take user input; and run and read <b>redirect.sh</b> carefully to learn how to perform conditional redirection. \r\n<p>\r\n<ol class=upper_case>\r\n\r\n<li>	Run sample script <b>user_input.sh</b>: \r\n<p> Stand on the shoulders of your predecessors!  In general, programmers spend more time in reading/reusing/fixing/enhancing the code written by their colleagues.  In our case, we have two short scripts (<b>user_input.sh</b> and </b>redirect.sh</b>) in the q01 directory, they provide examples of how to implement the changes you need.  Let\'s run <b>user_input.sh</b> first:\r\n<pre>\r\nchen_user2@vma50:~/class/a03/q01$ ./user_input.sh \r\nPlease enter your last name: Chen\r\nHello. Is this your last name: Chen?\r\nchen_user2@vma50:~/class/a03/q01$\r\n</pre>\r\n<p> We see that this script was written to interact with the user by prompting the user for his/her last name and will repsond to user input by greeting the user and aske a question.  \r\n    <ul id=check>\r\n    <li> Run <c>./user_input.sh</c> to observe the behavior. </ul>\r\n<li> Observe sample script <b>user_input.sh</b>:\r\n<p> Now let\'s observe the file by <c>nano user_input.sh</c>.  You will see:\r\n<pre>\r\n01 #!/bin/bash\r\n02 #\r\n03 #       Sample script to demonstrate getting user input from the terminal\r\n04 #\r\n05 #       Sample script with no editting of the input and no default\r\n06 #\r\n07 echo -n \"Please enter your last name: \"\r\n08 read name\r\n09 echo \"Hello. Is this your last name: $name?\"\r\n</pre>\r\n<p> We see that:\r\n<ol>\r\n<li> On line #1, the script starts with a shebang and followed by bunch of comments (which you should read but you won\'t because of the least-effort human nature).  \r\n<li> Line #7 is an echo line, which will print the message to terminal as a prompt.  The <c>-n</c> instructs the shell not to output the trailing newline.\r\n<li> Line #8 is an input (<c>read</c>) line that takes \"<b>name</b>\" as variable. \r\n<li> Line # 9 is another echo line that prints out the message we want.  Note that, Inside the message, variable <b>name</b> is referenced as <c>$name</c>, which will have the value of the user input.  </ol>\r\n<ul class=check>\r\n    <li> <c>nano user_input.sh</c> to read the code line by line to understand what it\'s doing.  </ul>\r\n\r\n<li> Run and observe <c>redirect.sh</c> </li>\r\nLet\'s run and observe redirect.sh.  When we do <c>.redirect.sh</c> and follow the prompt to enter a01.txt, which is a file we know exists in each question directory, we see:\r\n<pre>\r\nchen_user2@vma50:~/class/a03/q01$ ./redirect.sh \r\nPlease enter a filename: a01.txt\r\nchen_user2@vma50:~/class/a03/q01$ ls\r\n</pre>\r\n<p> The file did not give us any further feedback.  However, if we <c>ls</c> the directory, we see an additional file, <b>success.log</b>:\r\n<pre>\r\na01.bak  check01.sh  finder.in      redirect.sh  user_input.sh\r\na01.txt  error.log   finder_v00.sh  success.log </pre>\r\n<p> Now let\'s take a look at the content of success.log: \r\n<pre>\r\nchen_user2@vma50:~/class/a03/q01$ cat success.log \r\nThis file logs commands that succeed\r\na01.txt\r\nWe looked for file a01.txt\r\nchen_user2@vma50:~/class/a03/q01$ \r\n</pre>\r\n\r\n<p> Obviously, script <c>redirect.sh</c> redirected some text into the file success.log.  Now let us take a look at the content of the script:\r\n<pre>\r\n01 #!/bin/bash\r\n02 \r\n03 # This script provides a simple example of how to redirect output resulting\r\n04 # from commands that execute properly and commands that do not.   \r\n05 \r\n06 ##### prompt (-n: no newline) and input->variable \r\n07 echo -n \"Please enter a filename: \"\r\n08 read name\r\n09\r\n10 ##### echo text stream and redirect \r\n11 echo \"This file logs commands that succeed\" > success.log\r\n12 echo \"This file logs commands that fail (except this one)\" > error.log\r\n13\r\n14 ########## Conditional Redirection ##########\r\n15 ### If $name is found, the ls $name command succeeds and \r\n16 ###    the command output will go into the success.log file.\r\n17 ### If $name is not found, the \"not found\" output goes into error.log\r\n18 ls $name 1>> success.log 2>> error.log; \r\n19 \r\n20 ########## Conditional Redirection ##########\r\n21 ### If $name is found, the \"echo $name\" command succeeds and \r\n22 ###    its output will go into the success.log file.\r\n23 ### If $name is not found, the \"not found\" message goes into error.log.\r\n24 echo \"We looked for file $name\" 1>> success.log 2>> error.log\r\n25\r\n</pre>\r\n\r\n<p> From the redirection.sh code above, we see that:\r\n<ol>\r\n<li> Line #7 is an echo line that prompts user for input.\r\n<li> Line #8 takes the user input from STDIN and save it to a variable called <b>name</b>.\r\n<li> Line #11 and 12, we see that this script actually produced two files: success.log and error.log.  These two lines are comment messages into each of the two log files and they are overwrite redirection so, when run each time, they will create the two new files of success.log and error.log.\r\n<li> As line #14 and #20 say, line #18 and line #24 perform <b>conditional redirection</b>.  When the command succeeds, <c>1>></c> takes effect.  When the command fails, <c>2>></c> takes effect.  This \"conditional\" action is achieved in line #18 and 24 by using <b>file descriptor</b>(<c>1</c> and <c>2</c>) along with redirection operator <c>>></c>.\r\n</ol>\r\n\r\n<li> <a href=\"https://www.computerhope.com/jargon/f/file-descriptor.htm\">File descriptor</a> </li>\r\n<p> A file descriptor (or, file handle) is a unique number that points to a data source (file being used by the OS).  The first three file descriptor are of most interest to us:\r\n<table id=\"tbl_regular\">\r\n<thead><tr> <th> File Descriptor   </th>  <th>  Name </th>  <th> Abreviation  </th> </tr></thead>\r\n<tbody>\r\n<tr> <td> 0 </td>  <td> Standard Input  </td>  <td> STDIN  </td> </tr>\r\n<tr> <td> 1 </td>  <td> Standard Output  </td>  <td> STDOUT  </td> </tr>\r\n<tr> <td> 2  </td>  <td> Standard Error  </td>  <td> STDERR  </td> </tr>\r\n</tbody></table>\r\n\r\n<p> Graphically, these three standard data streams work like <a href=\"https://en.wikipedia.org/wiki/Standard_streams\">this</a>:\r\n<img src=\"../images/std_streams.png\" height=\"200\">\r\n\r\n<p> For example, on line #18, <c>ls $name 1>> success.log 2>> error.log;</c> (note that the command separator<c>;</c> at the end of line can be omitted when a line break follows), we see that the command is <c>ls $name</c>.  <c>$name</c> performs <a href=\"https://www.tldp.org/LDP/abs/html/varsubn.html\">variable substitution</a> to reference to the content of variable <b>name</b>.  In our case above, we give a01.txt at the read prompt, so the value of $name is \"a01.txt\", which is a file that exists.  Therefore, the shell will output the successful listing result to STDOUT, which we then redirect to success.log; and the <c>2>> error.log</c> part is ignored.  In the case that the file does not exist, ls $name will result in an error, which will be sent to STDOUT as well, and we redirect it to error.log by using <c>2>> error.log</c>, and the <c>1>></c> part is ignored.\r\n\r\n<p> In line# 17 and 18 of <c>redirect.sh</c>, we use redirection operator <c>>></c> to direct the text stream to files and we use file descriptors (fd) number 1 (STDOUT, can be omitted) and 2 (STDERR) to point to the data source.  This creates a <b>conditional redirection</b> much like a short-hand for if statement.  \r\n\r\n<ul id=check>\r\n<li> Use nano to open redirect.sh and examine the code closely.  Make sure you understand how <b>conditional redirection</b> works using <b>file descriptor</b> 1 and 2. \r\n</ul>\r\n</ol>\r\n\r\n<h4> 1.3 Create Conditional Redirection </h4>\r\n<p> With our understanding in user input and <b>conditional redirection</b>, we are ready to modify the script file q01.sh.  \r\n\r\n<ol class=\"upper_case\">\r\n<li> Run q01.sh:\r\n<p> Before we modify it, let us run <c>./q01.sh</c> to take a look at the results.  We get:\r\n<pre>\r\nchen_user@vma50:~/class/a03/q01$ ./q01.sh \r\nOK, This is a list of where bin was found\r\nOh no!  bin wasn\'t found here.\r\nFound bin\r\nDid NOT find bin\r\nls: cannot access \'/home/admindean/bin\': No such file or directory\r\nls: cannot access \'/home/administrator/bin\': No such file or directory\r\nls: cannot access \'/home/chen_admin/bin\': No such file or directory\r\n4 /home/chen_user/bin\r\nls: cannot access \'/home/chen_user2/bin\': No such file or directory\r\nls: cannot access \'/home/chen_user3/bin\': No such file or directory\r\nls: cannot access \'/home/test/bin\': No such file or directory\r\nls: cannot access \'/home/test2/bin\': No such file or directory\r\nls: cannot access \'/home/test3/bin\': No such file or directory\r\nls: cannot access \'/home/test_user/bin\': No such file or directory\r\nchen_user@vma50:~/class/a03/q01$ \r\n</pre>\r\n<p> We don\'t always want the output to be displayed on the screen like this.  Log files will be preferred in most cases when we perform administrative tasks because they are easier to read, process, and retrieve.\r\n \r\n<li> Check out the code \r\n<p>  Now we <c>nano q01.sh</c> and see the script looks like this:\r\n<pre>\r\n01 #!/bin/bash       \r\n02 # Check to see if we have an aliases file.  If so, execute it\r\n03 #\r\n04 if [ -f ~/.bash_aliases ] ; then\r\n05         shopt -s expand_aliases\r\n06         source ~/.bash_aliases\r\n07 fi\r\n08 ###\r\n09 ### Now look for implemented files \r\n10 ###     (bin, class, tmp and public_html are good examples)\r\n11 ### Right now this is set to look for the \"bin\" file, \r\n12 ###     you will change this accept user input\r\n13\r\n14 # echo \"What file would you like to look for (good choices are bin, test, and public_html)\"  \r\n15 file=\"bin\"              # use bin as the default to start, we really want to read this from the terminal\r\n16 \r\n17 echo \"OK, This is a list of where $file was found\"      # This should output to success.log\r\n18 echo \"Oh no!  $file wasn\'t found here.\"                 # This should output to error.log\r\n19\r\n20 echo \"Found $file\"                                      # This should output to success.log\r\n21 echo \"Did NOT find $file\"                               # This should output to error.log\r\n22 \r\n23 for homedir in /home/*; do\r\n24     ls --directory --size \"$homedir/$file\"       # This output should go to success.log (if found) or error.log (if not found)\r\n25 done\r\n</pre>\r\n<p> We see that line #1 is a shebang, #2~7 is an if statement that checks if there\'s a .bash_aliases file in your home directory, and <c>source</c> (execute and keep the variables in the current session).  By default, aliases are not available in scripts, so we need to use the shell option command <c>shopt</c> to make them available here in this script.  This part of the code is for later when we are going to create some aliases in a03/q02 and we will re-use this piece of code in a03/q03 and this piece of code will become useful.  For example, the <b>accounts</b> alias we created in h03/q02 would then can be used in scripts, not just in command line (yes, even it\'s put in ~./bash_aliases).  With this, you can use that alias in place of the <c>ls</c> command in line #24.  Don\'t worry if you don\'t have this set up.  We will cover this topic later. \r\n<p> Line #14 is commented out but it has a command <c>echo</c> in there.  It would be interesting to see what will happen if we uncomment it.  Line #17 to 21 are redirections; and line #23 to 25 is a for loop.  We can move on to modify this piece of code by performing the following tasks: \r\n\r\n<li> Enable user input: \r\n<p> Modify q01.sh so that it will:\r\n<ul id=check>\r\n    <li> Enable user prompt:\r\n<p> Modify the code (#14) so that it will prompt for the user to input a file name (everything is a file in Unix-like systems; directories are files, too) to find.  In this script, we are suggested to monitor the directories that we have created under the user home, which is a good idea since we know for sure if they exist or not. \r\n    <li> Enable user input:\r\n<p> To take user input, we use the <c>read</c> command, which will scan STDIN for user input from keyboard.  Right now, the input is hardcoded to default to the bin directory, which is not what we want.  We want the script to take user input so it can search the existence of any files for us.  Modify line #15 can help us achieve this purpose. \r\n</ul>\r\n\r\n<li> Set up redirection: \r\n<ul id=check>\r\n<li> Simple redirectioin:\r\n<p> Modify line #17, 18, 20, and 21 to properly redirect text streams to the log files.  The messages would go into the right logs as specified in the comments after the commands. \r\n\r\n<li> Conditional redirection:\r\n<p> The for-loop <c>for homedir in /home/*</c> will parse through directory /home and assign each of the filenames (user directory, in this case) the <b>loop variable</b> <c>homedir</c> (home directory).  Each of the user home directories will then be listed for $file (<c>ls $homedir/$file</c>) since it is the command that the loop asks to <c>do</c>.  After all elements (names of the user home directory) are iterated, the loop is \"<c>done</c>.\"  \r\n<p> If the user of this script input \"bin\" for search, then since only some of the user accounts have the bin directory created in user home, some <c>ls $homedir/bin/</c> will be successful and some will say \"No such file or directory\".  Here our job is to modify the line of command (line #24) inside the loop so that the <c>ls</c> results  will be <b>conditionally</b> sent to either error.log or success.log.  The rules of the conditional redirection is as discussed above:\r\n<ul class=\"circle\">\r\n    <li> Any standard (successful) output (STDOUT) messages are redirected to the file success.log\r\n    <li> Any error output (STDERR) messages are redirected to the file error.log\r\n</ul>\r\n</ol>\r\n\r\n<h4 > Check Your Work </h4>\r\n<ul><ul id=\"check\">\r\n<li>	Make a copy of the working script q01.sh as finder_v01.sh to the backup directory. \r\n    <p>Once this script is working as you check the logs are correctly created, save a copy of q01.sh in your ~/backup directory as <b>finder_v01.sh</b>.  \r\n<li>	Modify a01.txt: You know what to do. \r\n<li>	Run the check script to see how you have done in this Part.  \r\n</ul></ul>\r\n\r\n\r\n\r\n<hr>\r\n<ul>\r\n<li> \"In UNIX (and therefore Linux), everything is a file.\"  So regular text files, directories, text/data streams, or even peripherals (device files), are treated as files by the operating system.  In this regard, STDIN, STDOUT, and STDERR are treated as files and each given a file descriptor (fd).  If you are intrigued by this statement, check out <a href=\"https://en.wikipedia.org/wiki/Everything_is_a_file\">Wikipedia</a> and other sources to dig deeper.  For example, what does this statement mean in the <a href=\"https://www.howtogeek.com/117939/htg-explains-what-everything-is-a-file-means-on-linux/\">file system</a>?  And what does it mean from the perspective of <a href=\"https://ph7spot.com/musings/in-unix-everything-is-a-file\">data stream and name space</a>?  As you may find out, technology can be philosophically amazing. ^^\r\n<li> When the operating system opens a \"file\", a file descriptor is assigned to it so that the open file is kept in track.  In C language, it is called a file handle.\r\n</ul>\r\n\r\n                                                                                                                   ', '', '', '', 'Conditional Redirection', 0),
(1017, 'lab', 3, 2, '   <p> The idea here is that you are creating your own working environment. The aliases and environment variables you are creating here are administrative tools common for IT workplace.  Common places for configuring Linux environment include the .bashrc and .profile files under the user home directory.  In Ubuntu ~/.bashrc, it is suggested to use ~/.bash_aliases to include additional aliases. \r\n\r\n<p> There are three levels of working environment settings (may consist of aliases, environment variables such as paths, and scripts) that we may want to define to make our jobs easier:\r\n<ol>\r\n    <li> Local level: <c>source</c> on demand\r\n    <p> When you have a defined environment file that you want to use only when running certain tasks.  For example, every week you need to monitor and backup certain log files involving long path names and routine file processing such as copying and moving files into some directories and add a log record for completing the tasks.  You <c>source</c> the file when you need that environment. \r\n    <li> User level: execute when log in (use <c>~/.bash_aliases</c> for aliases and <c>~/.profile</c> for PATH):\r\n    <p> When you have a defined environment that you use regularly and you want to make it available every time you log into the shell.  When you log in, .bashrc will run .bash_aliases if exists.  This is much like what we are doing in this lab.  \r\n    <li> System level: <c>/etc/profile</c> & <c>/etc/bash.bashrc</c>\r\n    <p> Settings (ENVs, aliases, and scripts) recorded in these files will be shared by all login sessions.  This means other administrators or users will share those environment features; for example, linking to shared storage upon logon.  \r\n</ol>\r\n\r\n<p> Our goal in this next set of steps is to personalize your Linux environment by loading certain functionalities you choose every time you log in.  To accomplish that we will: \r\n\r\n<ol>\r\n<li> define some paths and aliases so that later we can see the output of q01.sh from any directory yet at the same time not creating the success.log and error.log files in every directory we run the script, and  \r\n<li> define some aliases so that we can see the output of q01.sh from any directory yet at the same time not create the success.log and error.log files in every directory. </ol>\r\n\r\n <ul>\r\n<li>Use the directory ~/class/a03/q02 to record your answers for this part of the assignment. </ul>\r\n\r\n\r\n<h4> 2.1 Create Environment Variables</h4> \r\n<ol class=upper_casse>\r\n<li> Define the ENV\r\n<p> To help us do this with less typing, define the environment variables for your ~/tmp and ~/class/a03 directories as follows:\r\n      export A3=$HOME/class/a03\r\n<li> Create the env file\r\n   <p> Change to your home directory and use nano to create a file called myenv.  Within myenv insert five bash commands that define:\r\n    <ol> \r\n    <li> an environment variable called MYTMP that represents your ~/tmp directory and a second environment variable that represents your ~/class/a03 directory.   Use the export command to do this:  \r\nexport   MYTMP=$HOME/tmp\r\nexport   A3=$HOME/class/a03\r\n    <li> defines three aliases to do the following:\r\nvs â€“ views the contents of success.log using cat  $MYTMP/success.log\r\nve â€“ views the contents of error.log using cat  $MYTMP/error.log\r\nrl â€“ removes the $MYTMP/error.log and $MYTMP/success.log files.\r\n    <li> To execute the myenv file while you are still logged in, use the following command: \r\nsource   myenv\r\n    <li> Use the check02.sh script to check your environment variable and aliases.\r\n</ol> </ol>\r\n\r\n\r\n<h4> 2.2 Create .bash_aliases </h4>\r\n\r\n \r\n<p> Here we want to create a .bash_aliases file in your home directory that redoes, i.e., â€œ<c>source</c>â€ the myenv file every time you log in.  This can be done using nano as follows.\r\nnano .bash_aliases\r\n<p> Change to your home directory and then use nano .bash_aliases to enter the following bash statements into a .bash_aliases file and then save the file.\r\n<pre>\r\n#!/bin/bash\r\n#\r\n#       Add my environment variables if the file exists.\r\n#\r\nif   [   -f  ~/myenv   ]\r\nthen\r\n        source  ~/myenv\r\nfi\r\n</pre>\r\n\r\n<h4> Check your work </h4>\r\n<ul>\r\n<li> Test the work above by opening another terminal window and then run <c>printenv</c> and <c>alias</c>. These commands should show you the environment variables and aliases you created.  \r\n\r\n<li> Changing to your ~/class/a03/q02 directory and running check02.sh will help you figure out what is wrong if the above doesnâ€™t work as expected.   \r\n\r\n<li> When you are confident you have it working, enter DONE in the ~/class/a03/q02/a02.txt file.              \r\n</ul>', '2', '', '', 'Environment: ENVs and aliases at user level', 0),
(1018, 'lab', 3, 3, '                  <ul>\r\n<li> Use the directory ~/class/a03/q03 to record your answers for this part of the assignment. </ul>\r\n\r\n<ol class=upper_case>\r\n<li> Start by copying your q01/q01.sh file to q03.sh.  You can start by:	 \r\n<ul id=check><li> <c>cp</c> $A3/q01/q01.sh as q03.sh under $A3/q03/</ul>\r\n<li>	Modify q03.sh script so that it creates the files success.log and error.log in your $MYTMP directory, rather than in the q03 directory.  Note that here we use a <c>for</c> loop to parse through all user directories in system /home and redirect (<c>>></c>) the results (<c>li</c> succefully found or not found with an error. \r\n<ul id=check>\r\n<li> Use file descirptor (fd) and redirection operator (<c>>></c>) to achieve conditional redirection.\r\n</ul>\r\n<li> Add two statements to the bottom of your q03.sh scripts that will use your â€œvsâ€ and â€œveâ€ aliases and redirect their output to $MYTMP/summary03.log as follows (because of the shell option <c>shopt</c> we can use aliases in our script):\r\n<pre>\r\nvs > $MYTMP/summary03.log\r\nve >> $MYTMP/summary03.log </pre>\r\n\r\n<li> Make q03.sh available when logging in\r\n<p> Finally, we need to make q03.sh work independently of where we run it from every time we log in using our individual account (but not to other users).  To do that, we need to copy our final version to our personal bin directory:\r\n<ul id=check>\r\n    <li> <c>cp</c> q03.sh to ~/backup/ as finder_v02.sh\r\n    <li> <c>cp</c> q03.sh to your personal user bin directory (~/bin) as <b>finder.sh</b>\r\n</ul>\r\n<ul>\r\n    <li id=\"none\"> ### The syntax of <c>cp</c> is <c>cp [options] <i>SOURCE_FILENAME TARGET_FILENAME</i></c> (will rename); or <c>cp [options] <i>SOURCE_FILE TARGET_DIRECTORY</i></c> (will not rename). \r\n</ul> \r\n\r\n<p> If you have set up your environment and script correctly, <c>finder.sh</c> will run from any directory.  When it is run, it should create a file named summary03.log in the directory <b>~/tmp</b> each time it runs.  This file should contain the results of both your error.log and success.log files.  \r\n\r\n<ul id=check>\r\n<li> Run finder.sh and look at the content of the file ~/tmp/summary03.log to see if it contains what you expect it to contain.   \r\n<li> Running ./check03.sh from within your q03 directory to verify that everything is the right place and working properly or give you an idea of what might be wrong if it is not.    \r\n<li> Enter DONE in the ~/class/a03/q03/a03.txt file when you are confident you have it working.\r\n <ul>                    ', '3', '', '', 'Putting it All Together', 0),
(1020, 'exam', 1, 0, '', '', '', '', '', 0),
(1022, 'exam', 2, 0, '', '', '', '', '', 1),
(1023, 'homework', 5, 0, '', 'Data Quality Management', '', '', '', 1),
(1024, 'homework', 6, 0, '', '', '', '', '', 1),
(1025, 'homework', 7, 0, '', '', '', '', '', 1),
(1026, 'homework', 8, 0, '', '', '', '', '', 1),
(1027, 'homework', 9, 0, '', '', '', '', '', 1),
(1028, 'homework', 10, 0, '', '', '', '', '', 1),
(1029, 'lab', 4, 0, ' <p> The purpose of this lab unit is on data quality management.  \r\n<p> This lab introduces you to the administration of MySQL at a fundamental level:\r\n<ul>\r\n  <li> Managing MySQL user accounts \r\n  <li> Creating MySQL database\r\n  <li> Creating and running MySQL queries\r\n  <li> Operating the mysql command line (<c>mysql -u <i>username</i> -p<i>password</i></c>)\r\n </ul>\r\n\r\n<p> When you are dealing with large numbers of files and lots of data and there are numerous techniques you can use to help keep track of the files.  One of the simplest is to create a file naming convention and a directory structure that helps you and programs find and identify files easily.  More advanced techniques use metadata (repositories of data about the data) stored in other files or databases to help you quickly identify and access files.  Often, databases are used to manage some or all of the data.  In cases where a very large amount of data is being managed, an automated management system becomes necessary.  Each of these approaches has advantages and disadvantages â€“ and each creates the need for careful management of the information and systems being used.\r\n\r\n<p> In this activity, you will learn some of the basics of administering MySQL, creating databases and tables, and using batch files that enable you to move the data from a structured text file into a database.  While it might be tempting to think that one should employ a graphical interface such as MySQL Workbench or PHPMyAdmin to manage the database, there are many instances where data and database operations need to be completed without human intervention.  In these cases, understanding the underlying technology and systems behind databases is critical to the efficient operation of an information system.\r\n\r\n\r\n<p> This is a complex activity that requires carefully following the directions.  Take your time and work carefully.  Since you are creating a shared database, your group should work on this together.\r\n\r\n\r\n<h4> Activities</h4>\r\n<p> For this activity, our goal is to create a database containing several tables.  These tables hold data on dealerships, the owners of the dealerships, the sales agents who work there, and the car sales that were made.  \r\n\r\n<p> In the process of this lab we will:\r\n<ol>  \r\n<li> Set MySQL root password to something you and your partner can remember\r\n<li> Create another account (salesadmin) that you can use to manage the car sales database\r\n<li> Create a user account (salesmgr) that can be used to access the data in the car sales database (but not update or insert additional data into it)\r\n<li> Create the database\r\n<li> Check that the data was inserted into the database correctly\r\n</ol>\r\n\r\n<p> None of this activity matters if the data we put into the table is incorrect.  As a result, we will need to develop a set of tests that can help us determine that the data we have in over 1000 weekly sales files is correctly inserted into the database.   \r\n\r\n<h4> Database Information </h4>\r\n<p> Review the data model and data dictionaries that support this activity and follow the instructions carefully.  You will use them in your lab activities. \r\n\r\n<p>\r\n<p> Figure 1. Data Model <img src=\"../images/a04_0_1.png \"  height=500> </p>\r\n<p> Table 1. Data Dictionary for table=<b>sales by year</b> <img src=\"../images/a04_0_2.png \"  height=400> </p>\r\n<p> Table 2. Data Dictionary for Talbe=<b>owner</b> <img src=\"../images/a04_0_3.png \"  height=150> </p>\r\n<p> Table 3. Data Dictionary for Table=<b>agents</b> <img src=\"../images/a04_0_4.png \"  height=200> </p>\r\n<p> Table 4. Data Dictionary for Table=<b>dealers</b> <img src=\"../images/a04_0_5.png \"  height=225> </p>\r\n\r\n<p> To complete this activity, you and your partner will need to work together to create and set up the database â€“ this only needs to be done by <b>one of you</b>.  The MySQL database is accessible to both of you once it has been set up properly.  \r\n\r\n<p> <span style=\"color:red\"> Parts 1, 2 and 3</span> of this activity <b style=\"color:red\">MUST BE DONE AS A TEAM</b>.  Doing them separately will create a database with multiple entries of the same data.\r\n\r\n<h4> Change MySQL root Password</h4>\r\n<p> This section is an overview of how to change MySQL root password.  You will perform this in Part 1 as a group with operational details.  Read the following process to get to know the process and commands involved. \r\n<pre>\r\n##### Existing mysql password is H3lic0pt3r!   \r\n##### Create needed files for logging in mysql special mode\r\nsudo mkdir /var/run/mysqld;\r\nsudo chown mysql /var/run/mysqld\r\n\r\n##### Stop mysql\r\nsudo service mysql stop\r\n\r\n##### Restart mysql in safe mode\r\nsudo mysqld_safe --skip-grant-tables&\r\n\r\n##### LOG IN to MYSQL using root\r\nmysql -u root\r\n\r\n##### Once in mysql command, use the following SQL statements to change the root passwords\r\nUSE mysql;\r\nUPDATE user SET authentication_string=PASSWORD(\'pwcci#\') WHERE user=\'root\'\r\nFLUSH PRIVILEGES;\r\nquit;\r\n\r\n##### Once out of mysql kill mysql       \r\nps -aef | grep mysql\r\nsudo kill -9 (three PID found with the previous command)\r\n\r\n##### Restart msyql and make sure you can log in\r\nsudo service mysql start\r\n</pre>        ', '', '', '', 'Introduction', 0);
INSERT INTO `content` (`qid`, `unit_type`, `unit_number`, `question_number`, `question_text`, `unit_title`, `unit_name`, `question_type`, `question_title`, `invisible`) VALUES
(1030, 'lab', 5, 0, '<p> This lab continues our introduction to the administration of MySQL database management system (DBMS) at a fundamental level.  In our last lab, we have added user accounts, created a database (sales), and inserted three small tables (agents, dealers, and owners) into the database.  In this lab we are going to perform the following to practice managing larger datasets: \r\n<ul>\r\n<li>	Adding large datasets to a MySQL database\r\n<li>	Check the quality of the data\r\n<li>	Backup and restoring MySQL databases </ul>\r\n\r\n<p> In this lab, we are going to add additional data to our dataset.  This dataset includes sales data for car sales between 2010 and 2015.  Part of the challenge here is to make sure that the data entered into the database is in fact correct.  This lab will focus on some of the basic automated approaches to achieve the objective of data quality control.  The success and quality of your daily tasks as an IT professional depends on how much you put into planning and preparation, because IT is all about managing resources and processes. \r\n\r\n<p> As with the last lab, this is a complex activity that requires carefully following the directions.  You and your partner should take your time and work carefully.   \r\n\r\n<h4> OBJECTIVES </h4>\r\n<p> For this activity, our goal is to create a database containing the car sales tables from 2010 to 2015.  These tables hold data on the sales, dealerships, and sales agents who made the sales.  In the process of this lab, we will \r\n<ol> \r\n<li> read the sales data from files and insert them into your database, and \r\n<li> run tests to ensure that we have done them correctly. </ol>\r\n', 'Using Large Databases', '', '', 'Introduction', 1),
(1031, 'lab', 6, 0, '', '', '', '', '', 1),
(1032, 'lab', 7, 0, '', '', '', '', '', 1),
(1033, 'homework', 5, 1, '   <p> The q01 directory contains two files: insert_data.sql and insert_data.txt.  \r\n\r\n<ul> \r\n<li> These two files contain the same data in two different formats: .sql and .txt.  \r\n<li> The data in these files contain student performance data for a course on 11 homework assignments, 7 quizzes, and 3 exams for 251 students.  \r\n<li> Ultimately, we want to insert the data in these files into a database and verify that the database is working.  \r\n\r\n<ul id=check>\r\n<li> Examine the file insert_data.sql and use that information to answer the following questions about the database definition. </ul></ul>\r\n\r\n<table id=tbl_regular>\r\n<thead> <tr> <td style=\"width:60%\"> Question </td> <td style=\"width:5%\"> </td>  <td style=\"width:35%\"> Possible Answers </td>  </tr> </thead>\r\n<tbody>\r\n<tr> <td> A.	What is the name of the database? </td> <td> </td>  <td> 1.	students </td>  </tr> \r\n<tr> <td> B.	Which one of the fields in the table is used as the primary key? </td> <td> </td>  <td> 2.	grades  </td>  </tr> \r\n<tr> <td> C.	This item is represented by a character variable that is at most 24 characters in length. </td> <td> </td>  <td> 3.	INT  </td>  </tr> \r\n<tr> <td> D.	Which of the defined database fields can only have 1 of 3 possible values? </td> <td> </td>  <td> 4.	fname  </td>  </tr> \r\n<tr> <td> E.	What is the name of the table? </td> <td> </td>  <td> 5.	student_id  </td>  </tr> \r\n<tr> <td>  </td> <td> </td>  <td> 6.	type  </td>  </tr> \r\n<tr> <td>  </td> <td> </td>  <td> 7.	pkey  </td>  </tr> \r\n<tr> <td>  </td> <td> </td>  <td> 8.	scores </td>  </tr> \r\n</tbody>\r\n</table>    \r\n\r\n<ul>\r\n<li> SQL files can have long lines.  To have a clearer view of the data, make your SSH terminal window wide enough to avoid lines being hidden at the end or wrapping. \r\n<li> A Linux command that we have learned in e01/q10 may help. \r\n<li> Use q01/a01.txt to record your answers. </ul>     ', 'Data Management 1', '', '', 'Know your data', 0),
(1034, 'homework', 6, 1, '                 <ul>\r\n<li> Use the h06/q01 directory to complete this question. </ul>\r\n\r\n<p> To complete this question, you will be asked to setup a new MySQL database account just for use on your homework assignments.  To do this, you will need to know the root password for MySQL that you and your lab partner created earlier.  Once you know the root password, do the following: \r\n\r\n<table id=tbl_regular>\r\n<thead> <tr> <td style=\"width:55%\"> Step </td>  <td style=\"width:3%\"> </td>  <td style=\"width:42%\"> Enter the following into a01.txt</td> </tr></thead>\r\n<tbody>  \r\n<tr> <td> 1.	Log into mysql as root </td>  <td> </td>  <td>  </td> </tr> \r\n<tr> <td> 2.	Create a unique database to store data for this homework. I suggest you use the name h6db_<b><i>fml</i></b> where fml is replaced by your initials.</td>  <td> </td>  <td> A.	Enter DATABASE_DONE when you have created the new database. </td> </tr> \r\n<tr> <td> 3.	<a href=\"https://dev.mysql.com/doc/refman/5.7/en/create-user.html\">Create a new mysql user account</a> to access the database created above.  It is best if this is unique, so I suggest you use h6_<b><i>fml</i></b> where fml is replaced by your initials.</td>  <td> </td>  <td> B.	Enter USER_DONE when you have created a new mysql user for managing your database</td> </tr> \r\n<tr> <td> 4.	<a href=\"https://dev.mysql.com/doc/refman/5.7/en/grant.html#grant-overview\">Grant all privileges</a> to this user for your database. </td>  <td> </td>  <td> C.	PRIVILEGES_DONE</td> </tr> \r\n<tr> <td> 5.	Verify that you can access mysql using the new username and password. </td>  <td> </td>  <td> D.	ACCESS_DONE</td> </tr> \r\n<tr> <td> </td>  <td> </td>  <td> E.	Enter DONE when you have completed all the steps</td> </tr> \r\n\r\n\r\n</tbody>\r\n</table>\r\n\r\n<p> Here below are some sample queries for creating a new database and user as required for this assignment â€“ you must log in as <b>root</b> to perform the tasks: \r\n\r\n<pre>\r\nmysql> CREATE DATABASE h6db_fml;		### remember to change fml to your initials\r\nQuery OK, 1 row affected (0.02 sec)\r\n\r\nmysql> CREATE USER \'h6_fml\'@\'localhost\' IDENTIFIED BY \'<i>NewUserPassword</i>\';\r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\nmysql> USE h6db_fml;\r\nDatabase changed\r\n\r\nmysql> GRANT ALL ON h6db_fml.* to \'h6_fml\'@\'localhost\';\r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\nmysql> quit; \r\n</pre> </p>\r\n\r\n<ul>\r\n<li> Use a01.txt to record your progress.  \r\n<li> The checking for this problem does not check that you have done this correctly, it simply verifies that you have entered something into items A-E.   It is not checking to see if the username, password, and database work properly â€“ that will be done in questions 2 through 5. </ul>       \r\n\r\n<hr>\r\nNote that using standard syntax to quote username and hostname is a good practice, although in the MySQL 5.7 manual (section <a href=\"https://dev.mysql.com/doc/refman/5.7/en/account-names.html\">6.2.3 Specifying Account Names</a>) it is stated that account names do not have to be quoted when used in SQL statements of  CREATE USER, GRANT, and SET PASSWORD:\r\n<ul>\r\n<li> Account name syntax is \'user_name\'@\'host_name\'.\r\n\r\n<li> An account name consisting only of a user name is equivalent to \'user_name\'@\'%\'. For example, \'me\' is equivalent to \'me\'@\'%\'.  (### when we create a <b><i>username</i>@%</b>, it means this <i>username</i> will connect to this database from any hosts; whereas when we create a <i>username</i>@localhost, this user can only connect to the database from the local host.)\r\n\r\n<li> The user name and host name <b>need not be quoted if they are legal as unquoted identifiers</b>. Quotes are necessary to specify a user_name string containing special characters (such as space or -), or a host_name string containing special characters or wildcard characters (such as . or %); for example, \'test-user\'@\'%.com\'.\r\n\r\n<li> Quote user names and host names as identifiers or as strings, using either backticks (`), single quotation marks (\'), or double quotation marks (\"). For string-quoting and identifier-quoting guidelines, see Section 9.1.1, â€œString Literalsâ€, and Section 9.2, â€œSchema Object Namesâ€.\r\n\r\n<li> The user name and host name parts, if quoted, must be quoted separately. That is, write \'me\'@\'localhost\', not \'me@localhost\'; the latter is actually equivalent to \'me@localhost\'@\'%\'.\r\n</ul>    ', '', '', '', 'Create DB and user', 0),
(1035, 'homework', 7, 1, '     <ul>\r\n<li> NOTE:  The following questions refer to the data stored in the sales database created in lab activity 4.   \r\n<li> Complete this problem within the q01 directory of homework 7.   \r\n<li> Use q01/a01.txt to record your answers.\r\n</ul>\r\n\r\n<p> The commands on the left should be matched with their results on the right.  \r\n\r\n<table id=tbl_regular>\r\n<thead> <tr> <td> Question </td> <td> Possible Answers </td> </tr> </thead>\r\n<tbody>\r\n<tr><td> A.	mysql â€“u salesmgr -p<i>password</i> </td> <td> 1.	Attempts to use test.sql as input to mysql (assuming you can log in as shown) </td> </tr> \r\n<tr><td> B.	USE sales;</td> <td> 2.	logs into mysql as user salesmgr (provide password in Linux command line) </td> </tr> \r\n<tr><td> C.	SELECT COUNT(*) FROM sales.agents LIMIT 10; </td> <td> 3.	Displays the first ten records (rows) of the agents table in the sales database </td> </tr> \r\n<tr><td> D.	DESCRIBE agents; </td> <td> 4.	logs into mysql as user salesmgr (provide correct password in mysql command line) </td> </tr> \r\n<tr><td> E.	mysql â€“u salesmgr -ppasswd  < test.sql </td> <td> 5.	Shows the data field names and types contained in the table sales.agents </td> </tr> \r\n<tr><td> </td> <td> 6.	Choose sales as the working database. </td> </tr> \r\n<tr><td> </td> <td> 7.	Displays all the records (rows) of the agents table in the sales database </td> </tr> \r\n<tr><td> </td> <td> 8.	None of the above </td> </tr> \r\n\r\n</tbody>\r\n</table>     ', '', '', '', '', 0),
(1036, 'homework', 8, 1, ' ', '', '', '', '', 0),
(1037, 'homework', 9, 1, ' ', '', '', '', '', 0),
(1038, 'homework', 10, 1, ' ', '', '', '', '', 0),
(1040, 'exam', 3, 0, '', '', 'exam3', '', '0', 1),
(1041, 'exam', 1, 1, '     <ul>\r\n<li> (3 points): Answer this question in directory ~/class/e01/q01- file a01.txt </ul>\r\n\r\n<p> You are starting in the directory /home/user/class/data on your computer.  The diagram below shows the location of all of the files (remember: directories are files, too) in the e01 directory.  The names of the files A-F are missing in the diagram.\r\n\r\n<p> All of the following Linux commands execute without error.  Based on this information and the information displayed in the diagram below, identify the file names for the files labeled A through G in the diagram below.  \r\n\r\n<ul>\r\n<li> Use the relative pathnames based on the directory containing the files in order to identify the files.  <p>For example: if you think that the full pathname of the file in location E____ is /home/user/class/data/codes/dir1, then your answer would be dir1.\r\n<li>Enter your answers in a01.txt. </ul>\r\n\r\n<p> The 5 commands below do not produce any error messages when run:\r\n<pre>\r\ngrep  -i  happy  public/samples/city.txt\r\ncat  public/samples/country.txt\r\ncp publc/scripts/*.sh version1\r\nwc -l public/scripts/count.sh \r\ndiff project/scripts/main.sh  project/new/base.sh\r\n</pre>\r\n\r\n<img src=\"../images/e01_1_1.png\" height=265>             ', '', '', '', 'Linux File System', 0),
(1042, 'exam', 1, 2, '    <ul>   \r\n<li>(3 points): Answer this question in directory ~/class/e01/q02- file a02.txt </ul>\r\n\r\n<p> In the directory /home/user/class/e01/q02 on your computer, you will find a single tar file - q02files.tar.  The tar file contains 4 files (happy.txt, sad.txt, fun.txt and joy.txt).  Extracting the contents of the tar file should create three directories and place the above files in them as shown in the figure immediately below.  \r\n\r\n<img src=\"../images/e01_2_1.png\" height=225>\r\n\r\n<p> For this question, create the directory structure shown in the diagram below with the files in the tar file extracted and move to the appropriate directory.\r\n\r\n<img src=\"../images/e01_2_2.png\" height =375>\r\n\r\n<ul>\r\n<li> Note the files in bold boxes are directories.  \r\n<li> Enter DONE as the answer to part A in the file a02.txt when you are done. </ul>    ', '', '', '', 'Manipulating files in Linux', 0),
(1043, 'exam', 1, 3, '    <ul>\r\n<li> (5 points): Answer this question in directory ~/class/e01/q03, file a03.txt </ul>\r\n\r\n<p> There are 5 specific stages in the ITIL information services lifecycle.  Match the numbers of the descriptions provided on the right with the names of the stages on the left.  \r\n<ul> \r\n<li> Enter your answers in a03.txt.  \r\n<li> Numbers may appear more than once or not at all. </ul>\r\n   \r\n<table id=tbl_regular>\r\n<thead> <tr> <td style=\"width:35%\"> Lifecycle stage name </td> <td style=\"width:5%\"> </td> <td style=\"width:60%\"> Possible ITIL lifecycle stage descriptions </td> </tr> <thead>\r\n<tbody>\r\n<tr> <td> A.	Service Transition </td> <td> </td> <td> 1. This is not really an ITIL stage, the instructor just made up the name to fool me.  It didnâ€™t work. </td> </tr>\r\n<tr> <td> B.	Service Benefits </td> <td> </td> <td> 2. This stage of the service lifecycle includes building, testing and implementing the production system; taking the system from design to operations. </td> </tr>\r\n<tr> <td> C.	Service Design </td> <td> </td> <td> 3. This stage of the service lifecycle creates the plan for creating new and changed services.  It includes creating the specifications of the requirements, technology, architecture and processes required to provide the services. </td> </tr>\r\n<tr> <td> D.	Service Specification and Requirements </td> <td> </td> <td> 4. This stage of the service lifecycle creates a basic understanding of who the IT customers are, the general service offerings that are required to meet the customersâ€™ needs, the IT capabilities and resources that are required to develop these offerings, and the standards for successful delivery of the services.</td> </tr>\r\n<tr> <td> E.	Service Project Management </td> <td> </td> <td> 5. This stage of the lifecycle overlaps with all other stages and describes a mechanism for the IT organization to measure and improve the service levels, technology and processes used to provide the service. </td> </tr>\r\n<tr> <td> F.	Continual Service Improvement </td> <td> </td> <td> 6. This stage of the service lifecycle includes delivering the service on an ongoing basis and overseeing the daily overall health of the service. </td> </tr>\r\n<tr> <td> G.	Service Success </td> <td> </td> <td> </td> </tr>\r\n<tr> <td> H.	Service Cost </td> <td> </td> <td> </td> </tr>\r\n<tr> <td> I.	Service Operation</td> <td> </td> <td> </td> </tr>\r\n<tr> <td> J.	Service Strategy</td> <td> </td> <td> </td> </tr>\r\n\r\n\r\n\r\n</tbody>\r\n</table>          ', '', '', '', 'ITIL information service lifecycle', 0),
(1044, 'exam', 1, 4, ' <ul>\r\n<li> (5 points): Answer this question in directory ~/class/e01/q04, file a04.txt \r\n</ul>\r\n\r\n<p> Create a file named q04.sh that does the following: \r\n\r\n<ol>\r\n<li> Creates 3 aliases named <b>rfs</b>, <b>ims</b> and <b>chs</b> respectively that use <c>grep</c> or <c>wc</c> to:\r\n    <ol class=lower_case> \r\n        <li> Find and display all of the lines containing href (disregard case) in a file.\r\n        <li> Find and display all of the lines containing jpg or jpeg (indepedent of case) in a file. \r\n        <li> Find and displays the size of the file in characters, followed by the filename. \r\n    </ol>\r\n<li> Defines an environment variable called CROOT that contains the path to your /home/username/class directory.  (You may use the envrionment variables $HOME to achieve this purpose)\r\n<li> Defines an environment variable call EXAM1 that contains the path to your /home/username/class/e01 directory. \r\n</ol>\r\n\r\n<ul>\r\n<li> <c>source</c> the program using the source command once you have completed it.  (This is a definition file, not an executable, so we don\'t need the shebang line or to <c>chmod</c> it.)\r\n</ul>\r\n	<pre> source q04.sh  </pre>\r\n\r\n<ul> \r\n<li> The files t1.html, t2.html, t3.html, and t4.html have been provided for testing purposes.  \r\n<li> The file check04.sh has been provided to help you check your progress.\r\n<li> Enter the answer DONE in a04.txt when you are done with the script. </ul>\r\n               ', '', '', '', 'Customizing Environment', 0),
(1045, 'exam', 1, 5, '       <ul>\r\n<li> (5 points): Answer this question in directory ~/class/e01/q05, file a05.txt </ul>\r\n\r\n<p> Assuming the file q05 contains the directory structure shown below: \r\n\r\n<img src=\"../images/e01_5_1.png\" height=500>   \r\n\r\n<ul> \r\n<li> Using the values in the table below, match the relative file names labeled A. through H. with the corresponding full pathnames labeled 1-8.  \r\n<li> Assume that \r\n    <ul> \r\n        <li> you logged in with username <i>user</i>, \r\n        <li> your home directory is /home/<i>user</i>, and \r\n        <li> your current working directory for all parts of the question is ~/class/e01/q05/data.  </ul> \r\n<li> Enter your answers in a05.txt.\r\n</ul>\r\n\r\n<table id=tbl_regular>\r\n<tr> <td> A.	.  </td> <td> </td> <td> 1.	/home/user/class/e01 </td> </tr>\r\n<tr> <td> B.	 ../python </td>  <td> </td>  <td> 2.	/home/user/class/e01/q05/data</td> </tr>\r\n<tr> <td> C.	 cars/2015/new.dat </td>  <td> </td>  <td> 3.	/home/user/class/e01/q05/python </td> </tr>\r\n<tr> <td> D.	 ../shell/all.sh </td>  <td> </td>  <td> 4.	/home/user/class/e01/q05/data/cars/2015/new.dat </td> </tr>\r\n<tr> <td> E.	../../q05/html/cities.html </td>  <td> </td>  <td> 5. home/user/class/e01/q05/data/cars/2015/new.dat </td> </tr>\r\n<tr> <td> F.	 .. </td>  <td> </td>  <td> 6.	/home/user/class/e01/q05/shell/all.sh </td> </tr>\r\n<tr> <td> G.	~/class/e01 </td>  <td> </td>  <td> 7.	/home/user/class/e01/q05/html/cities.html </td> </tr>\r\n<tr> <td> H.	../data/cars/2015/new.dat</td>  <td> </td>  <td> 8.  None of the above full pathnames match </td> </tr>\r\n\r\n\r\n</table>     ', '', '', '', 'Linux Pathnames', 0),
(1046, 'exam', 1, 6, '    <ul>\r\n<li>   (4 points):  Answer this question in directory ~/class/e01/q06, file a06.txt </ul>\r\n<p> The directory ~/class/e01/q06 contains four files: in1.html, in2.html, in3.html, and in4.html.  To complete this question, execute the appropriate Linux commands to do the following:\r\n\r\n<ol>\r\n<li> Create a file named hrefs.txt that contains all of the lines from the four files above that contain the string href (independent of case).\r\n<li> 2.	Create a file named pics.txt that contains all of the lines from the above four files that contain either jpg, jpeg or gif file (again independent of case). </ol>\r\n\r\n<ul> \r\n<li> The file check06.sh has been provided to help you check your progress. \r\n<li> When you are done, enter DONE for part A of the a06.txt file.  \r\n<li> Enter the following answers into the a06.txt file for parts B and C: </p>\r\n\r\n<ol class=upper_case>\r\n<li>	DONE\r\n<li>	The number of lines in the hrefs.txt file\r\n<li>	The number of lines in the pics.txt file  </ol>\r\n         ', '', '', '', 'search text and IO redirection', 0),
(1047, 'exam', 1, 7, ' <ul> \r\n<li> (4 points): Answer this question in directory ~/class/e01/q07 - file a07.txt </ul> \r\n\r\n<p> Project management triple constraints express the idea that all projects must successfully balance three critical constraints on all projects.  Put a YES next to the items A-H below for the items which are a part of the triple constraints and a NO next to the items A-H below for the items which are NOT a part of the project manage triple constraints.\r\n\r\n<ul>\r\n<li> Enter your answers in a07.txt.  </ul>\r\n\r\n<ol class=upper_case>\r\n<li> 	Project Execution\r\n<li>		Project Scope\r\n<li>		Project Time\r\n<li>		Project Profit\r\n<li>		Project Charter\r\n<li>		Project Manager\r\n<li>		Project Quality\r\n<li>		Project Awareness\r\n<li>		Project Risk\r\n<li>	Project Cost  </ol>\r\n    ', '', '', '', 'Project Management (PM)', 0),
(1048, 'exam', 1, 8, '  <ul> \r\n<li> (4 points):  Answer this question in directory ~/class/e01/q08 - file a08.txt </ul>\r\n\r\n<p> Using the directory ~/class/e01/q08 create a script called <c>q08.sh</c> that \r\n<ul> \r\n<li> reads two parameters from the command line for two files, and then \r\n<li> use <c>wc</c> to output the number of characters in each file to the terminal in the following formats:\r\n<pre>\r\n\r\n     The character lengths are requested for filename1 and filename2\r\n     ###1   filename1\r\n     ###2   filename2\r\n\r\n</pre>\r\n<p> where ###1 is the number of characters in filename1 and ###2 is the number of characters in filename2.  </ul>\r\n\r\n<ul>\r\n<li> The file check08.sh has been provided to help you check your progress.  \r\n<li> Enter DONE for part A in the a08.txt file. </ul>\r\n  ', '', '', '', 'Positional Parameter and Word Count', 0),
(1049, 'exam', 1, 9, '            <ul>\r\n<li> (5 points): Answer this question in directory ~/class/e01/q09 - file a09.txt </ul>\r\n\r\n<p> In the directory ~/class/e01/q09, create a script called q09.sh that \r\n<ul> \r\n<li> reads a filename as the result of user input, \r\n<li> lets you know if the file exists or not and if the file exists,\r\n<li> outputs the filename and the number of times the word â€œgoodâ€ is present in the file whose name was entered.  </ul>\r\n\r\n<ul>\r\n<li> There are two files (s1.txt and s2.txt) that you can use for testing.  </ul>\r\n\r\n<p> To do this your script must:\r\n<ol> \r\n<li>	Prompt for and read a filename from the terminal\r\n<li>	Print a message stating whether the file exists or not (such as â€œFile existsâ€ or â€œFile does not existâ€\r\n<li>	If the file does not exist, your program should exit gracefully.\r\n<li> If the file does exist, you output the filename followed by the number of times the word â€œgoodâ€ (ignore case and as a word rather than substring) is mentioned in the file.  For example: \r\n<pre>\r\n     s1.txt   17\r\n</pre>\r\n</ol>\r\n\r\n<ul>\r\n<li> To print two separate elements in the same line, <c>echo</c> with an <c>-n</c> option may help.  \r\n<li> The file check09.sh has been provided to help you check your progress.  \r\n<li> Enter DONE for part A in the a09.txt file. </ul>\r\n\r\n               ', '', '', '', 'User input, file test, & grep', 0),
(1050, 'exam', 1, 10, '      <ul> \r\n<li> (5 points): Answer this question in directory ~/class/e01/q10 - file a10.txt </ul>\r\n\r\n<p> In the directory ~/class/e01/q10, create a script called q10.sh that accepts three positional parameters (command line parameters) containing three file names.  Your program should:\r\n\r\n<ol>\r\n<li>	 Print a message to the terminal letting the user know if each of the files exists or does <b>not</b> exist.  (Use the word \"<b>not</b>\" in each of the checks you intend to say non-existent.  Additional outputs may cause check script issues.)\r\n<li>	For <b>each</b> file that exists, your script should output the first five lines of the file to a new file called headers.txt (when done, headers.txt will contain either 0, 5, 10 or 15 lines).  \r\n<li id=none> Note:  the Linux command <c>head</c> allows you to print a specified number of lines from the start of a file.\r\n<li>	headers.txt should be created even if none of the files provided on the command line exists.  (In the case of no files exist, the content of headers.txt should be empty.  Not even a new line.) </ol>\r\n\r\n<p> There are four files provided to help you test your script (s1.txt, s2.txt, s3.txt, and s4.txt).\r\n\r\n<ul>\r\n<li> It is suggested that you perform a file check for headers.txt and then use a for loop for file existence check and search and I/O redirection. \r\n<li> The file check10.sh has been provided to help you check your progress. \r\n<li> Enter DONE for part A in the a10.txt file. </ul>              ', '', '', '', 'Positional Parameter & IO redirection', 0),
(1051, 'exam', 1, 11, ' <ul>\r\n<li> (3 points):  Answer this question in directory ~/class/e01/q11 - file a11.txt </ul>\r\n\r\n \r\n<p> Identify the following statements as either TRUE or FALSE.\r\n\r\n<ol class=upper_case> \r\n<li>	According to the IT Infrastructure Library, providing information services requires acquiring the most up to date computers, raid storage and networking equipment an organization can afford.\r\n<li>	The goal of project management is to provide a comprehensive, step-by-step blueprint that anyone could use to complete the project.\r\n<li>	Agile Project Management is preferred over Traditional Project Management approaches when everyone involved understands the projectâ€™s requirements and how to achieve them.\r\n<li>	Project management provides best practices for time-limited activities and not ongoing operations.\r\n<li>	ITIL provides best practices for time-limited activities and not ongoing operations.\r\n<li>	ITIL best practices are designed to keep information service costs low and higher quality.\r\n<li>	If you use project management approaches to Service Transitions, you donâ€™t need to use the Continual Service Improvement stage of ITIL. </ol>\r\n\r\n<ul> <li> Enter your answers in a11.txt. </ul>\r\n    ', '', '', '', 'ITIL and PM', 0),
(1052, 'exam', 1, 12, '    <ul> \r\n<li> (4 points):  Answer this question in directory ~/class/e01/q12 - file a12.txt </ul>\r\n\r\n<p> For each of the described actions below (left-hand column), identify the number of the command in the right-hand column that will complete the described actions. <p>\r\n\r\n<table id=tbl_regular>\r\n<thead> <tr> <td style=\"width:5%\">   </td> <td style=\"width:35%\"> Action Description  </td>   <td style=\"width:60%\"> Possible commands  </td>  </tr> <thead>\r\n<tbody>\r\n<tr>  <td> A  </td> <td> Combines the contents of all of the files within a given directory ending in txt into one file called â€œEVERYTHINGâ€  </td>   <td> <ol> <li> cat  *.txt > EVERYTHING  <li>  ls    *.txt > EVERYTHING </ol>\r\n  </td>  </tr>\r\n<tr> <td> B   </td> <td> Copies the directory myfiles and all of its contents from your home directory into the home directory of the user â€œsallyâ€  </td>   <td>  <ol> <li> cp  -r  /home/sally   /home/myfiles\r\n<li> cp  -r  ~/myfiles   /home/sally <li> cp  -r  ~/myfiles    ~/sally <li> 	cp  â€“r   ~/sally   ~/myfile  </ol> </td>  </tr>\r\n<tr> <td> C   </td> <td> Executes the script schedule.sh in the current directory using the parameters â€œOctoberâ€ and â€œ2018â€  </td>   <td>   <ol><li>  source schedule.sh October 2018 <li>  ./schedule.sh  October 2018 <li>  execute schedule.sh  October 2018 </ol>\r\n  </td>  </tr>\r\n<tr>  <td> D  </td> <td> Prints the number of lines in the file long.txt that contain both the words long and story, but not the word boring. </td>   <td> <ol> <li> grep -i long long.txt | grep -i story | grep -i boring | wc -l  <li>  grep -i long long.txt | grep -i story | grep -iv boring | wc -l  </ol>\r\n  </td>  </tr>\r\n\r\n</tbody>\r\n</table>   \r\n\r\n<ul>\r\n<li>  Enter your answers in a12.txt. </ul> ', '', '', '', 'bash commands', 0),
(1053, 'homework', 5, 2, '           <p> Using the information in the <b>insert_data.txt</b> file, </p>\r\n<ul id=check>\r\n<li> construct the appropriate combination of <c>grep</c> and <c>wc</c> commands to answer the following questions: </ul>\r\n\r\n<ol class=upper_case>\r\n<li>	How many quiz scores are recorded in this dataset? \r\n<li>	How many times did a student score a 10 on one of the quizzes (count every occurrence of a student scoring a 10 - when a particular student scores a 10 on two quizzes both scores should be counted)? \r\n<li>	How many students scored a 35 on exam 3? \r\n<li>	How many students have a score for exam 1? \r\n<li>	On how many quizzes did EMMA JOHNSON score a 6? \r\n</ol>\r\n\r\n<ul>\r\n<li> Use q02/a02.txt to record your answers. \r\n<li> ### I\'d first issue commands like \"<c>head -n 50 insert_data.txt</c>\" to get a good sense of how this dataset looks like. \r\n<li> ### After I know how this dataset looks like, I\'d then expore the search by issuing a command like \"<c>grep -n -m 20 \", TYPE=QU,\" insert_data.txt</c> to see the grep results.  <c>-n</c> gives us <b>line numbers</b> and <c>-m</c> gives us the maximum number of results to show. \r\n<li> NOTE: This question uses the same insert_data.sql and insert_data.txt files as referenced in Question 1.   </ul>\r\n\r\n        \r\n<hr>\r\n<p> Note: If you are really meticulous about question D., you were probably thinking about how to make sure the integer string characters after SCORE= being existent or not.  We know that we all work with data that we do not generate by ourselves, so there\'s no way of knowing that\'s true or not and in most cases we simply are not able to manually examine the data because there are too many entries to go through.  \r\n<p> In this case, we may use regular express (REGEX) to help.  When we grep using \", TYPE=EX, ITEM_ID=1, SCORE=<c>[0-9]</c>\", we are making sure that there are integer(s) after SCORE=.  In this question, we will get the same answer as when not using the [0-9] regular expression, but this technique can come handy from time to time in the future.     ', 'Data Management 1', '', '', 'grep for Patterns: .txt', 0),
(1054, 'homework', 5, 3, '   <p> Using the information in the <b>insert_data.sql</b> file, \r\n<ul id=check> \r\n<li> onstruct the appropriate combination of <c>grep</c> and <c>wc</c> commands to answer the following questions: </ul>\r\n\r\n<ol class=upper_case>\r\n<li> How many homework scores are recorded in this dataset? \r\n<li> How many times did a student score a 4 on one of the homework assignments (count every occurrence of a student scoring a 4 -  when a particular student scores a 4 on two different homework assignments both scores should be counted)? \r\n<li> How many students scored a 9 on quiz 3?\r\n<li>	What is the student id for the entry with a primary key of 169?\r\n<li>	On how many homework assignments did ERIC HARRISON score a 5? </ol>\r\n\r\n<ul>\r\n<li> Use q03/a03.txt to record your answers. \r\n<li> NOTE: For this question use the same insert_data.sql and insert_data.txt files as referenced in Question 1.  </ul>\r\n\r\n\r\n<hr>\r\n<p> Note: But, in question A., how do we know if there are some rows/entries/lines that were not accounted for?  The <c>-v</c> option in <c>grep</c> may prove to be convenient.  We can issue the same grep expression, only this time with an addition -v option.  We can use this technique to see what were not searched for.  In this question, you should see that the top two lines are SQL commands and they are the only two lines that we did not include in our early search.  We can then run another grep query to look for the total number of lines (or simply do <c>wc -l <i>file</i></c>).  The first and second grep should add up to the 3rd grep. \r\n         ', 'Data Management 1', '', '', 'grep for Patterns: .sql', 0),
(1055, 'homework', 5, 4, '<ul id=check> \r\n<li> Create a script in q04/q04.sh that: \r\n   <ul id=circle> \r\n        <li> accepts a lâ€ist of first and last name of students as from a file (the file name is specified by the single input positional parameter) and \r\n        <li> prints out some initial header information (the studentâ€™s name) followed by all of each studentâ€™s scores on 1) all of the homework assignments, then 2) all the quizzes, and finally 3) all of their exams using the same format as contained in insert_data.txt.  </ul></ul> \r\n\r\n<p> For example, the file lâ€â€ist.dat contains the names of four students (one per line).  So the command:  \r\n<pre>  ./q04.sh  lâ€â€ist.dat </pre>\r\n<p> will print out the 21 entries each of the four students, the last of which looks something like the following:\r\n<pre>\r\n  STUDENT=MADISON WILLIAMS\r\n  HOMEWORK SCORES\r\n  ------------------------------------------\r\n  PKEY=43, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=1, SCORE=3\r\n  PKEY=44, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=2, SCORE=4\r\n  PKEY=45, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=3, SCORE=4\r\n  â€¦ etc. â€¦\r\n  QUIZ SCORES\r\n  ------------------------------------------\r\n  PKEY=54, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=QU, ITEM_ID=1, SCORE=10\r\n  PKEY=55, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=QU, ITEM_ID=2, SCORE=6\r\n\r\n  â€¦ etc. â€¦\r\n  EXAM SCORES\r\n  ------------------------------------------\r\n  PKEY=62, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=EX, ITEM_ID=2, SCORE=33\r\n  PKEY=63, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=EX, ITEM_ID=3, SCORE=27\r\n</pre>\r\n\r\n<ul>\r\n<li> To make the output more readable, put a blank line between each studentâ€™s records.\r\n<li> If the filename provided is blank or does not exist, print an error message and exit.\r\n<li> NOTE: This question uses the same insert_data.sql and insert_data.txt files as referenced in Question 1.  </ul>\r\n               ', 'Data Management 1', '', '', 'looping: Nested', 0),
(1056, 'homework', 5, 5, '    <ul id=check> \r\n<li> Create a script in q05/q05.sh that accepts </ul>\r\n<ul>\r\n<li> a <b>flag</b> (one of H, Q or E as in Homework, Quiz, and Exam) and\r\n<li> a <b>number</b> \r\n<li id=none> as positional (command line) parameters and prints out the following: </ul>\r\n\r\n<ol>\r\n<li>	the number of homework assignments, quizzes or exams with that score found in insert_data.txt, and\r\n<li>	the number of homework assignments, quizzes or exams with that score found in insert_data.sql \r\n</ol> \r\n\r\n<p> Running the command\r\n<pre> ./q05.sh E 35</pre>\r\n<p> should produce output that looks something like the following:\r\n<pre>\r\n (TXT) Exam score = 35 count = 45 \r\n (SQL) Exam score = 35 count = 45\r\n</pre>\r\n<p> An example of all students getting a 5 from homework would look like this:\r\n<pre>\r\nchen_user@vma50:~/class/h05/q05$ ./q05.sh H 5\r\n(TXT) Homework score = 5 count = 940 \r\n(SQL) Homework score = 5 count = 940 \r\nchen_user@vma50:~/class/h05/q05$ </pre>\r\n\r\n<ul>\r\n<li> The word â€œExamâ€ should be replaced by â€œHomeworkâ€ or â€œQuizâ€ as the flag changes. \r\n<li> Running the command without one of the E, H or Q options should result in a one-line error message.\r\n<li id=none> NOTE: This question uses the same insert_data.sql and insert_data.txt files as referenced in Question 1.   </ul>\r\n              ', 'Data Management 1', '', '', 'Data Quality Control', 0),
(1057, 'homework', 6, 1, ' test', '', '', '', '', 0),
(1058, 'homework', 6, 2, '              <ul>\r\n<li> Use the h06/q02 directory to complete this question. </ul>\r\n\r\n<p> Our objectives here in this question involve the two files createdb.bak and q02.bak  in the directory q02:\r\n<ul>\r\n<li> The createdb.bck file contains the SQL statements needed to insert data into the database you created in Question 1, but it does not have the correct database name for this problem.   \r\n<li> The file q02.bak contains a script that can be used to put the data into the database, but it contains the wrong MySQL username and password.  </ul>\r\n\r\n<p> To complete this question, you will need to modify both createdb.sql and q02.sh so that the SQL statements access your unique database using your unique MySQL account and password.  The following steps are suggested:\r\n\r\n<ul id=none>\r\n<li> Step 1: Copy createdb.bak to createdb.sql.  Then use the <c>chmod</c> command on createdb.sql so you can modify createdb.sql (the <c>+w</c> option can achieve this and we have used it several times).\r\n<li> Step 2: Modify createdb.sql so that line 1 of that file references the database you created in question 1.\r\n<li> Step 3: Copy q02.bak to q02.sh.\r\n<li> Step 4: Modify q02.sh so that lines 3 and 4 reference the MySQL username and password you created for part 1.  (Note that in the last line of this script we use I/O redirections with the mysql syntax <c>mysql -u $user -p$pass < createdb.sql > q02.txt</c> to <b>run the queries and generate output file in Linux command line</b>. \r\n<li> Step 5: Run q02.sh and verify that it a) runs without errors and b) creates the file q02.txt.  The q02.txt file should be created when you run q02.sh. </ul>\r\n\r\n<ul>\r\n<li> When you have completed this script, enter DONE in response to part A in the file a02.txt. </ul>\r\n              ', '', '', '', 'Insert Data', 0),
(1059, 'homework', 6, 3, '           <ul>\r\n<li> Use the h06/q03 directory to complete this question. </ul>\r\n\r\n<p> Create a script in q03.sh that \r\n<ul>\r\n<li> runs MySQL using the user and password you created in question 1 and \r\n<li> displays the results of the <c>SHOW DATABASES</c>, <c>SHOW TABLES</c>, and <c>DESCRIBE <i>students</i></c> commands (statements) for the database you created in questions 1 and 2.  </ul>\r\n\r\n<p> This script should not require external user input or command line parameters.  You will need to create a MySQL input file, q03.sql, that contains the appropriate USE, SHOW and DESCRIBE commands (MySQL keyword statements).  You should be able to run it within your script using the following syntax:\r\n<pre>\r\n    mysql -u $user -p$pass < q03.sql </pre>\r\n\r\n<ul>\r\n<li> To check the results of your script, you can log into the mysql command line from the q03 directory, and then issue <c>source q03.sql</c>.  You should see the same results (in a slightly different format) and confirm that the SQL statements work the same when running by a script instead of inside mysql command line. \r\n<li> When you have completed this script, enter DONE in response to part A in the file a03.txt. </ul>\r\n           ', '', '', '', 'MySQL commands', 0),
(1060, 'homework', 6, 4, '   <ul>\r\n<li> Use the h06/q04 directory to complete this question. </ul>\r\n\r\n<p> Based on the data contained in your database, answer the following questions:\r\n<ol class=upper_case>\r\n<li>	How many students have the first name of John?\r\n<li>	How many students are 3rd year students (year = 3)?\r\n<li>	How many students have GPAâ€™s over 2.6?\r\n<li>	How many students are female? (gender 1 = female, 2=male)\r\n<li>	How many students are female and have a GPA over 3.1? </ol>\r\n\r\n<ul>\r\n<li> Use a04.txt to record your answers. </ul>\r\n   ', '', '', '', 'Write MySQL queries ', 0),
(1061, 'homework', 6, 5, '          <ul>\r\n<li> Use the h06/q05 directory to complete this question. </ul>\r\n\r\n<p> Create a script in q05.sh.  When run, the script should create a file called q05.sql that contains all of the SQL statements needed to determine information about studentsâ€™ gender and year.  The requested information varies depending on the values of a single command line (positional) parameter ($1).  The command line parameter is a flag (either: Y or G) that determines if you are seeking information on the distribution of students by year (Y) or by gender (G).  Based on the value of the command line parameter, the script should write out the SQL statements needed to provide the information described below: \r\n<ul>\r\n<li> Independent of the parameter provided, the script should begin with:\r\n    <ul> \r\n    <li> the appropriate â€œUSE <i>database</i>â€ statement and \r\n    <li> an SQL select statement that determines the total number of students in the database.  \r\n    </ul>\r\n<li> Command line parameter = Y: \r\n<p> The script should generate the SQL statements needed to determine the number of students in your database who are in their 1st, 2nd, 3rd, ...etc. year.  This requires that the script create one SQL statement for each year between 1 and 6.\r\n<li> Command line parameter = G:  \r\n<p> The script should generate the SQL statements needed to determine the number of students in your database of each gender.  This requires that the script creates one SQL statement for each gender (1 = female, 2=male).\r\n<li> Any other command line parameter (not Y or G):  \r\n<p> The script should generate an error message <b>and</b> delete the output file. </ul>\r\n\r\n<p> For example, running the command\r\n<pre>\r\n    ./q05.sh Y </pre>\r\n<p> should produce screen output that looks something like the following:\r\n<pre>\r\n    USE your-database;\r\n    SELECT COUNT(*) FROM students;\r\n    SELECT COUNT(*) FROM students WHERE year=1;\r\n    SELECT COUNT(*) FROM students WHERE year=2;\r\n    ...\r\n    ...\r\n</pre>\r\n<ul>\r\n<li> When you have completed this script, you can use check05.sh to check it.\r\n<li> Enter DONE in response to part A in the file a05.txt when you are sure your answers are correct. </ul>\r\n          ', '', '', '', 'Generate SQL statements from script', 0),
(1062, 'homework', 5, 0, ' ', 'Data Quality Control', '', '', '', 0),
(1064, 'lab', 4, 1, '  <p> \r\n<ul>\r\n<li> This process must be completed as a Linux system administrator, so you will have to use your administratorâ€™s account to complete this part of the lab.  \r\n<li> You will <a href=\"https://dev.mysql.com/doc/refman/8.0/en/resetting-permissions.html\">reset the MySQL root password</a> on your system and make sure it works properly.  </ul>\r\n\r\n<ol>\r\n<li> Determine if mysql is running on your computer.\r\n<p> Use the command <c>ps â€“aef</c>  to view all of the processes running on your computer (there are a lot of them).\r\n<p> Determine if mysql is running using the following command:\r\n	<pre>\r\nps â€“aef | grep mysql </pre>\r\n \r\nYou will see the results as below (the first entry is the mysql service and its binary is mysqld): \r\n<pre>\r\nmysql     1168     1  0 Jan07 ?        00:05:24 /usr/sbin/mysqld\r\nchen_admin 52653 52617  0 22:31 pts/0    00:00:00 grep --color=auto mysql\r\n</pre> \r\n\r\n<li> Use the sudo command to stop the mysql service as follows (note the <c>service</c> command syntax):\r\n<pre>\r\nsudo service mysql stop </pre>\r\n<p> Check to make sure mysql has stopped running using <c>ps -aef | grep mysql</c>.  Now you should not see the mysql service (mysql<b>d</b>, daemon).\r\n\r\n<li>  Next, <b>create and modify</b> a security directory and force mysql into <b>safe mode</b>:\r\n<pre>\r\nsudo mkdir /var/run/mysqld                   ### create directory\r\nsudo chown mysql /var/run/mysqld             ### change directory owner to mysql\r\nsudo mysqld_safe --skip-grant-tables &       ### mysql safe startup script; no password required </pre>\r\n\r\n<p> When you run mysqld_safe, you will see result like below.  \r\n<pre>\r\nchen_admin@vma50:~/class/a04/q01$ sudo mysqld_safe --skip-grant-tables &\r\n[1] 52767\r\nchen_admin@vma50:~/class/a04/q01$ 2019-02-19T03:46:46.662290Z mysqld_safe Logging to syslog.\r\n2019-02-19T03:46:46.678437Z mysqld_safe Logging to \'/var/log/mysql/error.log\'.\r\n2019-02-19T03:46:46.765598Z mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql  </pre>\r\n<p> Hit enter to continue becase <c>&</c> will have the process running in background.\r\n<p> You can check to see what mysql processes are running using <c>ps -aef | grep mysql</c>.\r\nYou should see 4 mysql related processes.  Your output will be similar to the following: \r\n<pre>\r\n<b>root</b>     52767 52617  0 22:46 pts/0    00:00:00 sudo mysqld_safe --skip-grant-tables\r\n<b>root</b>     52768 52767  0 22:46 pts/0    00:00:00 /bin/sh /usr/bin/mysqld_safe --skip-grant-tables\r\n<b>mysql</b>    53128 52768  0 22:46 pts/0    00:00:00 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --skip-grant-tables --log-error=/var/log/mysql/error.log --pid-file=/var/run/mysql\r\nd/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306 --log-syslog=1 --log-syslog-facility=daemon --log-syslog-tag=\r\n<b>chen_admin</b> 53167 52617  0 23:04 pts/0    00:00:00 grep --color=auto mysql\r\n</pre>\r\n<p> This means mysqld (server) is running in safe mode and we now can log in as root without password. \r\n\r\n<li> Access MySQL as the root user, <b>without</b> a password (mysqld is the server, mysql is the command line tool):\r\n<pre>\r\nmysql â€“u root </pre>\r\n\r\n<li> Once you have logged into the MySQL command line as root (note you did not use a password this time because you are in safe mode), you can <a href=\"https://dev.mysql.com/doc/refman/8.0/en/resetting-permissions.html\">reset the MySQL root password</a> to something you can remember using the following MySQL query:\r\n<pre>\r\nUPDATE mysql.user SET authentication_string=PASSWORD(\'<i>NewRootPassword</i>\') WHERE user=\'root\'; \r\n</pre>\r\n\r\n<p> The process looks like this:\r\n<pre>\r\nmysql> USE mysql;\r\nReading table information for completion of table and column names\r\nYou can turn off this feature to get a quicker startup with -A\r\n\r\nDatabase changed\r\nmysql> UPDATE user SET authentication_string = PASSWORD(\'<i>NewRootPassword</i>\') WHERE user = \'root\';\r\nQuery OK, 1 row affected, 1 warning (0.05 sec)\r\nRows matched: 1  Changed: 1  Warnings: 1\r\n\r\nmysql> FLUSH PRIVILEGES;\r\nQuery OK, 0 rows affected (0.01 sec)\r\n\r\n</pre>\r\n\r\n<li> Log out of mysql using <c>quit</c>.  Next, stop mysql safe mode by shutting down mysql and then restart mysql.\r\n<pre>\r\nsudo mysqladmin -u root -p<i>NEWPASSWORD</i> shutdown     ### shut down mysql; no space after -p\r\nsudo service mysql restart	                   ### (restart mysql) </pre>\r\n\r\n<li> Log into mysql command line with the account you just created with your new password to make sure it works:\r\n<pre>\r\nmysql â€“u root â€“p         ### -u, or --user, option means username; -p means password</pre>\r\n<p> Note: You will the socket error if you did not restart mysql:\r\n<pre>\r\nadministrator@vma43:~/class/a04/q01$ mysql -u root -p\r\nEnter password: \r\nERROR 2002 (HY000): Can\'t connect to local MySQL server through socket \'/var/run/mysqld/mysqld.sock\' (2)\r\n</pre>\r\n\r\n<p> Everything goes well, you will get into MySQL command line:\r\n<pre>\r\nType \'help;\' or \'\\h\' for help. Type \'\\c\' to clear the current input statement.\r\n\r\nmysql> \r\n</pre>\r\n<p> Typing <c>exit</c> or <c>quit</c> will get you out of mysql command line. \r\n</ol>\r\n\r\n\r\n<p> To check this part of the assignment:\r\n<ol>\r\n<li>	Change to your class/a04/q01 directory.  \r\n<li>	Edit the file a01.txt using the command nano a01.txt\r\n<li>	Use the arrow keys to move the cursor to the line starting with â€œA.â€\r\n<li>	Enter the word â€œDONEâ€ on the line starting with â€œA.â€.\r\n<li>	Save the file (using Ctrl-X)\r\n<li>	Run the script check01.sh (using  ./check01.sh ) to check your answer </ol>\r\n                                              ', '', '', '', 'MySQL processes and root password', 0);
INSERT INTO `content` (`qid`, `unit_type`, `unit_number`, `question_number`, `question_text`, `unit_title`, `unit_name`, `question_type`, `question_title`, `invisible`) VALUES
(1065, 'lab', 4, 2, '          <ul>\r\n<li> Perform this task as a team </ul>\r\n\r\n<ol>\r\n<li>	Log back into mysql command line as root and\r\n  <ol class=lower_case> \r\n    <li> Create the database sales using your root account,\r\n    <li> <a href=\"https://dev.mysql.com/doc/refman/5.7/en/create-user.html\">Create a mysql user account</a> (salesadmin): for your use as the database administrator, and\r\n    <li> <a href=\"https://dev.mysql.com/doc/refman/5.7/en/grant.html\">Grant</a> this account all privileges on the sales database as follows: \r\n    <li id=none> ##### The single quotes around username, localhost, and password are critical.\r\n\r\n<pre>\r\nCREATâ€ŒE DATABASâ€ŒE sales;\r\nCREATâ€ŒE USEâ€ŒR \'salesadmin\'@\'localâ€Œhost\' IDENTIFIEâ€ŒD BY \'<i>YOUR_PASSWORD</i>\';\r\nUSâ€ŒE saleâ€Œs;\r\nGRANâ€ŒT ALâ€ŒL Oâ€ŒN sales.â€Œ* Tâ€ŒO \'salesadmin\'@\'localâ€Œhost\';\r\nFLUSâ€ŒH PRIVILEGEâ€ŒS;\r\n</pre>\r\n</ol>\r\n\r\n<li>	Create a second MySQL user account (salesmgr) that provides access to the data, but doesnâ€™t have the authority to change the data in the database sales (i.e., grant this user <c>SELECT</c> privileges on all the tables in the database sales).\r\n\r\n<li>	Have your partner verify that s/he can log in to both of the new accounts and have access to the sales database (<c>USE sales; SHOW DATABASES</c> will show only the â€œinformation_schemaâ€ and â€œsalesâ€ databases and <c>SHOW GRANTS </c> will show the appropriate rights for the logged in account).  For example, when logged in MySQL command line as salesadmin, we can check the access privileges by:\r\n<pre>\r\nmysql> USE sales;\r\nmysql> SHOW GRANTS;\r\n+---------------------------------------------------------------+\r\n| Grants for salesadmin@localhost                               |\r\n+---------------------------------------------------------------+\r\n| GRANT USAGE ON *.* TO \'salesadmin\'@\'localhost\'                |\r\n| GRANT ALL PRIVILEGES ON `sales`.* TO \'salesadmin\'@\'localhost\' |\r\n+---------------------------------------------------------------+\r\n2 rows in set (0.00 sec)\r\n</pre>\r\n\r\n<li>	Exit mysql\r\n<p>To check this part of the assignment: </p>\r\n<ol>\r\n<li>	Change to your class/a04/q02 directory.  \r\n<li>	Complete the checklisâ€Œt below (A-F) in the file a02.txt. \r\n<li>	Save the file (using Ctrl-X)\r\n<li>	Run the script check02.sh (using  ./check02.sh ) to check your answer </ol>\r\n</ol>\r\n\r\n<p> Question 2 checklisâ€Œt:\r\n<p>Parts B-F require a one-word answer (YES) when you have completed them.\r\n<ol class=upper_case>\r\n<li>	Enter the word DONE when you have completed Part 2 and each of the following steps.\r\n<li>	Have you shared your MySQL root password with your lab partner? \r\n<li>	Have you shared your salesadmin account password with your lab partner?\r\n<li>	Have you shared salesmgr account password with your lab partner?\r\n<li>	Does the salesadmin account have ALL privileges?\r\n<li>	Does the salesmgr account have SELECT privileges?  \r\n<li>	Have you answered the above question truthfully? \r\n</ol>\r\n                      ', '', '', '', 'Creating MySQL user accounts', 0),
(1066, 'lab', 4, 3, '<ul>\r\n<li> Perform this task as a group. </ul>\r\n<p> We will insert 3 tables into our sales database using tools already made.  Our major task will be checking the basic information in the tables. \r\n <ol>\r\n<li>	Use your ~/class/a04/q03 directory for this part of the lab.\r\n\r\n<li>	Run the Perl script <c>agents.pl</c> provided to read the file agents.txt in the SALESDATA directory.  That program will create the file agents.sql. \r\n\r\n<li>	Next, insert this data into the sales database sales using the following command within mysql command line (i.e., you will first need to log back into mysql as user salesadmin in the same directory where you ran the Perl script.):\r\n<pre>\r\nsource agents.sql;  ### <c>source</c> executes commands in the current shell. \r\n                    ### We have used it when we worked on environment variables and aliases. </pre>\r\n<p> You will see something like:\r\n<pre>\r\n...\r\n...\r\nQuery OK, 1 row affected (0.01 sec)\r\nQuery OK, 1 row affected (0.01 sec)\r\nQuery OK, 1 row affected (0.02 sec)\r\nmysql>\r\n</pre>\r\n<p> If you <c>source</c> this .sql file for more than one time, you will see:\r\n<pre>\r\n...\r\n...\r\nERROR 1062 (23000): Duplicate entry \'D39-20-04\' for key \'PRIMARY\'\r\nERROR 1062 (23000): Duplicate entry \'D39-20-05\' for key \'PRIMARY\'\r\nERROR 1062 (23000): Duplicate entry \'D39-20-06\' for key \'PRIMARY\'\r\nmysql> \r\n</pre>\r\n<li>	The Perl script dealers.pl will read and translate the data contained in SALESDATA/dealerships.txt into two files in the q03 directory:\r\n    <ul>\r\n        <li> dealers.sql, and  \r\n         <li> owners.sql.  </ul>\r\n<p> These two files contain the mysql commands needed to insert data into a table containing the dealers and owners.  Run script <c>dealers.pl</c> so it can create the files dealers.sql and owers.sql.  \r\n\r\n<li>	Insert these two datasets into the sales database using commands like the one in step 3 above to create a dealers and an owners table in your sales database.\r\n<p> You should be able to check this result by:\r\n<pre>\r\nmysql> USE sales;\r\nDatabase changed\r\nmysql> SHOW TABLES;\r\n+-----------------+\r\n| Tables_in_sales |\r\n+-----------------+\r\n| agents          |\r\n| dealers         |\r\n| owners          |\r\n+-----------------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql> \r\n</pre>\r\n\r\n<li>	Check that these tables contain the correct number of dealers and owners and then check a couple of the individual entries by hand by comparing the data in the original data with the data in the database.\r\n<p> Some MySQL keywords such as DESCRIBE, SELECT COUNT(*), and LIMIT can be informative:\r\n<ol class=lower_case>\r\n<li> DESCRIBE:\r\n<pre>\r\nmysql> DESCRIBE owners;\r\n+----------+-------------+------+-----+---------+-------+\r\n| Field    | Type        | Null | Key | Default | Extra |\r\n+----------+-------------+------+-----+---------+-------+\r\n| owner_id | int(11)     | NO   | PRI | NULL    |       |\r\n| fname    | varchar(24) | YES  |     | NULL    |       |\r\n| lname    | varchar(24) | YES  |     | NULL    |       |\r\n+----------+-------------+------+-----+---------+-------+\r\n3 rows in set (0.02 sec)\r\n</pre>\r\n<li> SELECT COUNT(*)\r\n<pre>\r\nmysql> SELECT COUNT(*) FROM owners;\r\n+----------+\r\n| COUNT(*) |\r\n+----------+\r\n|       34 |\r\n+----------+\r\n1 row in set (0.00 sec)\r\n</pre>\r\n<li> LIMIT\r\n<pre>\r\nmysql> SELECT * FROM owners LIMIT 5;\r\n+----------+----------+----------+\r\n| owner_id | fname    | lname    |\r\n+----------+----------+----------+\r\n|        1 | Sally    | Walker   |\r\n|        2 | Ed       | Tipton   |\r\n|        3 | Kelly    | Jones    |\r\n|        4 | Patrick  | Wallace  |\r\n|        5 | Jonathan | Houseman |\r\n+----------+----------+----------+\r\n5 rows in set (0.00 sec)\r\n</pre> \r\n</ol></ol>\r\n\r\n<p> To check this part of the assignment:\r\n<ol>\r\n<li>	Change to your class/a04/q03 directory.\r\n<li>	Answer the questions below in the file a03.txt.\r\n<li>	Run the script check03.sh (using  ./check03.sh ) to check your answer  </ol>\r\n\r\n<p> Questions for Part 3:\r\n<ol class=upper_case>\r\n<li>	How many agents are in the sales database? (### don\'t forget to USE <i>database</i> first)\r\n<li>	How many dealers are in the sales database?\r\n<li>	How many insert statements are in the dealers.sql file?\r\n<li>	How many lines are in the SALESDATA/dealerships.txt file?  </ol>                              ', '', '', '', 'Inserting data into your database', 0),
(1067, 'lab', 4, 4, '            <p> Because we have a lot of data, we will need a process to check the data insertion process. The process will require checking the tables created within MySQL to make sure that they contain the same information as the original text files.  To do that, we need <b>automated</b> ways to compare the data in the text files to the data in your MySQL database.  Since this is a multistep process, it is helpful to check the data after each step.  \r\n\r\n<ol class=upper_case>\r\n<li>	Use your ~/class/a04/q04 directory for this part of the lab.\r\n\r\n<li>	Create links to enable you to access the SALESDATA directory and the agents.sql, dealers.sql, and owners.sql files your created in Part 3.  We create <b>soft (symbolic) links</b> to these files to accomplish this.  The basic command for linking your agents.sql file in your q03 directory to a file with the same name in your q04 directory is:\r\n<pre>ln â€“s ~/class/a04/q03/agents.sql agents.sql </pre>\r\n\r\n<p> Once you have entered the above command, you can use the file agents.sql as if it were located in your q04 directory.  The only critical difference is that the command <c>rm agents.sql</c> removes the link in the q04 directory, but not the file in the q03 directory since it\'s a soft link to the file.\r\n\r\n<p> Create the link above as a practice, remove the link, and then run the script <c>link_data.sh</c>.  It will create all of the required links for this assignment.\r\n\r\n<li>	Create a script called q04.sh that uses some combination of grep and wc (word count) to:\r\n  <ol class=lower_case>\r\n    <li> <b>Count *.txt</b>: Count the number of agents, dealers, and owners  contained in the initial text data files, i.e., agents.txt and dealerships.txt.  Assume each dealership has a single owner and donâ€™t worry about one person owning multiple dealerships for now. \r\n    <li> <b>Count *.sql</b>: Count the number of agents, dealers, and owners contained in the agents.sql, dealers.sql, and owners.sql files\r\n    <li> <b>Count Alabama</b>: Count the number of dealers in Alabama in your initial text data and sql files.\r\n    <li> <b>Count Walker</b>: Count the number of dealerships owned by someone named Walker in your initial text data and compare it to the number of owners in owners.sql files who have a last name of Walker.  </ol>\r\n</ol>\r\n\r\n\r\n<p>Once you have figured out which combinations of commands provide the correct output, compile them all into the script q04.sh and produce a summary output.\r\n\r\n<p>When you are done, your output should look something like the following:\r\n<pre>\r\n    Initial Data File Counts\r\n	Agents:     DATA = 397  SQL = 397\r\n        Dealers:    DATA = 45   SQL = 45\r\n        Owners:     DATA = 45   SQL = 45\r\n        Alabama:    DATA = 11   SQL = 11\r\n	Walker:     DATA = 2    SQL = 4	\r\n</pre>\r\n\r\n<p> To check part 4 of this assignment:\r\n<ol>\r\n<li>	Change to your class/a04/q04 directory.\r\n<li>	Enter DONE for part A. in the file a04.txt when you are done.\r\n<li>	Run the script check04.sh (using  ./check04.sh ) to check your answer. </ol>\r\n                     ', '', '', '', 'Automating the data checking procedure', 0),
(1068, 'lab', 4, 5, '                           \r\n<p>	Use nano to create a mysql input file (call it q05.sql).  This .sql script will be used to obtain some information from the tables so that we can verify the information in the <b>sales</b> database is correct.  The process used is as follows: \r\n\r\n<ul >\r\n    <li>Step 1: Create SQL statements\r\n<p> Create a file called q05.sql that contains all of the sql statements needed to answer questions A-G below. (donâ€™t forget the <c>USE sales;</c> statement to specify the database to use at the beginning of a .sql file).  \r\n<p>### HINT: A good way to create these SQL statements is to open two SSH terminal windows, run mysql command line in one, and nano editor in the other.  Compose and test your SQL statements using mysql, and then cut and paste them into nano when they are working.\r\n\r\n    <li>Step 2: Run .sql to generate .txt file\r\n<p>Run mysql from the Linux command line, use q05.sql as input and write the output into q05.txt.  This can be done by issue commands in Linux command line as such:\r\n<pre>\r\nmysql -u <i>mysql_username</i> -p<i>mysql_password</i> < q05.sql > <i>output.txt</i>\r\n</pre>\r\n<p> Note that in the command above, we use the MySQL command line tool, mysql, followed by username and password, then we use I/O redirections to input the .sql file and output the .txt file. \r\n </ul>\r\n\r\n\r\n<p> The q05.sql file should contain the SQL statements needed to answer the following questions:\r\n<ol class=upper_case>\r\n<li>	How many agents are there in total?          <span><pre class=inline>### SELECT COUNT</pre></span>\r\n<li>	How many unique owners are there in total?     <pre class=inline>### SELECT DISTINCT COUNT( ) </pre>\r\n<li>	How many agents have a first name of Bill?       <pre class=inline>### SELECT ... WHERE ... </pre>\r\n<li>	How many dealerships are in Alabama?             <pre class=inline>### SELECT ... WHERE ... </pre>\r\n<li>	How many dealers are in Sawyer, TN?                <pre class=inline>### SELECT ... WHERE ... AND ... </pre>\r\n<li>	How many dealerships are owned by someone whose last name is Walker? <pre class=inline>### JOIN </pre>\r\n<li>	How many sales agents work for Maureen Isern?  <pre class=inline>### JOIN </pre> \r\n</ol> \r\n\r\n\r\n<p> To check Part 5 of this assignment:\r\n<ol>\r\n<li>	Answer the questions below in the file a05.txt.  (### You can run <c>source q05.sql</c> in mysql command line to see the results of your queries.) \r\n<li>	Run the script check05.sh to check your answer. \r\n<li> Don\'t forget to run Step 2 above to generate the .txt output file.  The check script may not inform you if the .txt file is missing. \r\n</ol>\r\n\r\n\r\n<p> Questions for Part 5:\r\n<ol class=upper_case>\r\n<li>	Enter DONE for part A when you have completed your script.  Then answer the rest of the questions in your a05.txt file.\r\n<li>	How many agents are there in total?\r\n<li>	How many unique owners are there in total?\r\n<li>	How many agents have a first name of Bill?\r\n<li>	How many dealerships are in Alabama?\r\n<li>	How many dealers are in Sawyer, TN?\r\n<li>	How many dealerships are owned by someone whose last name is Walker?\r\n<li>	How many sales agents work for Maureen Isern?   </ol>                             ', '', '', '', 'Automating MySQL checking procedure', 0),
(1069, 'homework', 7, 2, '      <ul>\r\n<li> Complete this problem within the q02 directory of homework 7.   </ul> \r\n\r\n<p> Create a file (q02.env) that defines four environment variables as follows:\r\n<ol> \r\n<li> MYSQL_ADMIN â€“ set to your salesadmin account name\r\n<li> MYSQL_MGR â€“ set to your salesmgr account name \r\n<li> MYSQL_PAD â€“ set to your salesadmin password\r\n<li> MYSQL_PMG â€“ set to your salesmgr account password\r\n</ol> \r\n\r\n<p> ### This is a definition file, not a script, so there\'s no shebang or chmod involved. \r\n<p> ### You may recall that, to create an environment variable, we use the <c>export</c> command.    \r\n<p> ### To activate the environment variables, use the <c>source</c> command.\r\n<p> You can run <c>printenv | grep <i>ENVariable</i></c>, <c>env | grep <i>ENVariable</i></c> or check02.sh to make sure you have made all of the environment variable assignments.\r\n\r\n<ul>\r\n<li> Enter â€œDONEâ€ in q02/a02.txt when you have completed the above. </ul>\r\n      ', '', '', '', '', 0),
(1070, 'homework', 7, 3, '                        <ul> \r\n<li> Complete this problem within the q03 directory of homework 7.  \r\n<li> Using a <b>for loop</b>, create a script in q03.sh to produce an output file q03.sql. \r\n<li> q03.sql should contains all of the SQL commands needed to display:\r\n    <ol>\r\n       <li> the names (first and last) of each of the dealership owners, and their owner id, \r\n       <li> the number of dealerships owned by and the owner id of each of the owners, and \r\n       <li> the names (first and last) of the sales agents working for each owner id.   </ol> </ul>\r\n\r\n<p> Note that: \r\n<ul> \r\n<li> Your sales database should contain all 34 owners, so there should be 34 lines of queries in q03.sql for each requirement above.   \r\n<li> In this question, you are creating the .sql file containing the required SQL statements, not generating the results. \r\n<li> You have to run q03.sh to generate the SQL queries each time before running the check script. </ul>\r\n\r\n<p> The output required as a result of the created SQL statements is the default output from the MySQL SELECT statements.  In total, there should be 34 of them as the figure below.  Donâ€™t worry about making it look pretty, that will come in later assignments.  What you want here is simple.  For example, if there is an owner named Edward Kaplan, then the ultimate SQL output when using q03.sql within MySQL should look something like the following:\r\n<pre>\r\n+-------+--------+----------+\r\n| fname | lname  | owner_id |\r\n+-------+--------+----------+\r\n| Edward| Kaplan |       34 |\r\n+-------+--------+----------+\r\n1 row in set (0.00 sec)\r\n\r\n+----------+----------+\r\n| COUNT(*) | owner_id |\r\n+----------+----------+\r\n|        1 |       34 |\r\n+----------+----------+\r\n1 row in set (0.00 sec)1 \r\n\r\n+----------+----------+----------+\r\n| fname    | lname    | owner_id |\r\n+----------+----------+----------+\r\n| Roger    | Murphy   |       34 |\r\n| Bill     | Alvarez  |       34 |\r\n| Jason    | Lee      |       34 |\r\n| Darrell  | Alvarez  |       34 |\r\n| Courtney | Henry    |       34 |\r\n| Ruth     | Rice     |       34 |\r\n+----------+----------+----------+\r\n3 rows in set (0.00 sec)\r\n</pre>\r\n\r\n<ul> \r\n<li> You can use check03.sh to check your work.\r\n<li> When you have completed this script and created the q03.sql file containing the SQL commands, enter DONE in response to part A in the file a03.txt.  \r\n </ul>                           ', '', '', '', '', 0),
(1071, 'homework', 7, 4, '      <ul>\r\n<li> Complete this problem within the q04 directory of homework 7. </ul>\r\n  \r\n<p> Create the script q04.sh that: \r\n<ul>\r\n<li> Uses environment variables created in question 2 for your <b>salesmgr</b> account and password (they should have been defined when you completed question 2 in the file q02.env in your q02 directory) \r\n<li> Executes the SQL statements you created in q03.sql\r\n<li> Creates an output file containing the results of the SQL queries.   </ul>\r\n\r\n<p> When complete, script q04.sh should run and not require any further input from the user.  \r\n<p> The script should meet the following requirements: \r\n<ol>	\r\n<li> If it does not already exist (use <c>-e</c> or <c>-L</c> to test), create a soft link linking the file h07/q02/q02.env to q04.env\r\n<li> If it does not already exist (use <c>-e</c> or <c>-L</c> to test), create a soft link linking the file h07/q03/q03.sql to q04.sql\r\n<li> Use the environment variables in q04.env to get your MySQL username (<b>salesmgr</b>) and password to run MySQL in Linux CLI using the file q04.sql as input and q04.txt as output.   </ol> \r\n\r\n<ul>\r\n<li> Run your script to create the required file (q04.txt).  You can use check04.sh to check your work.  Enter DONE in the file a04.txt. </ul>     ', '', '', '', '', 0),
(1072, 'homework', 7, 5, '         <ul>\r\n<li> Complete this problem within the q05 directory of homework 7.  </ul>\r\n\r\n<p> Recall that there are 34 owners (owner ids of 1 to 34 inclusive).  Create a script, q05.sh, that outputs the number of dealerships owned by each owner (represented by owner_id) to the computer screen.  It will be helpful to use a for loop for this purpose. <ul> \r\n<li> This script is very similar to the one used in Question 4, so a good way to start is to copy the q04.sh script from question 4 into your q05 directory and modify it as needed.  \r\n<li> The main difference between question 4 and question 5 is that in question 4 you used an existing SQL file and in question 5 you will generate an SQL input file within your script.  \r\n<li> The script (q05.sh) should do the following:\r\n    <ul> \r\n    <li> Create a soft link linking the file h07/q02/q02.env to q05/q05.env and source it.  (# You can env | grep or echo the variables to test.) \r\n    <li> Uses a for loop to generate an SQL file named q05.sql that contains the SQL statements needed to query your database by (in the order of) 1) owner (as represented by owner_id) and 2) the number of dealerships each owner owns. \r\n    <li> Use the environment variables containing your MySQL username (salesmgr) and password (as in question 2 and question 4) to log into MySQL and\r\n    <li> inside q05.sh, execute the q05.sql file created by your script as input and displays the result of the queries to the terminal.  \r\n<p> ### The MySQL query output in Linux CLI is not well formatted but if you log into MySQL command line and <c>source</c> q05.sql, you should see the outcome (34 of them) in the format as such: \r\n<pre>\r\n+----------+----------+\r\n| owner_id | COUNT(*) |\r\n+----------+----------+\r\n|       34 |        1 |\r\n+----------+----------+\r\n1 row in set (0.00 sec)1 \r\n</pre>\r\n</ul>\r\n</ul> \r\n<ul>\r\n<li> You can use check05.sh to check your work. Enter DONE in response to part A in the file a05.txt. </ul>\r\n          ', '', '', '', '', 0),
(1073, 'homework', 5, 1, '<h4> Know Your Data </h4>\r\n<p> The data: When a05.tar.gz has been unpacked, it will create a directory called SALESDATA in a05/q01.  This directory contains directories and text files containing the individual car sales records for each year, week and dealership between 2010 and 2015.  Please navigate through the directories to take a look the .txt files.  Know your data and you will feel more comfortable manipulating them. \r\n<ul>\r\n<li>	How are the directories structured? (Year/Week)\r\n<li>	How many subdirectories/files in each directory? \r\n<li>	What kind of sales are there?  (New/Used)  \r\n<li>	What fields do you see in each entry?  (VIN, Model, Year, Priceâ€¦ Agent ID) \r\n<li>	Each .txt file represent one dealer. </ul>\r\n\r\n<ul>\r\n<li> Complete the rest of Part 1 in the ~/class/a05/q01 directory. </ul>\r\n', '', '', '', '', 0),
(1074, 'lab', 5, 1, '<h4>1.1 Know Your Data </h4>\r\n\r\n<p> The data: When a05.tar.gz has been unpacked, it will create a directory called SALESDATA in a05/q01.  This directory contains directories and text files containing the individual car sales records for each year, week and dealership between 2010 and 2015.  Please navigate through the directories to take a look the .txt files.  Know your data and you will feel more comfortable manipulating them.\r\n\r\n<ul>\r\n<li> How are the directories structured? (Year/Week)\r\n<li> 	How many subdirectories/files in each directory? \r\n<li> 	What kind of sales are there?  (New/Used)  \r\n<li> 	What fields do you see in each entry?  (VIN, Model, Year, Priceâ€¦ Agent ID) \r\n<li> 	Each .txt file represents one dealer. </ul>\r\n\r\n<ul>\r\n<li> Complete the rest of Part 1 in the ~/class/a05/q01 directory. </ul>\r\n \r\n\r\n<h4> 1.2 Configure the environment </h4>\r\n\r\n<ol class=upper_case> \r\n<li>	The env_mysql file\r\n<p> Start by defining some environment variables that will be used to tell your scripts the values of your MySQL username, your mysql password and your data source.  Create a file in q01 called env_mysql.  This file should contain the definitions of three environment variables and a single line to check your definitions as follows:\r\n\r\n<pre>\r\nexport MYSQL_USER=\'salesadmin\' \r\n(# The export command will mark each VAR for automatic export to the environment of subsequently executed commands; i.e., make the local shell variable VAR global.)\r\nexport MYSQL_PASS=\'<i>password</i>\' \r\n(# replace <i>password</i> with your own password)\r\nexport MYSQL_DATA=\"$HOME/class/a05/q01/SALESDATA\"\r\nprintenv | grep -i MYSQL_ (# printenv == print environment variables; you should see the 3 variables you just exported.) \r\n</pre>\r\n\r\n<li>	<c>source</c> the environment variable definition file. \r\n<p> Once you have correctly created the env_mysql file, <c>printenv</c> (or env) and then pipe grep with proper string should let you check to confirm the environment variables are defined as expected. </ol>\r\n\r\n\r\n<h4> 1.3 Create SQL statements </h4>\r\n<p> Next, you will have to run a program to create the SQL statements needed to insert each of the sales transaction into the database.  This step reads the sales data from the weekly sales reports for each dealership and creates files containing the SQL statements needed to insert that information into the MySQL database.  To complete this step, you will need to run the program annual_sales.pl and provide it with the year of the data to insert (2010 to 2015).  \r\n\r\n<p> The program will ask you for the year and then create a file called salesXXXX.sql (where XXXX is the year) within the sXXXX subdirectory.  You will need to run this once for each year (2010 to 2015). \r\n<pre>\r\n./annual_sales.pl (# you will be asked for user input of year) </pre>\r\n</p>\r\n\r\n\r\n<h4> 1.4 Check your work </h4>\r\n<p> When you are done, \r\n<ul>\r\n<li>	run ./check01.sh to make sure everything checks out OK.  \r\n<li>	Finally, enter DONE in part A of a01.txt  </ul>  ', '', '', '', 'Preparing Data & Environment', 0),
(1075, 'lab', 5, 2, '  <h4> 2.1 Create symbolic (soft) links </h4>\r\n\r\n<p> Running annual_sales.pl for each year was relatively quick but inserting each yearâ€™s data into your mysql database is NOT.  Each yearâ€™s data can take up to 8 minutes to insert the 60,000 â€“ 90,000 sales records into the database.  As a result, we will run them as Linux background jobs so that we donâ€™t have to wait for them to complete one year before starting the next year.\r\n\r\n<p> If you have not yet completed Part 1, make sure you go back and do it now before you can perform the database insertion.\r\n\r\n<p> In this part of the lab, we will need access to the sql files that you created in Part 1.  To accomplish this, change to the a05/q02 subdirectory and use the following commands:\r\n<pre>\r\nln -s ../q01/s2010 s2010\r\nln -s ../q01/s2011 s2011\r\nln -s ../q01/s2012 s2012\r\nln -s ../q01/s2013 s2013\r\nln -s ../q01/s2014 s2014\r\nln -s ../q01/s2015 s2015\r\n# to check what links are there, use ls â€“l. \r\n# Practice: rm all the links; create a links file with the above commands; and then source the links file to recreate the links.   \r\n</pre>\r\n\r\n<h4> 2.2 Insert the data </h4>\r\n<p> For this next step, <b>ONLY ONE MEMBER</b> of your group should run the command <b>FOR EACH YEAR</b>.  Either have one group member run all the commands or divide them up between you.  \r\n<p> If more than one person completes the commands for a given year at the same time, the second attempt will delete the table the other user is using.  This will create a large number of errors.  Once you have a plan for inserting the data, do the following once for each year 2010 to 2015 where XXXX is the year:\r\n<ul> \r\n<li> Change to the q02/sXXXX directory and then run a mysql statement to get input from the salesXXXX.sql file.  Run the salesXXXX.sql file in the folders of all the years: \r\n<pre>\r\ncd sXXXX\r\nmysql â€“u salesadmin -pPASSWORD < salesXXXX.sql & (#&: run in subshell) </pre>\r\n\r\n<li> (### The & option makes the command run in the background.  These processes running through the \"&\" will also \"stay alive\" even if the ssh session is closed!) (# which means you can ^C to leave the command line or exit to sign out without terminating it because it is running in a subshell.) \r\n<li> (### You can log into the mysql shell and us source salesXXXX.sql to perform the same data insertion job but the mysql shell does not take the control operator &, so you would have to wait for the job to finish in this case)\r\n</ul> \r\n\r\n\r\n<h4> 2.3 Monitor the progress </h4>\r\n\r\n<p> You can use the following SQL command to monitor the progress of the data insertion (*.sql execution).  Log into MySQL shell, run it on the same year for several times to see the number of records increasing. \r\n<pre>\r\nSELECT COUNT(*) FROM sales_20XX \r\n(# no space after COUNT)\r\n(# unlike SELECT *, SELECT COUNT(*) does not have resource issue) </pre>\r\n\r\n<p> If everything went as planned, you and your lab partners would have inserted about 450,000 car sales records into the sales database.  In the next few parts of the problem, we will check these results in detail.  For now, we will just do a quick check of the total number of cars sold in each year.\r\n\r\n<h4> 2.4 Check your work </h4>\r\n<p> In order for the check to proceed, your MYSQL_USER and MYSQL_PASS environment variables must be set and active as described in Part 1. (# meaning: <c>source</c> it!)\r\n<ul>\r\n<li> Use the script check02.sh to verify that your group has created the necessary tables and inserted data into the database.  \r\n<li> When you are done, enter DONE into part A of a02.txt. </ul> ', '', '', '', 'Inserting the Sales Data into MySQL', 0),
(1076, 'lab', 5, 3, '  <p> After the data has been inserted, each member of the group would perform the data check. </p>\r\n\r\n<h4> 3.1 Create .sql file </h4>\r\n<p> Create a MySQL input script (call it q03.sql) to verify that the information in the database is correct by creating a series of MySQL statements to answer the following questions from A to E.  It is recommended that you:\r\n<ul> \r\n<li>	use two SSH terminals for a task like this: One for coding, the other testing.  \r\n<li>	comment and write first to plan what you want to do first, then write the query.  \r\n<li>	Test the query in another terminal in mysql shell.  When you satisfied with the result, copy-n-paste it over to q03.sh. \r\n<li>	In nano, use Ctl+o to save but not exit the nano editing mode.  \r\n<li>	use DESCRIBE table_name to observe the fields: Primary key, auto_increment\r\n<li>	use SELECT * FROM sales_2013 LIMIT 10 to observe records\r\n<li>	note that in a .sql file, we start with USE <i>db_name</i>;\r\n</ul>\r\n<ol class=upper_case>\r\n<li>	How many cars were sold in 2010? \r\n<li>	How many cars were sold in July in 2013? \r\n<li>	How many Honda Odysseyâ€™s were sold in 2015?\r\n<li>	How many cars did Linda Carr sell in 2014?  (# \r\n<li>	What was the profit on the sale of the vehicle with VIN: JE142FU154525XBX8? </ol>\r\n \r\n<h4> 3.2 Run the .sql file </h4>\r\n<p> While you are working on the .sql file, you can run it in the mysql shell using the following command to see the results as you incrementally write the SQL statements: \r\n<pre>\r\nsource q03.sql  </pre>\r\n\r\n<p> After you have completed the .sql file, run it in the Linux command line shell to see the results:\r\n<pre>\r\nmysql â€“u $MYSQL_USER â€“p$MYSQL_PASS < q03.sql </pre>\r\n\r\n<p> Finally, redirect the results to a file (q03.txt) when you run the .sql file in Linux command line as follows:\r\n<pre>\r\nmysql â€“u $MYSQL_USER â€“p$MYSQL_PASS < q03.sql > q03.txt </pre>\r\n\r\n<p> If you encounter error messages regarding the two USER and PASS environment variables, it is possible that you have work in a different shell context now.  Just run the env_mysql file again: <c>source ../q01/env_mysql</c> in this current shell to continue.\r\n\r\n<h4> 3.3 Check Your Work</h4>\r\n<ul>\r\n<li> Run mysql as described above to create the file q03.txt with the results of your sql statements.  \r\n<li> Enter the answers to A-E into a03.txt and use the script check03.sh to verify that you created the correct files.\r\n</ul> ', '', '', '', 'Check Sales Data in MySQL', 0),
(1077, 'lab', 5, 4, '  <h4> Purpose: Quality control </h4>\r\n\r\n<p> In this part of the lab, we want to create a bash script called q04.sh to examine the data in the text files, so we can compare the information in our original data text files with the data in the SQL files we created in Part 1 and with the data that ended up in our database in Part 2.  In other words, we are checking the accuracy of data by comparing the results from grepping the files in SALESDATA and the database query results from Part 3.  \r\n\r\n<p> To search over the files for the records we want, we need to carefully observe the dataset.  The more we know the data, the better accuracy we can have when searching through the dataset. \r\n\r\n<h4> 4.1 Create the script </h4>\r\n<p> Our script q04.sh must be able to do the following: \r\n<ol> \r\n<li>	Create a link to the SALESDATA in q04, if one does not already exist, using:\r\n    <pre>ln -s ../q01/SALESDATA SALESDATA </pre>\r\n<li>	Determine the total number of cars sold by all dealerships combined in each of the years 2010 through 2015. \r\n<li>	Determine the total number of cars sold by all dealerships combined in July of each year.\r\n<li>	Determine the total number of Honda Odysseyâ€™s sold by all dealerships combined in each year.\r\n<li>	Determine the total number of cars sold by Linda Carr in each year.\r\n<li>	Lâ€ist the sales data associated with a specific VIN provided as a command line parameter.  (# In the script, assign the VIN you used in Part 3 into a variable as the default VIN number, and then write an if statement to receive a command line argument in the form of positional parameter.  Do not read to prompt for user input, or the check script will hang -- although no harm will be done.)\r\n<li>	Determine the total number of cars sold by all dealerships combined in all years.  </ol>\r\n \r\n\r\n<h4> 4.2 Check your work </h4>\r\n<p> When you have completed the script, run check04.sh to check it.  This will take a while to complete.    \r\n<p> Use the information produced with q04.sh to determine the answers for A-E in a04.txt.  \r\nIn a04.txt enter the following:\r\n<ol class=upper_case>\r\n<li>	The number of cars sold in 2010\r\n<li>	The number of cars sold in July 2013.\r\n<li>	The number of Honda Odysseyâ€™s sold in 2015.\r\n<li>	The number of cars sold by Linda Carr in 2014.\r\n<li>	 The model type of the car with VIN JE142FU154525XBX8. </ol>\r\n\r\n<p>\r\nNote:\r\nThese results should be the same as Part 3 except for question E. \r\n', '', '', '', 'Checking the sales data in the SALESDATA files', 0),
(1078, 'lab', 5, 5, '   <h4> 5.1 Create the data dump </h4>\r\n<ul>\r\n<li> Complete this part in a05/q05.   </ul>\r\n\r\n<p> Once you are convinced your database is correct after the checking procedures in Part 3 and 4, create a backup of the database as follows.  We will use the MySQL database client backup utility program available in Linux: mysqldump.  This utility produces a set of SQL statements that can be executed to reproduce the original database object definitions and table data.  It dumps one or more MySQL databases for backup or transferring to another SQL server. The mysqldump command can also generate output in CSV, other delimited text, or XML format (see man mysqldump for details).  The syntax of the command is as below: \r\n<pre>\r\nmysqldump â€“h localhost â€“u salesadmin -p<i>password</i> sales > salesv00.sql\r\n(# where -h option requires the hostname)  </pre>\r\n\r\n<ul>\r\n<li> Determine the size of the file salesv00.sql in bytes using:\r\n<pre>\r\nls -l (# record the size) </pre>\r\n\r\n<li> Compress the file using:\r\ngzip salesv00.sql\r\n\r\n<li> Determine the size of the compressed file salesv00.sql.gz in bytes.  (The opposite of gzip is gunzip with similar syntax.) \r\n\r\n<li> Create the directory named backup in your home directory (if you havenâ€™t done so already) and move the zipped file (salesv00.sql.gz) into it.  </ul>\r\n\r\n<p> Once you have completed those steps run check05.sh.  It will ask you to answer the following questions.\r\n<ol class=upper_case>\r\n<li>	What is the size of the backup file in Megabytes (uncompressed size divide by 1024 x 1024 or 1,048,576)?  You should give you answer to the nearest Megabyte.\r\n<li>	What is the size of the compressed backup file in Megabytes?  You should give your answer to the nearest Megabyte.\r\n<li>	What is the compression ratio in percent (100 x Uncompressed Size in MBytes/Compressed size in MByte) for your database backup file?   Round your answer to the nearest 10 percentage points, for example, if you calculated a 438% compression enter the number 440 instead of 438.  </ol>  </ul>\r\n\r\n<h4> 5.2 Check your work</h4>\r\n<ul> \r\n<li> When you have completed the script, run check05.sh to check it.  \r\n<li> When you have completed the above, enter DONE in part A of a05.txt. </ul>\r\n\r\n   ', '', '', '', 'Creating a Backup of the Database', 0);

-- --------------------------------------------------------

--
-- Table structure for table `log`
--

CREATE TABLE `log` (
  `logid` int(11) NOT NULL,
  `uid` int(11) NOT NULL,
  `unit_type` varchar(49) COLLATE utf8_unicode_ci NOT NULL,
  `unit_number` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `quiz`
--

CREATE TABLE `quiz` (
  `quiz_id` int(8) NOT NULL,
  `type` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `question` varchar(1024) COLLATE utf8_unicode_ci NOT NULL,
  `item1` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `item2` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `item3` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `item4` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `item5` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `answer` varchar(256) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `quiz`
--

INSERT INTO `quiz` (`quiz_id`, `type`, `question`, `item1`, `item2`, `item3`, `item4`, `item5`, `answer`) VALUES
(1, '', 'Q1', 'A', '', '', '', '', 'YES'),
(2, '', 'Q1', 'B', '', '', '', '', '\0'),
(3, '', 'Q1', 'C', '', '', '', '', '\0'),
(4, '', 'Q1', 'D', '', '', '', '', '\0');

-- --------------------------------------------------------

--
-- Table structure for table `scores`
--

CREATE TABLE `scores` (
  `id` int(8) NOT NULL,
  `FK_uid` int(11) NOT NULL,
  `FK_quiz_id` int(5) NOT NULL,
  `score` int(5) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE `user` (
  `uid` int(11) NOT NULL,
  `email` varchar(49) COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `username` varchar(49) COLLATE utf8mb4_unicode_ci NOT NULL,
  `first_name` varchar(49) COLLATE utf8mb4_unicode_ci NOT NULL,
  `middle_name` varchar(49) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `last_name` varchar(49) COLLATE utf8mb4_unicode_ci NOT NULL,
  `user_type` enum('user','admin','guest') COLLATE utf8mb4_unicode_ci NOT NULL,
  `fsu_id` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`uid`, `email`, `password`, `username`, `first_name`, `middle_name`, `last_name`, `user_type`, `fsu_id`) VALUES
(37, 'tc16k@my.fsu.edu', '$2y$10$3iCxgVfYwbkL/BGYZaVKRu/RO5vokcIxJyslr6wLFWD/JKXKzxKYy', 'tc16k', 'Tsangyao', NULL, 'Chen', 'admin', 'tc16k'),
(38, 'tt@tt.com', '$2y$10$dk/97PMFlFlB1IA1fyCtS.kviWA/DHQ50jSU..1nb24hNZ9rc/Upi', 'tt', 'tt', NULL, 'tt', 'user', 'tt'),
(39, 'ss@ss.com', '$2y$10$rlE3qoWWyTzd/g.HmYPjuOQzBUlW2lGcWVQ5UTfEHeGaD13ARKOwi', 'ss', 'ss', NULL, 'ss', 'user', 'ss'),
(40, 'hb15b@my.fsu.edu', '$2y$10$piBhEcuSO7pppS44PgnJ0urcGU0MpAW.22VKbylOfGGj8MZ.t67jG', 'Hyerin', 'Hyerin', NULL, 'Bak', 'admin', 'hb15b'),
(41, 'tychen742@gmail.com', '$2y$10$FQpkpTi6e0pJb8oTu2ZMqe5WQlVJL81wp47IwtB3Y4IPpkYeUa.TC', 'tychen', 'Tsangyao', NULL, 'Chen', 'user', 'tc16k'),
(42, 'ttt@ttt.com', '$2y$10$ZkgSAbF.8GS55v72kOtYzOH8md/F91u5CfyBMPOTuUjQ2wMTDwWzi', 'ttt', 'ttt', NULL, 'ttt', 'admin', 'ttt'),
(43, 'ran16@my.fsu.edu', '$2y$10$nMhl7reixnMVIXwht6rDluueCxnayQX.ZPIPSVnXOygekhKr9vaci', 'regginelson', 'Reggi', NULL, 'Nelson', 'user', 'ran16'),
(44, 'quinn.ng997@gmail.com', '$2y$10$UckXkvcQob/G.BPNWlMK6.SANuv.u03IbykUonL1H1uQRy8t1ai5S', 'lucky997', 'Quinn', NULL, 'Nguyen', 'user', 'QN18'),
(45, 'mbr09@my.fsu.edu', '$2y$10$PLv7TAa/odYC8xKVxBA8buuu7oYYjpSTuL6kAxjs0VNV84ZKytPf2', 'mresnick', 'Michael', NULL, 'Resnick', 'user', 'mbr09'),
(46, 'bct16@my.fsu.edu', '$2y$10$et4OoIzfW2uyBTddevkBy.o2/ojrDZ3mbuZ4sDhbJDfKQbryZEr0i', 'chris', 'Chris', NULL, 'Thornton', 'user', 'bct16'),
(47, 'mmo16@my.fsu.edu', '$2y$10$0VPhm2QjPd.Y2pGi9xI37eOtLRv3zKShTNd2I3iNUpE/DQV8KqdCS', 'mikaylaow1', 'mikayla', NULL, 'owen', 'user', 'mmo16'),
(48, 'abarlowisart@gmail.com', '$2y$10$xbdptptqZA6erI/tIpicH.7OLqfSAY4.TTicZELhjtg1rXpsTExni', 'abarlow', 'Alex', NULL, 'Barlow', 'user', 'arb15v'),
(49, 'daa16k@my.fsu.edu', '$2y$10$joSEsTkHrijt/Fdl.KKTc.E5QW1fb66z1upt99XW77PmwkvksoKk.', 'devo415', 'Devonte', NULL, 'Aird', 'user', 'devo'),
(50, 'tforaker@protonmail.ch', '$2y$10$B6wh/dclUywvnRCmGpoCS.kLkBN/efjyhgDxDWqfQ7JGEJR9hbnga', 'tforaker', 'Travis', NULL, 'Foraker', 'user', 'trf17'),
(51, 'jcwelch@fsu.edu', '$2y$10$esA8JsjA8zfrDeCpV.N35er5W4cGjHmic3IiFyDgugZMBjxjPKYpm', 'jwelch', 'John', NULL, 'Welch', 'user', 'jcwelch'),
(52, 'mtd16@my.fsu.edu', '$2y$10$4jAd60Wy.Xy7m1ne0ikeNO55W5PbimUk4wi823N81iRASf9RJKc5.', 'mtd16', 'Michael', NULL, 'DeMaria', 'user', 'mtd16'),
(53, 'mmw16c@my.fsu.edu', '$2y$10$SU29LNsQ9hk7Dm5Wc55MdOM0jwUpgtjCN5cxA/pOeGQ.usez3M7MS', 'mweas', 'Matthew', NULL, 'Weas', 'user', 'mmw16c'),
(54, 'jsu18b@my.fsu.edu', '$2y$10$wxUn.k/KWmJHBF1PTxvEVeohgWYRhqAF8cBMkZ1ceQjnQLN7xJKw.', 'jsianguk', 'Jonathan', NULL, 'Hrang', 'user', 'jsu18b'),
(55, 'dsh16c@my.fsu.edu', '$2y$10$yc6a26Y72D.rZ1NgU6rm5OS4wzYgwrYeNhwYZ6tGf8JMniZf36JtS', 'dariellehess', 'Darielle', NULL, 'Hess', 'user', 'dsh16c'),
(56, 'rtg17@my.fsu.edu', '$2y$10$nElO/YN10QblhXcLxeEz/.ywmFxWqywHU4L/8e4vXTS4OlOZviUyq', 'rtg17', 'Rhett', NULL, 'Gordon', 'user', 'rtg17'),
(57, 'graysonm788@gmail.com', '$2y$10$5uWJshQN10lUrzueKMArLel2pOvt0LbdrQd4xM.K3bbdAPdL5HgZu', 'martgr4', 'Grayson', NULL, 'Martin', 'user', 'martgr4'),
(58, 'logan.saliga@gmail.com', '$2y$10$hKnFQwaLzdSynZOqtUOjhuUd..mJeMN2egxyLhoOcqRBiwjQaELtS', 'logsa', 'Logan', NULL, 'Saliga', 'user', 'fsuid'),
(59, 'jdc16d@my.fsu.edu', '$2y$10$8a0Z6z67geeC5bAm8BSvCO.ZkaUjmuLZ3ulaACTQiFqSXwJjihO0.', 'Dcj21', 'Juan', NULL, 'Carballo', 'user', 'jdc16d'),
(60, 'theaustinrelis@gmail.com', '$2y$10$cuPeigaGSaapOKO02Ti5GeisRr5w/f64qPT8InchfX5mQXsuELbSu', 'plokij31', 'archduke', NULL, 'qpzm', 'user', 'zzzzzz'),
(61, 'htranorii@gmail.com', '$2y$10$9QqwWZrNNE0bQnWTXJypYuuZyhtzFdO7c2TplLt3dAMz1izuhU9p.', 'howardt', 'Michael', NULL, 'Tranor', 'user', 'hmt15c'),
(62, 'brielgo@hotmail.com', '$2y$10$X9YsTxPQQp.xwNb91q9KkekQnVnSlFKKVeMZyrvVayCtthY3tciky', 'gabsteve23', 'Gabriel', NULL, 'Gomez', 'user', 'gsg17'),
(63, 'kevin.swords89@gmail.com', '$2y$10$hQMLl2AuHUgg7RSusDSmROH7jG7Bx514a5yj9H0mNPVh3qooTMR1K', 'swords23', 'Kevin', NULL, 'Swords', 'user', 'kas18u'),
(64, 'alecrchrysler24@hotmail.com', '$2y$10$qwIyDKxiYJlg6yyaC5UH7e9G6zyx6NKVBz/zCn5ULSw63jif.PxUy', 'archrysler', 'Alec', NULL, 'Chrysler', 'user', 'arc17'),
(65, 'elsbe92g@gmail.com', '$2y$10$eoGBq3GcqoLkwCf6tStPvu70GDSZvJrHpPtZ/EKMk1QHU0Hr2GzE6', 'elsbe92g', 'Alec', NULL, 'Elsbernd', 'user', 'ame18s'),
(66, 'knezmp@gmail.com', '$2y$10$hk613fSto55pIbhNP97eUutUCPAOc3Q6R4nkxI86BAe3z16zM01nu', 'knezmp', 'Matthew', NULL, 'Knez', 'user', 'mpk18j'),
(67, 'cab16h@gmail.com', '$2y$10$z/UqW.CX1LZJjsFFWNMeYOzgpsUW.hcHtoq7gkvmrQMudMVyY/uTu', 'raplax', 'Christian', NULL, 'Burell', 'user', 'cab16h'),
(68, 'tondreauh@gmail.com', '$2y$10$bwag.UcwGKX87PHiQh2FheYTT1yqvROLcuxyBRFbbij5zQoWCXYRK', 'TondreauH', 'Hunter', NULL, 'Tondreau', 'user', 'hrt15b'),
(69, 'gg17@my.fsu.edu', '$2y$10$i0Gl2IpQLozzZ.CArBOrBeLq0tUI/FQshxvorF0ZrJbcxjPnmzO.i', 'geo2298', 'George', NULL, 'Guzman', 'user', 'gg17'),
(70, 'nkb16b@my.fsu.edu', '$2y$10$oRYcid6yS76w4uH/VC2VVejVKxCJ.TBMFftaovkch2.Id8.zIe84K', 'nkb16b', 'Nyshia', NULL, 'Baker', 'user', 'nkb16b'),
(71, 'galwolf123@gmail.com', '$2y$10$eiquvrXI3iAZ4j5ZGjVdj.K.iRatbAwsf.cIuHJ/G0yLBi4sOhf5m', 'galw2', 'Gal', NULL, 'Wolf', 'user', 'galw2'),
(72, 'kjr16c@my.fsu.edu', '$2y$10$PYpryBKYYH2b5HtfIc76Wea0Db/hemSzFZUcm7PSmxsvxqhKdlcU6', 'Kevin_Robinson', 'Kevin', NULL, 'Robinson', 'user', 'krob3'),
(73, 'torres14172@gmail.com', '$2y$10$Nypm9b7LpmPCYLtB66B2NuUsVt49pNz6bpULVoE0KN1vgZXzQnu3S', 'Eli-44', 'Eli', NULL, 'Torres', 'user', 'E12c'),
(74, 'sandroperez013@gmail.com', '$2y$10$crktrkmUitYcFNADk.NX5uEFBs6hKQr0OZJfqF9AulQKdY0O0RdU6', 'SP022', 'Senior', NULL, 'IT', 'user', 'xx11c'),
(75, 'defnothosay@gmail.com', '$2y$10$F2dRYLOVawB6PqD9zqgmq.6xW/eqFvoJs9U8kHWH4njzvQE67tSwe', 'defnothosay', 'h', NULL, 'man', 'user', 'yes'),
(76, 'yetherly@gmail.com', '$2y$10$HeVTd4Qz1S/7B46YWX0p2.5xrNr37cHHP33hOUskQeN8ycxdNLLV.', 'gonoles', 'Yatil', NULL, 'Etherly', 'user', 'gonoles'),
(77, 'robeldaniel8379@gmail.com', '$2y$10$HJB1/eZh8n5guAtFR5QmN.ZIjlh00BcHxxB1USM0kj5i.lLPeAogG', 'America', 'Steve', NULL, 'Rogers', 'user', 'sr23'),
(78, 'jrchanin30@gmail.com', '$2y$10$cga35I7tzzJqIzf3n3tysukIeWu3u6wqU5Fq11qnMcO4BuypgDOXG', 'jrchanin30', 'Joshua', NULL, 'Chanin', 'user', 'jrchanin30'),
(79, 'bkbennet3@yahoo.com', '$2y$10$lTXyE01RA.5KNrIme/ca0ukhIzRHQ9yQzLtBEjhJELIICP7Ia43Oq', 'bkbennet', 'Broderick', NULL, 'Bennett', 'user', 'bkbennet'),
(80, 'lucky190197@gmail.com', '$2y$10$dmufCGQx870aNQtB6aQ26eiHGZRvHfCoW7QDI/yk1nNLS0GLNUNYm', 'lucky97', 'Lucky', NULL, 'N', 'user', 'Lucky'),
(81, 'justintpotts@yahoo.com', '$2y$10$n4iDhe7KXGh8dtgvzecL/u51uvhuzpUn1ukOlxbLFEnL3JMlqrmEm', 'bluesteel', 'spectrum', NULL, 'shields', 'user', 'ssjss'),
(82, 'bll16g@my.fsu.edu', '$2y$10$gAOUEgqMaEJ//AUmoM22zudiCcS/Wjrepjum2iwHzQmGVFlvV4g/.', 'brandonlacayo', 'Brandon', NULL, 'Lacayo', 'user', 'bll16g'),
(83, 'jam15k@my.fsu.edu', '$2y$10$8QwrEgwcNQ0q1wUC.Bo/i.a5g5IX.G1cfB/RbqpRNiSYUvEYHZBQa', 'jam15k', 'Jorge', NULL, 'Morejon', 'user', 'jam15k'),
(84, 'ms17x@my.fsu.edu', '$2y$10$CSLzHEf3SJhsIw0T3UwUIO.ZISZQHg8WtQZqO4slMHUBZ9QLJcw0.', 'evoseide', 'mitchnikov', NULL, 'seide', 'user', 'ms17x'),
(85, 'duranricardo312@gmail.com', '$2y$10$rB1jJAxVTT8R05tOyTo8GeY.Zo3L9t.Bd3LO1A4jvJviHcpSC0jQ2', 'Rick', 'Ricardo', NULL, 'Duran', 'user', 'rad17c'),
(86, 'andrewr1297@gmail.com', '$2y$10$qIRSmoHfZ62.iOeABBS3decyU6pRFD4YRj08uJudw8KcQaU4o6eEy', 'AndrewR', 'Andrew', NULL, 'Reyes', 'user', 'agr18b'),
(87, 'willfull09@gmail.com', '$2y$10$8eYXn85rmxHo6u9Vp2JU5Olip5sHWBBG/fh8mJXCc6.3FHOiTsiLa', 'wtf15', 'William', NULL, 'Fuller', 'user', 'wtf15'),
(88, 'by11@my.fsu.edu', '$2y$10$RQEjDnsEuwXBpaA1.T7Q4uNoUbr77GYU2reWWd2j8QZBVO3EnyA4a', 'yockey', 'brandon', NULL, 'yockey', 'user', 'by11'),
(89, 'jj17m@my.fsu.edu', '$2y$10$a5Bs3eSARgyqkmnHlN37JOqVUNgoFwDEBSH1I.xfGkWg3JBAbQq3S', 'judy240', 'Judy', NULL, 'Jean', 'user', 'jj17m'),
(90, 'acc16@my.fsu.edu', '$2y$10$cKD33japrY2qj6jCIKdnoublM2RMKGYdEruP3CZ5TLWclrxUmRW1S', 'Ayanna', 'Ayanna', NULL, 'Chukes', 'user', 'Accl16'),
(91, 'Ayanna.chukes@yahoo.com', '$2y$10$wNMIhmvkd/m83EiaKLsoAu7dBACQKvZjabuk8W0aY2KhzVxDwn1Gq', 'Ayanna', 'Ayanna', NULL, 'Chukes', 'user', 'Accl19'),
(92, 'dab17g@my.fsu.edu', '$2y$10$ljvczGdMWd134IJpAtW03u/5r.vdkYlPeTDi5Sw/EzLsKMdIrfqKS', 'dathanbusby', 'Dathan', NULL, 'Busby', 'user', 'dab17g'),
(93, 'arc17@my.fsu.edu', '$2y$10$mamClmISMgofejAnUPjYVue8xNM2vRYB109.m4ybSe0GT5EUxBBGi', 'archrysler', 'Alec', NULL, 'Chrysler', 'user', 'arc17'),
(94, 'jrc16c@my.fsu.edu', '$2y$10$JBDALB9UBwLTY35acbynIeRql6s6JYRkueSLuPikXuZq5jTZysHuK', 'jrc16c', 'Joshua', NULL, 'Chanin', 'user', 'jrc16c'),
(95, 'mjt18e@my.fsu.edu', '$2y$10$DswDygUC2a4T6oVzlE9bl.2xNTx3JDuk5/m/aWdmx6Xaah.Afryvm', 'mjt18e', 'Marc', NULL, 'Toussaint', 'user', 'mjt18e'),
(96, 'lbs15b@my.fsu.edu', '$2y$10$Z43ftExCNu7i5wF65fF0IOxZ47TAGizPUIcM2u.Z9oY83NkDB9tCm', 'lozg', 'Forever', NULL, 'Young', 'user', 'myfsuid'),
(97, 'dariellehess@gmail.com', '$2y$10$HPXqd4ET2ykb2/11MQ2tte0fmFi7SuhSBTpXMmcIvaUFxTOHbLKxO', 'darielle', 'Darielle', NULL, 'Hess', 'user', 'dsh16c'),
(98, 'rad17c@my.fsu.edu', '$2y$10$h6tsd3yOXgQ0L2QxSk/eleFUudZ1PVNDPCYY8a3lTDwqXLsiRKJ9.', 'rick', 'Ricardo', NULL, 'Duran', 'user', 'rad17c'),
(99, 'travelingman1993@gmail.com', '$2y$10$7WdOLojddy8tC4b8Ac1jIOWIInSgY7xx/tXmeY.1.g2GZy3v6Vzqi', 'ricky', 'ricardo', NULL, 'duran', 'user', 'rad17c'),
(100, 'galwolf123@yahoo.com', '$2y$10$mVKzUjwxtnOO9N4FJYfD4erCCi0z9InqcgeubdWuD2RqBI9Rn5KKa', 'gwolf', 'gal', NULL, 'Wolf', 'user', 'galw22'),
(101, 'pesiuquay97@yahoo.com', '$2y$10$uGmqmrc5z92u9kRZRK0l5OTWCXMmtL/6btqO3DLfXAg8uqP1zZhxa', 'quinnloli', 'quinn', NULL, 'nguyen', 'user', 'qn18'),
(102, 'matthew.weas@hotmail.com', '$2y$10$qY6p5XwliiLcKrF0/ci0o./EbVShrrIajbetnNsZQTVFIKTZ44DBS', 'mweas', 'Matthew', NULL, 'Weas', 'user', 'mmw16c'),
(103, 'gsg17@my.fsu.edu', '$2y$10$or56Gl5QFwMNU.VV6b9mYeuqfudMTnxnAc/JDmHGC5VEr0BzF8OlK', 'gabe', 'Gabriel', NULL, 'Gomez', 'user', 'gsg17'),
(104, 'foraker.travis64@icloud.com', '$2y$10$qSJr5Ao8XFSLNPo1pE97auuPnDmm.f4UEYu9UKIO0ybOick/uvhhS', 'travforaker', 'Travis', NULL, 'Foraker', 'user', 'xxx16'),
(105, 'ar15ad@my.fsu.edu', '$2y$10$bzVDmv3cDPnADEa20.sSreJnH9N3RSya3e76gp34yo4wdOiV1oupW', 'blahblah', 'austin', NULL, 'relis', 'user', 'ar15ad'),
(106, 'ztp17b@my.fsu.edu', '$2y$10$7rIdyKXgSQTNi1n1rIHJmeHWxQymnm3LPPTRwv8OceEeo9qDQRvIm', 'ztp17b', 'Zachary', NULL, 'Potesta', 'user', 'ztp17b'),
(107, 'iamaboss110@gmail.com', '$2y$10$GAjSWov4jRqlO/IE1A0U5OVAAJ01v.YptouFEBzA7ahPdZ9bjk9eu', 'M4st3rCh13f', 'Chris', NULL, 'name', 'user', 'b2588'),
(108, 'dathanbusby8l@gmail.com', '$2y$10$FCIdI.sU1LwLtQ1Gxtp3kun94zKi4yHP93Du5D91HzxXsVBqx8vg2', 'dathan', 'dathan', NULL, 'busby', 'user', 'dab17g'),
(109, 'devoaird@gmail.com', '$2y$10$omGbFUTtdbC2vM2tHjOpseSjqUPcHpDR.c6EaelHXs6ZJIJJ6RWQu', 'daa', 'Devonte', NULL, 'Aird', 'user', 'daa16k'),
(110, 'hrt15b@my.fsu.edu', '$2y$10$vU/tX/b/nB3I6V4Rhh5XZ.SZdP61Q2tl.pIfCmhRXHB5hNcMHAWaS', 'hrt15b', 'Hunter', NULL, 'Tondreau', 'user', 'hrt15b');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `content`
--
ALTER TABLE `content`
  ADD PRIMARY KEY (`qid`),
  ADD UNIQUE KEY `qid_2` (`qid`),
  ADD KEY `id` (`qid`),
  ADD KEY `qid` (`qid`);

--
-- Indexes for table `log`
--
ALTER TABLE `log`
  ADD PRIMARY KEY (`logid`),
  ADD KEY `uid` (`uid`);

--
-- Indexes for table `quiz`
--
ALTER TABLE `quiz`
  ADD PRIMARY KEY (`quiz_id`);

--
-- Indexes for table `scores`
--
ALTER TABLE `scores`
  ADD PRIMARY KEY (`id`),
  ADD KEY `FK_uid` (`FK_uid`),
  ADD KEY `FK_quiz_id` (`FK_quiz_id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`uid`),
  ADD UNIQUE KEY `email` (`email`),
  ADD UNIQUE KEY `id` (`uid`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `content`
--
ALTER TABLE `content`
  MODIFY `qid` int(16) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1079;

--
-- AUTO_INCREMENT for table `log`
--
ALTER TABLE `log`
  MODIFY `logid` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `quiz`
--
ALTER TABLE `quiz`
  MODIFY `quiz_id` int(8) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `scores`
--
ALTER TABLE `scores`
  MODIFY `id` int(8) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `uid` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=111;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `log`
--
ALTER TABLE `log`
  ADD CONSTRAINT `uid` FOREIGN KEY (`uid`) REFERENCES `user` (`uid`);

--
-- Constraints for table `scores`
--
ALTER TABLE `scores`
  ADD CONSTRAINT `scores_ibfk_1` FOREIGN KEY (`FK_uid`) REFERENCES `user` (`uid`) ON DELETE NO ACTION ON UPDATE CASCADE,
  ADD CONSTRAINT `scores_ibfk_2` FOREIGN KEY (`FK_quiz_id`) REFERENCES `quiz` (`quiz_id`) ON DELETE NO ACTION ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
